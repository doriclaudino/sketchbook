{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/17.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","initShape","shapes","setup","pixelDensity","createCanvas","Array","from","a","random","TWO_PI","d","sort","b","noFill","draw","background","i","shape","stroke","map","length","beginShape","curveVertex","width","height","forEach","pt","endShape","unshift","constrain","noise","frameCount","pop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-06-17-js-8e1821763d50d1ce8c0f.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const GAP = 6;\r\n\r\n  let initShape = [];\r\n  let shapes = [];\r\n\r\n  p.setup = function() {\r\n    p.pixelDensity(1);\r\n    p.createCanvas(660, 840);\r\n\r\n    initShape = Array.from(Array(100), () => ({\r\n      a: p.random(p.TWO_PI),\r\n      d: p.random(10),\r\n    }));\r\n\r\n    initShape.sort((a, b) => a.a - b.a);\r\n    shapes = [initShape];\r\n\r\n    p.noFill();\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n\r\n    for (let i = shapes.length - 1; i >= 0; i--) {\r\n      const shape = shapes[i];\r\n\r\n      p.stroke(255, p.map(i, 0, shapes.length, 255, 0));\r\n      p.beginShape();\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          shape[shape.length - 3].a,\r\n          shape[shape.length - 3].d + i * GAP,\r\n          true\r\n        )\r\n      );\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          shape[shape.length - 2].a,\r\n          shape[shape.length - 2].d + i * GAP,\r\n          true\r\n        )\r\n      );\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          shape[shape.length - 1].a,\r\n          shape[shape.length - 1].d + i * GAP,\r\n          true\r\n        )\r\n      );\r\n      shape.forEach(pt =>\r\n        p.curveVertex(\r\n          ...polarToCartesian(\r\n            p.width / 2,\r\n            p.height / 2,\r\n            pt.a,\r\n            pt.d + i * GAP,\r\n            true\r\n          )\r\n        )\r\n      );\r\n      p.endShape();\r\n    }\r\n    shapes.unshift(\r\n      initShape.map(({ a, d }) => ({\r\n        a: p.constrain(\r\n          a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9),\r\n          0,\r\n          p.TWO_PI\r\n        ),\r\n        d: d * p.noise(d, p.frameCount / 500) * 10,\r\n      }))\r\n    );\r\n    if (shapes.length > p.height / (GAP * 2)) {\r\n      shapes.pop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}