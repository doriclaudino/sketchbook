{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/03.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","grid","Doodad","x","y","size","this","square","lerpLine","noise","frameCount","setup","createCanvas","background","stroke","noFill","floor","width","height","xx","push","yy","visited","draw","random","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","dist","l","point","lerp"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IAIIC,EACAC,EALEC,EAAY,GACZC,EAAQ,CAAC,EAAG,EAAG,EAAG,IAEpBC,EAAO,GAILC,EARmB,WASvB,WAAYC,EAAGC,EAAGC,GAChBC,KAAKH,EAAIA,EAAIJ,EACbO,KAAKF,EAAIA,EAAIL,EACbO,KAAKD,KAAOA,EAAON,EAEnBO,KAAKC,SAdgB,mBAgBvBA,OAAA,WACE,IAAK,IAAIH,EAAIE,KAAKF,EAAGA,GAAKE,KAAKF,EAAIE,KAAKD,KAAMD,IAC5CI,YACEZ,EACAU,KAAKH,EACLC,EACAE,KAAKH,EAAIG,KAAKD,KACdD,EACAR,EAAEa,MAAMb,EAAEc,WAAYN,GAAKE,KAAKD,OAxBf,KA8BzBT,EAAEe,MAAQ,WACRf,EAAEgB,aAAa,IAAK,KACpBhB,EAAEiB,WAAW,KACbjB,EAAEkB,OAAO,GACTlB,EAAEmB,SAEFlB,EAAID,EAAEoB,MAAMpB,EAAEqB,MAAQlB,GACtBD,EAAIF,EAAEoB,MAAMpB,EAAEsB,OAASnB,GAEvB,IAAK,IAAIoB,EAAK,EAAGA,EAAKtB,EAAGsB,IAAM,CAC7BlB,EAAKmB,KAAK,IACV,IAAK,IAAIC,EAAK,EAAGA,EAAKvB,EAAGuB,IACvBpB,EAAKkB,GAAIC,KAAK,CACZjB,EAAGgB,EACHf,EAAGiB,EACHC,SAAS,MAMjB1B,EAAE2B,KAAO,WAAY,IAAD,MACD3B,EAAE4B,QACjB,MAAGC,OAAH,QAAaxB,GAAMyB,QAAO,qBAAGJ,YADvBnB,EADU,EACVA,EAAGC,EADO,EACPA,EAINH,EAAKE,GAAGC,GAAGkB,SAAU,WACxB,IACIK,EADAtB,EAAOuB,KAAKC,IAAL,MAAAD,KAAY5B,GAGvB,EAAG,CACD2B,GAAU,EACV,IAAK,IAAIR,EAAKhB,EAAGgB,EAAKd,EAAOF,EAAGgB,IAC9B,IAAK,IAAIE,EAAKjB,EAAGiB,EAAKhB,EAAOD,EAAGiB,KAC1BlB,EAAIE,EAAOR,GAAKO,EAAIC,EAAOP,GAAKG,EAAKkB,GAAIE,GAAIC,WAC/CK,GAAU,GAIZA,IACFtB,EAAOuB,KAAKC,IAAL,MAAAD,KAAI,EAAQ5B,EAAM0B,QAAO,SAAAI,GAAC,OAAIA,EAAIzB,cAEpCsB,GAET,IAAIzB,EAAOC,EAAGC,EAAGC,GAEjB,IAAK,IAAIc,EAAKhB,EAAGgB,EAAKd,EAAOF,EAAGgB,IAC9B,IAAK,IAAIE,EAAKjB,EAAGiB,EAAKhB,EAAOD,EAAGiB,IAC9BpB,EAAKkB,GAAIE,GAAIC,SAAU,EAtBH,IA2BrB,MAAGG,OAAH,QAAaxB,GAAMyB,QAAO,qBAAGJ,WAAwBS,QACxDnC,EAAEoC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAActC,OAAQA,EAAQuC,KAAMD,EAASE,SAAUC,YAAY,O,oCClFtD,aACbxC,EACAyC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWhB,KAAKC,IAAIY,EAAM,IAAO7C,EAAEiD,KAAKR,EAAIC,EAAIC,EAAIC,IAEjDM,EAAI,EAAGA,EAAI,EAAGA,GAAKF,GAChB,IAANE,GAAYJ,KACXC,GAAS/C,EAAE4B,SAAWsB,IAAOH,IAChC/C,EAAEmD,MAAMnD,EAAEoD,KAAKX,EAAIE,EAAIO,GAAIlD,EAAEoD,KAAKV,EAAIE,EAAIM","file":"component---src-pages-sketch-2019-05-03-js-51333652c4e382e8b584.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport lerpLine from \"~lib/lerpLine\";\r\n\r\nconst sketch = function(p) {\r\n  const GRID_SIZE = 30;\r\n  const SIZES = [1, 3, 8, 21];\r\n\r\n  let grid = [];\r\n  let w;\r\n  let h;\r\n\r\n  class Doodad {\r\n    constructor(x, y, size) {\r\n      this.x = x * GRID_SIZE;\r\n      this.y = y * GRID_SIZE;\r\n      this.size = size * GRID_SIZE;\r\n\r\n      this.square();\r\n    }\r\n    square() {\r\n      for (let y = this.y; y <= this.y + this.size; y++) {\r\n        lerpLine(\r\n          p,\r\n          this.x,\r\n          y,\r\n          this.x + this.size,\r\n          y,\r\n          p.noise(p.frameCount, y) / this.size\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(255);\r\n    p.stroke(0);\r\n    p.noFill();\r\n\r\n    w = p.floor(p.width / GRID_SIZE);\r\n    h = p.floor(p.height / GRID_SIZE);\r\n\r\n    for (let xx = 0; xx < w; xx++) {\r\n      grid.push([]);\r\n      for (let yy = 0; yy < h; yy++) {\r\n        grid[xx].push({\r\n          x: xx,\r\n          y: yy,\r\n          visited: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    const { x, y } = p.random(\r\n      [].concat(...grid).filter(({ visited }) => !visited)\r\n    );\r\n\r\n    if (!grid[x][y].visited) {\r\n      let size = Math.max(...SIZES);\r\n      let overlap;\r\n\r\n      do {\r\n        overlap = false;\r\n        for (let xx = x; xx < size + x; xx++) {\r\n          for (let yy = y; yy < size + y; yy++) {\r\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        }\r\n        if (overlap) {\r\n          size = Math.max(...SIZES.filter(s => s < size));\r\n        }\r\n      } while (overlap);\r\n\r\n      new Doodad(x, y, size);\r\n\r\n      for (let xx = x; xx < size + x; xx++) {\r\n        for (let yy = y; yy < size + y; yy++) {\r\n          grid[xx][yy].visited = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}