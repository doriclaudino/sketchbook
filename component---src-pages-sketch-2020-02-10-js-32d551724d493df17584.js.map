{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/10.js"],"names":["sketch","p","lineSpace","theta","amp","wait","dx","speed","lineHeight","total","showDistances","settings","bgColor","color1","color2","canvasSize","gifDuration","p5","getSettings","setup","createCanvas","min","windowWidth","windowHeight","height","TWO_PI","setTimeout","createPanel","interval","setInterval","window","QuickSettings","clearInterval","create","document","querySelector","setCollapsible","setDraggable","addBoolean","x","addRange","windowResized","addColor","addButton","saveGif","collapse","createLoop","gif","render","open","download","resizeCanvas","setRangeParameters","draw","background","noStroke","translate","width","textSize","centerOffset","bottom","top","i","cosx","cos","offsetX","map","getLinePoints","dcolor","dist","x1","y1","max","x2","y2","rmapcolor","color1Rgb","color","color2Rgb","lerpColor","fill","text","round","quad","cateto","radius","sqrt","pow","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-02-10-js-32d551724d493df17584.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport p5 from \"p5\";\r\n\r\nconst sketch = function(p = new p5()) {\r\n  let lineSpace,\r\n    theta,\r\n    amp,\r\n    wait,\r\n    dx,\r\n    speed,\r\n    lineHeight,\r\n    total,\r\n    showDistances,\r\n    settings,\r\n    bgColor,\r\n    color1,\r\n    color2,\r\n    canvasSize,\r\n    gifDuration,\r\n    loopProgress;\r\n\r\n  p.getSettings = function() {\r\n    return settings;\r\n  };\r\n\r\n  p.setup = function() {\r\n    canvasSize = 1200;\r\n    p.createCanvas(\r\n      p.min(canvasSize, p.windowWidth),\r\n      p.min(canvasSize, p.windowHeight)\r\n    );\r\n    lineSpace = 2; //space between waves\r\n    lineHeight = 4;\r\n    theta = 0.0;\r\n    amp = p.height / 4; //amplitude of the wave, and radius of circle\r\n    wait = 500.0; //wave offset\r\n    speed = 0.01; //growth wave speed\r\n    dx = (p.TWO_PI / wait) * lineSpace;\r\n    total = (amp * 2) / (lineSpace + lineHeight);\r\n    showDistances = false;\r\n    bgColor = \"#000000\";\r\n    color1 = \"#ff0000\";\r\n    color2 = \"#1a42e6\";\r\n    gifDuration = 5;\r\n    setTimeout(() => {\r\n      createPanel();\r\n    }, 1000);\r\n  };\r\n\r\n  const createPanel = () => {\r\n    let interval = setInterval(() => {\r\n      if (window && window.QuickSettings) {\r\n        clearInterval(interval);\r\n        settings = QuickSettings.create(\r\n          50,\r\n          50,\r\n          \"controls\",\r\n          document.querySelector(\"#main > main\")\r\n        )\r\n          .setCollapsible(true)\r\n          .setDraggable(true)\r\n          .addBoolean(\"show_distances\", showDistances, x => (showDistances = x))\r\n          .addRange(\"canvas_size\", 1, p.windowWidth, canvasSize, 1, x => {\r\n            canvasSize = x;\r\n            p.windowResized();\r\n          })\r\n          .addRange(\r\n            \"line_space\",\r\n            0.01,\r\n            10,\r\n            lineSpace,\r\n            0.01,\r\n            x => (lineSpace = x)\r\n          )\r\n          .addRange(\r\n            \"line_height\",\r\n            0.01,\r\n            10,\r\n            lineHeight,\r\n            0.01,\r\n            x => (lineHeight = x)\r\n          )\r\n          .addRange(\"wave_wait\", 100, 10000, wait, 1, x => {\r\n            wait = x;\r\n            dx = (p.TWO_PI / wait) * lineSpace;\r\n          })\r\n          .addRange(\"speed\", 0.01, 3, speed, 0.01, x => (speed = x))\r\n          .addColor(\"bgColor\", bgColor, x => (bgColor = x))\r\n          .addColor(\"color1\", color1, x => (color1 = x))\r\n          .addColor(\"color2\", color2, x => (color2 = x))\r\n          .addRange(\r\n            \"gif duration (s)\",\r\n            1,\r\n            180,\r\n            gifDuration,\r\n            1,\r\n            x => (gifDuration = x)\r\n          )\r\n          .addButton(\"save_gif\", saveGif);\r\n      }\r\n      settings.collapse();\r\n    }, 20);\r\n  };\r\n\r\n  const saveGif = () => {\r\n    let loop = p.createLoop(gifDuration, {\r\n      gif: { render: false, open: false, download: true },\r\n    });\r\n  };\r\n\r\n  p.windowResized = function() {\r\n    p.resizeCanvas(\r\n      p.min(canvasSize, p.windowWidth),\r\n      p.min(canvasSize, p.windowHeight)\r\n    );\r\n    settings.setRangeParameters(\"canvas_size\", 1, p.windowWidth, 1);\r\n  };\r\n\r\n  p.draw = function() {\r\n    amp = p.height / 4;\r\n    total = (amp * 2) / (lineSpace + lineHeight);\r\n    p.background(bgColor);\r\n    p.noStroke();\r\n    p.translate(p.width / 2, p.height / 2);\r\n    p.textSize(16);\r\n\r\n    theta += speed;\r\n    let x = theta;\r\n    let init = -amp; //init from top\r\n    let centerOffset = init;\r\n    let bottom = {};\r\n    let top = {};\r\n\r\n    for (let i = 0; i < total; i++) {\r\n      //here control the wave length in/out\r\n      let cosx = p.cos(x);\r\n      let offsetX = p.map(cosx, -1, 1, -amp * 2, 0);\r\n\r\n      //move or lines down/up\r\n      centerOffset = centerOffset + lineSpace;\r\n\r\n      //bottom points if we start from bottom\r\n      bottom = getLinePoints(amp, centerOffset);\r\n\r\n      //move to the next line or top points\r\n      centerOffset = centerOffset + lineHeight;\r\n\r\n      //top points if we start from bottom\r\n      top = getLinePoints(amp, centerOffset);\r\n\r\n      //get max dist\r\n      let dcolor = p.dist(\r\n        bottom.x1,\r\n        bottom.y1,\r\n        p.max(bottom.x1, bottom.x2 + offsetX),\r\n        bottom.y2\r\n      );\r\n      let rmapcolor = p.map(dcolor, 0, amp * 2, 0, 1);\r\n      let color1Rgb = p.color(color1);\r\n      let color2Rgb = p.color(color2);\r\n      let lerpColor = p.lerpColor(color1Rgb, color2Rgb, rmapcolor);\r\n      //more red, little green, more blue\r\n      p.fill(lerpColor);\r\n\r\n      //every second\r\n      if (showDistances && i % 2) p.text(p.round(dcolor), top.x2 + 30, top.y2);\r\n\r\n      p.quad(\r\n        bottom.x1,\r\n        bottom.y1,\r\n        top.x1,\r\n        top.y1,\r\n        top.x2,\r\n        top.y2,\r\n        p.max(bottom.x1, bottom.x2 + offsetX),\r\n        bottom.y2\r\n      );\r\n\r\n      //update delay\r\n      x += dx;\r\n    }\r\n  };\r\n\r\n  const getLinePoints = (amp, centerOffset) => ({\r\n    x1: -cateto(amp, centerOffset),\r\n    y1: -centerOffset,\r\n    x2: cateto(amp, centerOffset),\r\n    y2: -centerOffset,\r\n  });\r\n\r\n  //base on radius and cathetus height, we can find other cathetus, using triangle\r\n  const cateto = (radius, height) =>\r\n    p.sqrt(p.pow(radius, 2) - p.pow(height, 2));\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}