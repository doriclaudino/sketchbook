{"version":3,"sources":["webpack:///./src/components/sketch.js","webpack:///./src/components/sketch-title.js","webpack:///./src/components/sketch-controls.js","webpack:///./src/components/sketch-layout.js","webpack:///./src/pages/sketchbook/2020/02/08.js"],"names":["SketchWrapper","Sketch","props","sketchRef","React","createRef","canvas","componentDidMount","this","p5","sketch","current","componentDidUpdate","remove","componentWillUnmount","render","ref","Component","path","dateTime","sketchTitle","SketchControls","children","other","id","query","description","images","sketches","image","edges","find","edge","node","relativePath","includes","replace","sketchIndex","findIndex","next","previous","title","ogImage","childImageSharp","og","src","twitterImage","twitter","css","to","label","icon","p","rotationSpeedSlider","rotationSpeedP","colorPicker1","colorPicker2","colorPicker3","speed1","speed2","RENDER","getURLParams","colors","brown","mustard","niceRed","rotationSpeedSliderPanel","rotationSpeedPPanel","initialRotations","starRotation","panelRotation","size","color1","color2","color3","toFrameRate","value","decimals","getFrameRate","toFixed","getSpeedStats","toSeconds","diamond","angle","base","color","rotation","push","noStroke","fill","rotate","quad","tangHeight","pop","panel","flip","altura","height","rad","radians","Math","tan","setup","pixelDensity","frameRate","background","createCanvas","angleMode","DEGREES","createColorPicker","parent","createSlider","createP","draw","elt","innerText","translate","width","purple","rectMode","CENTER","rect","backgroundSquare","orange","leftPanel","green","rightPanel","location","pathname"],"mappings":"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","file":"component---src-pages-sketchbook-2020-02-08-js-a3098a73880cf5069315.js","sourcesContent":["import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst SketchWrapper = styled.div`\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  height: 0;\n  padding: 0 0 127.27272727%;\n\n  & > canvas {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    width: 100% !important;\n    height: 100% !important;\n  }\n`;\n\nclass Sketch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.sketchRef = React.createRef();\n    this.canvas = null;\n  }\n  componentDidMount() {\n    this.canvas = new p5(this.props.sketch, this.sketchRef.current);\n  }\n  componentDidUpdate() {\n    this.canvas.remove();\n    this.canvas = new p5(this.props.sketch, this.sketchRef.current);\n  }\n  componentWillUnmount() {\n    this.canvas.remove();\n  }\n  render() {\n    return <SketchWrapper ref={this.sketchRef} />;\n  }\n}\n\nexport default Sketch;\n","import React from \"react\";\nimport sketchTitle from \"~util/sketch-title\";\n\nexport default ({ path }) => (\n  <time dateTime={sketchTitle(path)}>{sketchTitle(path)}</time>\n);\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst SketchControls = styled.div`\n  min-height: 100px;\n  min-width: 100px;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px;\n`;\n\nexport default ({ children, ...other }) => (\n  <SketchControls id=\"sketch-controls\" {...other}>\n    {\" \"}\n    {children}{\" \"}\n  </SketchControls>\n);\n","import React from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport { css } from \"@emotion/core\";\nimport Layout from \"~components/layout\";\nimport SEO from \"~components/seo\";\nimport Header from \"~components/header\";\nimport Icon from \"~components/icon\";\nimport Sketch from \"~components/sketch\";\nimport SketchTitle from \"~components/sketch-title\";\nimport SketchControls from \"~components/sketch-controls\";\nimport sketchTitle from \"~util/sketch-title\";\n\nexport default ({ sketch, path, description }) => (\n  <StaticQuery\n    query={query}\n    render={({ images, sketches }) => {\n      const image = images.edges.find(edge =>\n        edge.node.relativePath.includes(\n          path.replace(\"/sketchbook/\", \"\").replace(/\\/$/, \"\")\n        )\n      );\n      const sketchIndex = sketches.edges.findIndex(\n        edge => edge.node.path === path\n      );\n      const { next, previous } = sketches.edges[sketchIndex] || {};\n\n      return (\n        <Layout>\n          <SEO\n            title={sketchTitle(path)}\n            ogImage={image ? image.node.childImageSharp.og.src : null}\n            twitterImage={image ? image.node.childImageSharp.twitter.src : null}\n          />\n          <Header>\n            <h1\n              css={css`\n                grid-area: c;\n                text-align: center;\n                white-space: nowrap;\n              `}\n            >\n              <SketchTitle path={path} />{\" \"}\n            </h1>{\" \"}\n            <Icon\n              to={`/#sketch-${sketchTitle(path)}`}\n              label=\"Back to Index\"\n              icon=\"up\"\n            />\n            <Icon to={next && next.path} icon=\"left\" />\n            <Icon to={previous && previous.path} icon=\"right\" />\n          </Header>{\" \"}\n          <main>\n            <Sketch sketch={sketch} /> <SketchControls />\n            {description && (\n              <p\n                css={css`\n                  padding: var(--spacing);\n                `}\n              >\n                {description}{\" \"}\n              </p>\n            )}{\" \"}\n          </main>{\" \"}\n        </Layout>\n      );\n    }}\n  />\n);\n\nconst query = graphql`\n  query {\n    sketches: allSitePage(\n      filter: { path: { regex: \"/sketchbook/\" } }\n      sort: { fields: path, order: DESC }\n    ) {\n      edges {\n        node {\n          path\n        }\n        next {\n          path\n        }\n        previous {\n          path\n        }\n      }\n    }\n    images: allFile(\n      filter: { relativePath: { regex: \"/[0-9]{4}/\" }, ext: { nin: [\".js\"] } }\n      sort: { fields: relativePath, order: DESC }\n    ) {\n      edges {\n        node {\n          relativePath\n          extension\n          childImageSharp {\n            twitter: resize(width: 1024) {\n              src\n            }\n            og: resize(width: 1200, height: 630, cropFocus: CENTER) {\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\n// import \"p5.createloop\";\n\nconst sketch = function(p) {\n  const RENDER = p.getURLParams().render;\n  // const DURATION = 20;\n  const RATE = 30;\n\n  const colors = {\n    brown: \"#341C09\",\n    mustard: \"#F3A914\",\n    niceRed: \"#E34C43\",\n  };\n  let rotationSpeedSlider;\n  let rotationSpeedP;\n  let rotationSpeedSliderPanel = 0;\n  let rotationSpeedPPanel = 0;\n  let initialRotations = [0, 60, 120, 180, 240, 300];\n  let starRotation = 0;\n  let panelRotation = 0;\n  let size = 0;\n  let color1 = colors.mustard;\n  let color2 = colors.brown;\n  let color3 = colors.niceRed;\n  let colorPicker1;\n  let colorPicker2;\n  let colorPicker3;\n  let speed1;\n  let speed2;\n\n  const toSeconds = (value, decimals) =>\n    decimals\n      ? (toFrameRate(value) * 60).toFixed(decimals)\n      : toFrameRate(value) * 60;\n  const toFrameRate = (value, decimals) =>\n    decimals\n      ? (value / p.getFrameRate()).toFixed(decimals)\n      : value / p.getFrameRate();\n  const getSpeedStats = value =>\n    `${value}speed ${toFrameRate(value, 2)}°/frame  ${toSeconds(value, 2)}°/s`;\n\n  const backgroundSquare = (size, rotation, color = colors.purple) => {\n    p.push();\n    p.rectMode(p.CENTER);\n    p.rotate(rotation);\n    p.fill(color);\n    p.noStroke();\n    p.rect(0, 0, size, size);\n    p.pop();\n  };\n\n  const diamond = (angle, base, color, rotation) => {\n    p.push();\n    p.noStroke();\n    p.fill(color);\n    p.rotate(rotation);\n    p.quad(\n      0,\n      0,\n      0,\n      base * 2,\n      tangHeight(base, angle),\n      base * 3,\n      tangHeight(base, angle),\n      base\n    );\n    p.pop();\n  };\n\n  const rightPanel = (size, rotation = 0, color = colors.green) => {\n    panel(size, color, rotation, true);\n  };\n\n  const leftPanel = (size, rotation = 0, color = colors.orange) => {\n    panel(size, color, rotation);\n  };\n\n  const panel = (size, color, rotation, flip = false) => {\n    let altura = tangHeight(size / 2);\n    p.push();\n    p.rotate(rotation);\n    p.fill(color);\n    p.noStroke();\n    p.quad(\n      0,\n      0,\n\n      0,\n      size / 2,\n\n      flip ? size / 2 : size / -2,\n      size / 2,\n\n      flip ? size / 2 : size / -2,\n      -altura\n    );\n    p.pop();\n  };\n\n  const tangHeight = (base = height / 2, angle = 30) => {\n    let rad = p.radians(angle);\n    let tan = Math.tan(rad);\n    let altura = tan * base;\n    return altura;\n  };\n\n  p.setup = function() {\n    p.pixelDensity(RENDER ? 2 : 1);\n    p.frameRate(RATE);\n    p.background(255);\n    p.createCanvas(720, 720);\n    p.angleMode(p.DEGREES);\n\n    colorPicker2 = p.createColorPicker(color2);\n    colorPicker1 = p.createColorPicker(color1);\n    colorPicker3 = p.createColorPicker(color3);\n    colorPicker1.parent(\"sketch-controls\");\n    colorPicker2.parent(\"sketch-controls\");\n    colorPicker3.parent(\"sketch-controls\");\n\n    rotationSpeedSlider = p.createSlider(-1, 1, 0.5, 0.0001);\n    rotationSpeedP = p.createP(`${rotationSpeedSlider.value()} rotation speed`);\n    rotationSpeedSlider.parent(\"sketch-controls\");\n    rotationSpeedP.parent(\"sketch-controls\");\n\n    rotationSpeedSliderPanel = p.createSlider(-1, 1, 0, 0.0001);\n    rotationSpeedPPanel = p.createP(\n      `${rotationSpeedSliderPanel.value()} rotation speed`\n    );\n    rotationSpeedSliderPanel.parent(\"sketch-controls\");\n    rotationSpeedPPanel.parent(\"sketch-controls\");\n\n    // p.createLoop(DURATION, {\n    //  gif: RENDER ? { render: false, open: true } : false,\n    //  noiseRadius: 0.1,\n    // });\n  };\n\n  p.draw = function() {\n    /** update colors */\n    color1 = colorPicker1.value();\n    color2 = colorPicker2.value();\n    color3 = colorPicker3.value();\n\n    /** update speed values */\n    speed1 = rotationSpeedSlider.value();\n    speed2 = rotationSpeedSliderPanel.value();\n\n    /** resize panels on background twices bigger than canvas */\n    size = p.height * 2;\n\n    /** update texts */\n    rotationSpeedP.elt.innerText = getSpeedStats(speed1);\n    rotationSpeedPPanel.elt.innerText = getSpeedStats(speed2);\n\n    /** move everything on center of our canva */\n    p.translate(p.width / 2, p.height / 2);\n\n    /** create a square to keep rotate kinda background */\n    backgroundSquare(size, panelRotation, color1);\n\n    /** add our left/right panels*/\n    leftPanel(size, panelRotation, color3);\n    rightPanel(size, panelRotation, color2);\n\n    /** diamonds on center */\n    diamond(60, 60, color3, initialRotations[0] + starRotation);\n    diamond(60, 60, color2, initialRotations[1] + starRotation);\n    diamond(60, 60, color1, initialRotations[2] + starRotation);\n    diamond(60, 60, color3, initialRotations[3] + starRotation);\n    diamond(60, 60, color2, initialRotations[4] + starRotation);\n    diamond(60, 60, color1, initialRotations[5] + starRotation);\n\n    /** update speed every frame */\n    starRotation += speed1;\n    panelRotation += speed2;\n  };\n};\n\nexport default ({ location }) => (\n  <SketchLayout\n    sketch={sketch}\n    path={location.pathname}\n    description=\"it create illusions of squares when the diamonds cross the background with the same color\"\n  />\n);\n"],"sourceRoot":""}