{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/05.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","vertices","Triangle","this","lines","draw","x1","y1","x2","y2","strokeWeight","stroke","fill","triangle","width","height","push","length","slice","drawTrails","noFill","forEach","l","i","map","TRAILS","Vertex","angle","TWO_PI","distance","speed","set","vertex","polarToCartesian","update","setup","createCanvas","Array","from","colorMode","HSL","blendMode","HARD_LIGHT","strokeJoin","ROUND","background","reached","unreached","splice","record","dist","ri","ui","j","a","b","d","x","y","v","location","path","pathname","description","polarToCartesianX","center","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-06-05-js-94ffea97ba81f3a5e566.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const HUE = p.random(20, 80);\r\n  const TRAILS = 20;\r\n\r\n  let vertices = [];\r\n\r\n  class Triangle {\r\n    constructor() {\r\n      this.lines = [];\r\n    }\r\n\r\n    draw(x1, y1, x2, y2) {\r\n      p.strokeWeight(10);\r\n      p.stroke(0);\r\n      p.fill(HUE, 100, 100, 80);\r\n      p.triangle(x1, y1, x2, y2, p.width / 2, p.height / 2);\r\n\r\n      this.lines.push([x1, y1, x2, y2]);\r\n      if (this.lines.length > TRAILS) {\r\n        this.lines = this.lines.slice(1, TRAILS);\r\n      }\r\n    }\r\n\r\n    drawTrails() {\r\n      p.noFill();\r\n      p.strokeWeight(1);\r\n      this.lines.forEach((l, i) => {\r\n        p.stroke(\r\n          100 - HUE,\r\n          p.map(i, 0, TRAILS - 1, 0, 100),\r\n          p.map(i, 0, TRAILS - 1, 0, 100),\r\n          p.map(i, 0, TRAILS - 1, 0, 100)\r\n        );\r\n        p.triangle(...l, p.width / 2, p.height / 2);\r\n      });\r\n    }\r\n  }\r\n\r\n  class Vertex {\r\n    constructor() {\r\n      this.angle = p.random(p.TWO_PI);\r\n      this.distance = p.random(p.height / 2 - 10);\r\n      this.speed = p.random([-1, 1]) * p.random(0.001, 0.01);\r\n      this.triangle = new Triangle();\r\n      this.set();\r\n    }\r\n    set() {\r\n      this.vertex = polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        this.angle,\r\n        this.distance\r\n      );\r\n    }\r\n    update() {\r\n      this.angle += this.speed;\r\n      this.set();\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    vertices = Array.from(Array(10), () => new Vertex());\r\n    p.colorMode(p.HSL, 100);\r\n    p.blendMode(p.HARD_LIGHT);\r\n    p.strokeJoin(p.ROUND);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n\r\n    let reached = [];\r\n    let unreached = [...vertices];\r\n\r\n    reached.push(unreached[0]);\r\n    unreached.splice(0, 1);\r\n\r\n    while (unreached.length > 0) {\r\n      let record = p.dist(0, 0, p.width, p.height);\r\n      let ri;\r\n      let ui;\r\n      for (let i = 0; i < reached.length; i++) {\r\n        for (let j = 0; j < unreached.length; j++) {\r\n          const a = reached[i].vertex;\r\n          const b = unreached[j].vertex;\r\n          const d = p.dist(a.x, a.y, b.x, b.y);\r\n          if (d < record) {\r\n            record = d;\r\n            ri = i;\r\n            ui = j;\r\n          }\r\n        }\r\n      }\r\n      vertices[ui].triangle.draw(\r\n        reached[ri].vertex.x,\r\n        reached[ri].vertex.y,\r\n        unreached[ui].vertex.x,\r\n        unreached[ui].vertex.y\r\n      );\r\n\r\n      reached.push(unreached[ui]);\r\n      unreached.splice(ui, 1);\r\n    }\r\n\r\n    vertices.forEach(v => {\r\n      v.triangle.drawTrails();\r\n      v.update();\r\n    });\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}