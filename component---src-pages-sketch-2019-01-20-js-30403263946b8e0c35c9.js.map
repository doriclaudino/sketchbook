{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lineIntersection.js","webpack:///./src/pages/sketch/2019/01/20.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","lineIntersection","x1","y1","x2","y2","x3","y3","x4","y4","uA","uB","sketch","p","speeds","drawing","lastPoint","guides","viewGuides","setup","createCanvas","createGraphics","width","height","background","stroke","strokeWeight","noFill","random","push","r","HALF_PI","speed","TWO_PI","direction","PI","Object","assign","draw","image","alpha","X0","X1","Y1","X2","Y2","Y3","color","line","i","length","frameCount","l","mousePressed","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-01-20-js-30403263946b8e0c35c9.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","export default function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const uA =\n    ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n  const uB =\n    ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return { x: x1 + uA * (x2 - x1), y: y1 + uA * (y2 - y1) };\n  }\n  return { x: null, y: null };\n}\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport { polarToCartesianX } from \"~lib/polarToCartesian\";\r\nimport lineIntersection from \"~lib/lineIntersection\";\r\n\r\nconst sketch = function(p) {\r\n  let speeds;\r\n  let guides = [];\r\n  let viewGuides = false;\r\n  let drawing;\r\n  let lastPoint;\r\n\r\n  function guideColor(alpha) {\r\n    return p.color(255, 0, 0, alpha);\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    drawing = p.createGraphics(p.width, p.height);\r\n    drawing.background(255);\r\n    drawing.stroke(0, 0, 0, 255 / 4);\r\n    drawing.strokeWeight(0.5);\r\n    drawing.noFill();\r\n    speeds = [p.random(0.2, 0.3), p.random(0.2, 0.3), p.random(0.2, 0.3)];\r\n    guides.push({\r\n      r: p.HALF_PI,\r\n      speed: speeds[0] / p.TWO_PI,\r\n      direction: p.random([-1, 1]),\r\n    });\r\n    guides.push({\r\n      r: 0,\r\n      speed: speeds[1] / p.TWO_PI,\r\n      direction: -1,\r\n    });\r\n    guides.push({\r\n      r: p.PI * 1.5,\r\n      speed: speeds[2] / p.TWO_PI,\r\n      direction: p.random([-1, 1]),\r\n    });\r\n    guides.push(Object.assign({}, guides[1]));\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(255);\r\n    p.image(drawing, 0, 0);\r\n    const X0 = polarToCartesianX(p.width / 2, guides[0].r, p.width / 2 - 100);\r\n    const Y0 = 0;\r\n    const X1 = p.width;\r\n    const Y1 = p.height / 2 + p.sin(guides[1].r) * (p.height / 2 - 100);\r\n    const X2 = polarToCartesianX(p.width / 2, guides[2].r, p.width / 2 - 100);\r\n    const Y2 = p.height;\r\n    const X3 = 0;\r\n    const Y3 = p.height / 2 + p.sin(guides[3].r) * (p.height / 2 - 100);\r\n    if (viewGuides) {\r\n      p.stroke(guideColor(64));\r\n      p.strokeWeight(1);\r\n      p.line(X0, Y0, X2, Y2);\r\n      p.line(X1, Y1, X3, Y3);\r\n    }\r\n    for (let i = 0; i < guides.length; i++) {\r\n      guides[i].r += guides[i].speed * guides[i].direction;\r\n    }\r\n    const { x, y } = lineIntersection(X0, Y0, X2, Y2, X1, Y1, X3, Y3);\r\n    if (x && y && p.frameCount > 1) {\r\n      for (let l = 0; l < 1; l += 0.01) {\r\n        drawing.line(x, y, lastPoint.x, lastPoint.y);\r\n      }\r\n    }\r\n    lastPoint =\r\n      x && y\r\n        ? {\r\n            x,\r\n            y,\r\n          }\r\n        : lastPoint;\r\n  };\r\n\r\n  p.mousePressed = function() {\r\n    viewGuides = !viewGuides;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Reload page for a different variation. Click or tap sketch to toggle guides.\"\r\n  />\r\n);\r\n"],"sourceRoot":""}