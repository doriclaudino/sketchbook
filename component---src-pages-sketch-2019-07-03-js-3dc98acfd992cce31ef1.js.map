{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/07/03.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","count","margin","COLORS","setup","createCanvas","width","strokeWeight","draw","blendMode","BLEND","background","fill","noStroke","circle","height","noFill","MULTIPLY","a","map","frameCount","TWO_PI","d","centerPoints","i","r","lerp","forEach","cp","j","stroke","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,qGCX3BE,EAAS,SAASC,GACtB,IACIC,EACAC,EAFEC,EAAS,CAAC,MAAO,QAAS,QAIhCH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBJ,EAAQD,EAAEM,MAAQ,GAClBJ,EAASF,EAAEM,OAAS,EAAI,GACxBN,EAAEO,aAAa,IAGjBP,EAAEQ,KAAO,WACPR,EAAES,UAAUT,EAAEU,OACdV,EAAEW,WAAW,GACbX,EAAEY,KAAK,KACPZ,EAAEa,WACFb,EAAEc,OAAOd,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGf,EAAEM,MAAQJ,EAAS,GAEvDF,EAAEgB,SACFhB,EAAES,UAAUT,EAAEiB,UAUd,IARA,IAAMC,EAAIlB,EAAEmB,IAAInB,EAAEoB,WAAa,KAAM,EAAG,KAAM,EAAGpB,EAAEqB,QAC7CC,EAAItB,EAAEmB,IAAInB,EAAEX,IAAQ,EAAJ6B,IAAS,EAAG,EAAG,EAAGlB,EAAEM,MAAQ,EAAIJ,GAElDqB,EAAe,CACjBzB,YAAiBE,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAGI,GAC/CxB,YAAiBE,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,GACpExB,YAAiBE,EAAEM,MAAQ,EAAGN,EAAEe,OAAS,EAAGG,EAAIlB,EAAEqB,QAAU,EAAI,GAAIC,IAhBpD,WAkBTE,GACP,IAAMC,EAAIzB,EAAE0B,KAAK,EAAG1B,EAAEM,MAAQJ,EAAQsB,GAEtCD,EAAaI,SAAQ,SAACC,EAAIC,GACxB7B,EAAE8B,OAAO3B,EAAO0B,IAChB,IAAMjC,EAAII,EAAE0B,KAAKE,EAAGhC,EAAGI,EAAEM,MAAQ,EAAGkB,GAC9B3B,EAAIG,EAAE0B,KAAKE,EAAG/B,EAAGG,EAAEe,OAAS,EAAGS,GACrCxB,EAAEc,OAAOlB,EAAGC,EAAG4B,OAPVD,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAIvB,EAAQ,EAA/BuB,KAaE,0BAAGO,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-07-03-js-3dc98acfd992cce31ef1.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const COLORS = [\"red\", \"green\", \"blue\"];\r\n  let count;\r\n  let margin;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    count = p.width / 20;\r\n    margin = p.width * (1 / 6);\r\n    p.strokeWeight(2);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.blendMode(p.BLEND);\r\n    p.background(0);\r\n    p.fill(255);\r\n    p.noStroke();\r\n    p.circle(p.width / 2, p.height / 2, p.width - margin / 2);\r\n\r\n    p.noFill();\r\n    p.blendMode(p.MULTIPLY);\r\n\r\n    const a = p.map(p.frameCount % 1200, 0, 1200, 0, p.TWO_PI);\r\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin);\r\n\r\n    let centerPoints = [\r\n      polarToCartesian(p.width / 2, p.height / 2, a, d),\r\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (1 / 3), d),\r\n      polarToCartesian(p.width / 2, p.height / 2, a + p.TWO_PI * (2 / 3), d),\r\n    ];\r\n    for (let i = 0; i < 1; i += 1 / count) {\r\n      const r = p.lerp(6, p.width - margin, i);\r\n\r\n      centerPoints.forEach((cp, j) => {\r\n        p.stroke(COLORS[j]);\r\n        const x = p.lerp(cp.x, p.width / 2, i);\r\n        const y = p.lerp(cp.y, p.height / 2, i);\r\n        p.circle(x, y, r);\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}