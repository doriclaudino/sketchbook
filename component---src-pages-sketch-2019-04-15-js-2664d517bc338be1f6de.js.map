{"version":3,"sources":["webpack:///./src/lib/addNoise.js","webpack:///./src/pages/sketch/2019/04/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["addNoise","p","intensity","PTS","width","height","push","i","fill","noStroke","ellipse","randomGaussian","pixelDensity","pop","sketch","w","h","SIZES","gridSize","iterations","grid","Doodad","x","y","size","this","drawFunc","random","drawBackslash","drawSlash","line","setup","createCanvas","colorMode","HSB","hue","background","stroke","noFill","draw","length","strokeWeight","floor","xx","yy","visited","concat","filter","overlap","Math","max","s","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"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","file":"component---src-pages-sketch-2019-04-15-js-2664d517bc338be1f6de.js","sourcesContent":["const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\nimport addNoise from \"~lib/addNoise\";\r\n\r\nconst sketch = function(p) {\r\n  const SIZES = [1, 2, 3, 5, 8];\r\n\r\n  let gridSize = 60;\r\n  let iterations = 3;\r\n  let grid = [];\r\n  let w;\r\n  let h;\r\n\r\n  class Doodad {\r\n    constructor(x, y, size) {\r\n      this.x = x * gridSize;\r\n      this.y = y * gridSize;\r\n      this.size = size * gridSize;\r\n      // this.drawFunc = p.random([\r\n      //   this.drawSlash,\r\n      //   this.drawSlash,\r\n      //   this.drawBackslash,\r\n      // ]);\r\n      this.drawFunc = p.random() < 0.1 ? this.drawBackslash : this.drawSlash;\r\n      this.drawFunc();\r\n    }\r\n    drawSlash() {\r\n      p.line(this.x, this.y + this.size, this.x + this.size, this.y);\r\n    }\r\n    drawBackslash() {\r\n      p.line(this.x, this.y, this.x + this.size, this.y + this.size);\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, 100);\r\n\r\n    const hue = p.random(100);\r\n    p.background(100 - hue, 50, 75);\r\n    p.stroke(hue, 25, 25);\r\n    p.noFill();\r\n  };\r\n\r\n  p.draw = function() {\r\n    if (grid.length == 0) {\r\n      p.strokeWeight(gridSize / 3);\r\n\r\n      w = p.floor(p.width / gridSize);\r\n      h = p.floor(p.height / gridSize);\r\n\r\n      for (let xx = 0; xx < w; xx++) {\r\n        grid.push([]);\r\n        for (let yy = 0; yy < h; yy++) {\r\n          grid[xx].push({\r\n            x: xx,\r\n            y: yy,\r\n            visited: false,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const { x, y } = p.random(\r\n      [].concat(...grid).filter(({ visited }) => !visited)\r\n    );\r\n\r\n    if (!grid[x][y].visited) {\r\n      let size = Math.max(...SIZES);\r\n      let overlap;\r\n\r\n      do {\r\n        overlap = false;\r\n        for (let xx = x; xx < size + x; xx++) {\r\n          for (let yy = y; yy < size + y; yy++) {\r\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        }\r\n        if (overlap) {\r\n          size = Math.max(...SIZES.filter(s => s < size));\r\n        }\r\n      } while (overlap);\r\n\r\n      new Doodad(x, y, size);\r\n\r\n      for (let xx = x; xx < size + x; xx++) {\r\n        for (let yy = y; yy < size + y; yy++) {\r\n          grid[xx][yy].visited = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\r\n      iterations--;\r\n      if (iterations > 0) {\r\n        gridSize /= 2;\r\n        grid = [];\r\n      } else {\r\n        p.noLoop();\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}