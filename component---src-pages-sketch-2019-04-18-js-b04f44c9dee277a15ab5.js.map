{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/18.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","hue","t","setup","createCanvas","background","colorMode","HSB","noFill","draw","translate","width","height","map","sin","frameCount","stroke","beginShape","i","HALF_PI","curveVertex","polarToCartesian","noise","endShape","PI","TWO_PI","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IAAIC,EAAM,EACNC,EAAI,EAERF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,IAAK,KACpBJ,EAAEK,WAAW,GACbL,EAAEM,UAAUN,EAAEO,IAAK,KACnBP,EAAEQ,UAGJR,EAAES,KAAO,WACPT,EAAEU,UAAUV,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,GACpCX,EAAMD,EAAEa,IAAIb,EAAEc,IAAId,EAAEe,WAAa,MAAO,EAAG,EAAG,EAAG,KACjDf,EAAEgB,OAAOf,EAAK,GAAI,IAAK,IACvBD,EAAEiB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,QAASD,GAAK,IAClClB,EAAEoB,YAAF,MAAApB,EAAC,EACIqB,YACD,EACA,EACAH,EAAIhB,EACJF,EAAEa,IAAIb,EAAEsB,MAAMJ,EAAGhB,GAAI,EAAG,EAAG,EAAGF,EAAEW,QAChC,KAINX,EAAEuB,WACFvB,EAAEiB,aACF,IAAK,IAAIC,EAAI,EAAGA,EAAIlB,EAAEmB,QAASD,GAAK,IAClClB,EAAEoB,YAAF,MAAApB,EAAC,EACIqB,YACD,EACA,EACAH,EAAIhB,EAAIF,EAAEwB,GACVxB,EAAEa,IAAIb,EAAEsB,MAAMJ,EAAGhB,GAAI,EAAG,EAAG,EAAGF,EAAEW,MAAQ,IACxC,KAINX,EAAEuB,YACFrB,GAAK,MACDF,EAAEyB,QAAUzB,EAAE0B,WAIP,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc5B,OAAQA,EAAQ6B,KAAMD,EAASE,SAAUC,YAAY,O,kCCnDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKrB,IAAImB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKC,IAAIH,GAASQ,EAChCI,EAAIL,EAAUL,KAAKrB,IAAImB,GAASS,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBxB,IAzBU,SACvBkB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASN,EAAOC,GACtCW,EAAIR,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-18-js-b04f44c9dee277a15ab5.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  let hue = 0;\r\n  let t = 0;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(0);\r\n    p.colorMode(p.HSB, 100);\r\n    p.noFill();\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.translate(p.width / 2, p.height / 2);\r\n    hue = p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100);\r\n    p.stroke(hue, 50, 100, 10);\r\n    p.beginShape();\r\n    for (let i = 0; i < p.HALF_PI; i += 0.01) {\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          0,\r\n          0,\r\n          i + t,\r\n          p.map(p.noise(i, t), 0, 1, 0, p.width),\r\n          true\r\n        )\r\n      );\r\n    }\r\n    p.endShape();\r\n    p.beginShape();\r\n    for (let i = 0; i < p.HALF_PI; i += 0.01) {\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          0,\r\n          0,\r\n          i + t + p.PI,\r\n          p.map(p.noise(i, t), 0, 1, 0, p.width / 2),\r\n          true\r\n        )\r\n      );\r\n    }\r\n    p.endShape();\r\n    t += 0.001;\r\n    t > p.TWO_PI && p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}