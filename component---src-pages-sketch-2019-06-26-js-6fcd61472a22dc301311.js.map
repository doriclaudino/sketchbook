{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/26.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","angle","alpha","setup","createCanvas","colorMode","HSB","background","noFill","blendMode","SCREEN","draw","NOISE","noise","frameCount","stroke","map","tan","i","push","translate","polarToCartesian","width","height","TWO_PI","circle","pop","noLoop","min","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IACMC,EAAMD,EAAEE,OAAO,IAEjBC,EAAQ,EACRC,EAAQ,EAEZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,WAAWR,EAAK,GAAI,GACtBD,EAAEU,SACFV,EAAEW,UAAUX,EAAEY,SAGhBZ,EAAEa,KAAO,WACP,IAAMC,EAAQd,EAAEe,MAAMf,EAAEgB,WAAa,IAAKb,GAC1CH,EAAEiB,OAAOjB,EAAEkB,IAAIlB,EAAEmB,IAAIhB,IAAS,EAAG,EAAGF,EAAKA,EAAM,IAAK,GAAI,GAAIG,GAE5D,IAAK,IAAIgB,EAAI,EAAGA,EAlBH,EAkBeA,IAC1BpB,EAAEqB,OACFrB,EAAEsB,UAAF,MAAAtB,EAAC,EACIuB,YACDvB,EAAEwB,MAAQ,EACVxB,EAAEyB,OAAS,EACXtB,EAASiB,EAAIpB,EAAE0B,OAxBR,EAyBN1B,EAAEyB,OAAS,EAAKX,GACjB,KAGJd,EAAE2B,OAAO,EAAG,EAAG3B,EAAEkB,IAAIJ,EAAO,EAAG,EAAG,IAAK,IACvCd,EAAE4B,OAGJzB,GAAS,MAEc,EAAXH,EAAE0B,QACZtB,GAAS,KACD,GAAKJ,EAAE6B,SAEfzB,EAAQJ,EAAE8B,IAAI1B,EAAQ,IAAM,KAKnB,0BAAG2B,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,SAAUC,YAAY,O,kCClDrE,0GAAMC,EAAoB,SAACC,EAAQjC,EAAOkC,GACxC,OAAOD,EAASE,KAAKC,IAAIpC,GAASkC,GAE9BG,EAAoB,SAACJ,EAAQjC,EAAOkC,GACxC,OAAOD,EAASE,KAAKG,IAAItC,GAASkC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAzC,EACA0C,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIpC,GAAS0C,EAChCI,EAAIL,EAAUN,KAAKG,IAAItC,GAAS2C,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB1B,IAzBU,SACvBoB,EACAC,EACAzC,EACAkC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASxC,EAAOkC,GACtCY,EAAIT,EAAkBI,EAASzC,EAAOkC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-26-js-6fcd61472a22dc301311.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const LEAVES = 4;\r\n  const HUE = p.random(90);\r\n\r\n  let angle = 0;\r\n  let alpha = 0;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, 100);\r\n    p.background(HUE, 80, 5);\r\n    p.noFill();\r\n    p.blendMode(p.SCREEN);\r\n  };\r\n\r\n  p.draw = function() {\r\n    const NOISE = p.noise(p.frameCount / 400, angle);\r\n    p.stroke(p.map(p.tan(angle), -1, 1, HUE, HUE + 10), 80, 75, alpha);\r\n\r\n    for (let i = 0; i < LEAVES; i++) {\r\n      p.push();\r\n      p.translate(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          angle + (i * p.TWO_PI) / LEAVES,\r\n          (p.height / 2) * NOISE,\r\n          true\r\n        )\r\n      );\r\n      p.circle(0, 0, p.map(NOISE, 0, 1, 200, 0));\r\n      p.pop();\r\n    }\r\n\r\n    angle += 0.005;\r\n\r\n    if (angle > p.TWO_PI * 3) {\r\n      alpha -= 0.01;\r\n      alpha < 0 && p.noLoop();\r\n    } else {\r\n      alpha = p.min(alpha + 0.01, 5);\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}