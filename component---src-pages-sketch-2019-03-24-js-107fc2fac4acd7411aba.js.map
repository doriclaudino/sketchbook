{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/03/24.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","SPEED","TWO_PI","innerSpeed","hue","random","setup","createCanvas","colorMode","HSB","background","noStroke","strokeWeight","width","draw","fill","lerpColor","color","map","thisFocalPoint","height","HALF_PI","thisPoint","noise","frameCount","beginShape","vertex","endShape","CLOSE","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,ggBCTjC,IAAME,EAAS,SAASC,GACtB,IAGIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAAaC,KAAiBP,EAAEQ,OAChCC,EAAa,IAAaT,EAAEQ,OAC5BE,EAAMV,EAAEW,OAAO,KAEnBX,EAAEY,MAAQ,WACRZ,EAAEa,aAAa,IAAK,KACpBb,EAAEc,UAAUd,EAAEe,IAAK,KACnBf,EAAEgB,WAAWN,EAAK,GAAI,IACtBV,EAAEiB,WACFjB,EAAEkB,aAAa,IACfjB,EAAiB,GAAVD,EAAEmB,OAGXnB,EAAEoB,KAAO,WACPpB,EAAEqB,KACArB,EAAEsB,UACAtB,EAAEuB,MAAMb,EAAK,EAAG,GAChBV,EAAEsB,UAAUtB,EAAEuB,MAAMb,EAAK,GAAI,GAAIV,EAAEuB,MAAMb,EAAK,EAAG,IAAK,IACtDV,EAAEwB,IAAIxB,EAAEX,IAAIe,IAAc,EAAG,EAAG,EAAG,KAIvC,IAAMqB,EAAiBnC,YACrBU,EAAEmB,MAAQ,EACVnB,EAAE0B,OAAS,EACXvB,EAAaH,EAAE2B,QACf3B,EAAEwB,IAAIrB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,EAAM,GACzCD,EAAEwB,IAAIrB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,GAAQD,EAAE0B,OAAS1B,EAAEmB,OAAQ,IAChE,GAGIS,EAAY9B,IAAgB,WAAhB,IACb2B,GADa,QAEhBrB,GACCD,EAAaH,EAAEQ,OACZR,EAAEwB,IAAIrB,EAAYH,EAAEQ,OAAmB,EAAXR,EAAEQ,OAAYP,EAAM,GAChDD,EAAEwB,IAAIrB,EAAY,EAAGH,EAAEQ,OAAQ,EAAGP,IACpCD,EAAE6B,MAAM,IAAM,IAAM7B,EAAE8B,WAAF,MACtB,KAEE5B,IACFF,EAAE+B,aACF/B,EAAEgC,OAAF,MAAAhC,EAAC,EAAW4B,IACZ5B,EAAEgC,OAAF,MAAAhC,EAAC,EAAWE,IACZF,EAAEgC,OAAF,MAAAhC,EAAC,EAAWyB,IACZzB,EAAEiC,SAASjC,EAAEkC,QAEfhC,EAAY0B,EAEZxB,GAAcK,GADdN,GAAcG,GAEc,EAAXN,EAAEQ,QAAYR,EAAEmC,WAItB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACErC,OAAQA,EACRsC,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2019-03-24-js-107fc2fac4acd7411aba.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian, {\r\n  polarToCartesianEllipse,\r\n} from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const SPEED = 1 / 500;\r\n  const DETAIL = 4;\r\n\r\n  let size;\r\n  let prevPoint;\r\n  let outerAngle = 0;\r\n  let innerAngle = p.PI;\r\n  let outerSpeed = SPEED / DETAIL / p.TWO_PI;\r\n  let innerSpeed = 1 / DETAIL / p.TWO_PI;\r\n  let hue = p.random(100);\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, 100);\r\n    p.background(hue, 90, 10);\r\n    p.noStroke();\r\n    p.strokeWeight(0.5);\r\n    size = p.width * 0.4;\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.fill(\r\n      p.lerpColor(\r\n        p.color(hue, 0, 0),\r\n        p.lerpColor(p.color(hue, 95, 5), p.color(hue, 5, 95), 0.8),\r\n        p.map(p.sin(innerAngle), -1, 1, 0, 1)\r\n      )\r\n    );\r\n\r\n    const thisFocalPoint = polarToCartesianEllipse(\r\n      p.width / 2,\r\n      p.height / 2,\r\n      outerAngle + p.HALF_PI,\r\n      p.map(outerAngle, 0, p.TWO_PI * 2, size, 0),\r\n      p.map(outerAngle, 0, p.TWO_PI * 2, size * (p.height / p.width), 0),\r\n      true\r\n    );\r\n\r\n    const thisPoint = polarToCartesian(\r\n      ...thisFocalPoint,\r\n      innerAngle,\r\n      (outerAngle > p.TWO_PI\r\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\r\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\r\n        p.noise(0.01, 0.02, p.frameCount / (DETAIL * 1000)),\r\n      true\r\n    );\r\n    if (prevPoint) {\r\n      p.beginShape();\r\n      p.vertex(...thisPoint);\r\n      p.vertex(...prevPoint);\r\n      p.vertex(...thisFocalPoint);\r\n      p.endShape(p.CLOSE);\r\n    }\r\n    prevPoint = thisPoint;\r\n    outerAngle += outerSpeed;\r\n    innerAngle += innerSpeed;\r\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Be patient. This one takes a while to draw.\"\r\n  />\r\n);\r\n"],"sourceRoot":""}