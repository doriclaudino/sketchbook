{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/04/22.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","max","hue","random","lightness","radius","iterations","setup","createCanvas","background","colorMode","HSL","blendMode","HARD_LIGHT","dist","width","height","draw","console","log","pow","TWO_PI","stroke","lerp","line","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,sfCXjC,IAAME,EAAS,SAASC,GACtB,IAGIC,EAHAC,EAAMF,EAAEG,OAAO,EAAG,IAClBC,EAAY,GAGZC,EAAS,EACTC,EAAa,EAEjBN,EAAEO,MAAQ,WACRP,EAAEQ,aAAa,IAAK,KACpBR,EAAES,WAAW,GACbT,EAAEU,UAAUV,EAAEW,IAAK,KACnBX,EAAEY,UAAUZ,EAAEa,YAEdZ,EAAMD,EAAEc,KAAK,EAAG,EAAGd,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,IAG7ChB,EAAEiB,KAAO,WACPC,QAAQC,IAAId,GAAUJ,EAAMD,EAAEoB,IAAId,EAAY,MAC9C,IAAK,IAAItB,EAAQ,EAAGA,EAAQgB,EAAEqB,OAAQrC,GAAS,EAAIqB,EACjDL,EAAEG,SAAWE,GAAUJ,EAAMK,GACzBN,EAAEsB,OAAOtB,EAAEuB,KAAKrB,EAAKA,EAAM,GAAIF,EAAEG,UAAW,IAAKC,EAAW,IAC5DJ,EAAEsB,OAAO,EAAG,GAChBtB,EAAEwB,KAAF,MAAAxB,EAAC,EACIF,YACDE,EAAEe,MAAQ,EACVf,EAAEgB,OAAS,EACXhC,EACAqB,EAASL,EAAEG,OAAO,EAAG,GAAKG,IAC1B,IANH,SAQIR,YACDE,EAAEe,MAAQ,EACVf,EAAEgB,OAAS,EACXhC,EACAqB,EAASL,EAAEG,OAAO,EAAG,GAAKG,IAC1B,QAIND,EACaJ,IACXI,EAAS,EACTC,KACAF,GAAa,GACD,GAAKJ,EAAEyB,YAKV,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3B,OAAQA,EAAQ4B,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-04-22-js-91df46670eb6071bda05.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  let hue = p.random(0, 66);\r\n  let lightness = 60;\r\n  let img;\r\n  let max;\r\n  let radius = 1;\r\n  let iterations = 1;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(0);\r\n    p.colorMode(p.HSL, 100);\r\n    p.blendMode(p.HARD_LIGHT);\r\n\r\n    max = p.dist(0, 0, p.width / 2, p.height / 2);\r\n  };\r\n\r\n  p.draw = function() {\r\n    console.log(radius / (max * p.pow(iterations, 10)));\r\n    for (let angle = 0; angle < p.TWO_PI; angle += 1 / radius) {\r\n      p.random() < radius / (max * iterations)\r\n        ? p.stroke(p.lerp(hue, hue + 33, p.random()), 100, lightness, 50)\r\n        : p.stroke(0, 0);\r\n      p.line(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          angle,\r\n          radius - p.random(0, 10 / iterations),\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          angle,\r\n          radius + p.random(0, 20 / iterations),\r\n          true\r\n        )\r\n      );\r\n    }\r\n    radius++;\r\n    if (radius > max) {\r\n      radius = 1;\r\n      iterations++;\r\n      lightness /= 2;\r\n      lightness < 5 && p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}