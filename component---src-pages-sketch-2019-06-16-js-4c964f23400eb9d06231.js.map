{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/16.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","HUE","random","points","alpha","setup","createCanvas","background","noFill","colorMode","HSL","blendMode","OVERLAY","i","initPoints","Array","from","a","TWO_PI","d","width","length","height","aSpeed","concat","map","pt","Object","assign","draw","pts","stroke","frameCount","beginShape","curveVertex","forEach","j","endShape","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-06-16-js-4c964f23400eb9d06231.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const STEPS = 3;\r\n  const HUE = p.random(50);\r\n\r\n  let points = [[], [], []];\r\n  let alpha = 15;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(32);\r\n    p.noFill();\r\n    p.colorMode(p.HSL, 100);\r\n    p.blendMode(p.OVERLAY);\r\n\r\n    for (let i = 0; i < points.length; i++) {\r\n      const initPoints = Array.from(Array(3), () => ({\r\n        a: p.random(p.TWO_PI),\r\n        d: p.random(\r\n          (p.width / points.length) * (i + 1),\r\n          (p.height / points.length) * (i + 1)\r\n        ),\r\n        aSpeed: p.random(0.005, 0.01) * p.random([-1, 1]),\r\n      }));\r\n\r\n      for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\r\n        points[i] = points[i].concat(\r\n          initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    for (let i = 0; i < points.length; i++) {\r\n      const pts = points[i];\r\n\r\n      p.stroke(\r\n        p.map(p.sin(p.frameCount / (250 * (i + 1))), -1, 1, HUE, HUE + 50),\r\n        100,\r\n        p.map(p.cos(p.frameCount / (750 * (i + 1))), -1, 1, 20, 80),\r\n        alpha\r\n      );\r\n\r\n      p.beginShape();\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          pts[pts.length - 3].a,\r\n          pts[pts.length - 3].d,\r\n          true\r\n        )\r\n      );\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          pts[pts.length - 2].a,\r\n          pts[pts.length - 2].d,\r\n          true\r\n        )\r\n      );\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          pts[pts.length - 1].a,\r\n          pts[pts.length - 1].d,\r\n          true\r\n        )\r\n      );\r\n      pts.forEach(({ a, d, aSpeed }, j) => {\r\n        p.curveVertex(\r\n          ...polarToCartesian(p.width / 2, p.height / 2, a, d, true)\r\n        );\r\n        points[i][j].a += aSpeed;\r\n      });\r\n\r\n      p.endShape();\r\n    }\r\n\r\n    alpha -= 0.005;\r\n\r\n    if (alpha < 0) {\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}