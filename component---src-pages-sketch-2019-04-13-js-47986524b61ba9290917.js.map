{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","w","h","GRID_SIZE","random","MARGIN","SIZES","grid","Doodad","x","y","size","this","freq","TWO_PI","floor","drawFunc","pinwheel","horizontalLines","verticalLines","draw","push","stroke","fill","square","pop","translate","line","strokeWeight","r","polarToCartesian","start","end","setup","createCanvas","background","width","height","xx","yy","visited","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-04-13-js-47986524b61ba9290917.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const GRID_SIZE = p.random([60, 30, 15]);\r\n  const MARGIN = GRID_SIZE / 10;\r\n  const SIZES = [1, 2, 3, 5, 8, 13];\r\n\r\n  let grid = [];\r\n  let w;\r\n  let h;\r\n\r\n  class Doodad {\r\n    constructor(x, y, size) {\r\n      this.x = x * GRID_SIZE;\r\n      this.y = y * GRID_SIZE;\r\n      this.size = size * GRID_SIZE;\r\n      this.freq = p.TWO_PI / (p.floor(p.random(size * 4, size * 7)) * 2);\r\n      this.drawFunc = p.random([\r\n        this.pinwheel,\r\n        this.horizontalLines,\r\n        this.verticalLines,\r\n      ]);\r\n      this.draw();\r\n    }\r\n    draw() {\r\n      p.push();\r\n      p.stroke(64);\r\n      p.fill(p.random(192, 250));\r\n      p.square(this.x, this.y, this.size);\r\n      p.pop();\r\n\r\n      p.push();\r\n      p.stroke(255);\r\n      p.translate(-0.5, -0.5);\r\n      p.line(this.x, this.y, this.x + this.size, this.y);\r\n      p.line(this.x, this.y, this.x, this.y + this.size);\r\n      p.line(\r\n        this.x + this.size,\r\n        this.y,\r\n        this.x + this.size,\r\n        this.y + this.size\r\n      );\r\n      p.line(\r\n        this.x,\r\n        this.y + this.size,\r\n        this.x + this.size,\r\n        this.y + this.size\r\n      );\r\n      p.pop();\r\n\r\n      p.push();\r\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\r\n      this.drawFunc();\r\n      p.pop();\r\n    }\r\n    pinwheel() {\r\n      p.strokeWeight(2);\r\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\r\n        p.line(\r\n          ...polarToCartesian(0, 0, r, (this.size / 2 - MARGIN) / 3, true),\r\n          ...polarToCartesian(0, 0, r, this.size / 2 - MARGIN, true)\r\n        );\r\n      }\r\n    }\r\n    horizontalLines() {\r\n      p.strokeWeight(2);\r\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\r\n        const start = polarToCartesian(\r\n          0,\r\n          0,\r\n          r,\r\n          this.size / 2 - (MARGIN + 2),\r\n          true\r\n        );\r\n        const end = [-start[0], start[1]];\r\n        p.line(...start, ...end);\r\n      }\r\n    }\r\n    verticalLines() {\r\n      p.strokeWeight(2);\r\n      for (let r = 0; r < p.TWO_PI; r += this.freq) {\r\n        const start = polarToCartesian(\r\n          0,\r\n          0,\r\n          r,\r\n          this.size / 2 - (MARGIN + 2),\r\n          true\r\n        );\r\n        const end = [start[0], -start[1]];\r\n        p.line(...start, ...end);\r\n      }\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(255);\r\n    p.stroke(0);\r\n\r\n    w = p.floor(p.width / GRID_SIZE);\r\n    h = p.floor(p.height / GRID_SIZE);\r\n\r\n    for (let xx = 0; xx < w; xx++) {\r\n      grid.push([]);\r\n      for (let yy = 0; yy < h; yy++) {\r\n        grid[xx].push({\r\n          x: xx,\r\n          y: yy,\r\n          visited: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    const { x, y } = p.random(\r\n      [].concat(...grid).filter(({ visited }) => !visited)\r\n    );\r\n\r\n    if (!grid[x][y].visited) {\r\n      p.fill(p.random(0, 128));\r\n\r\n      let size = Math.max(...SIZES);\r\n      let overlap;\r\n\r\n      do {\r\n        overlap = false;\r\n        for (let xx = x; xx < size + x; xx++) {\r\n          for (let yy = y; yy < size + y; yy++) {\r\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        }\r\n        if (overlap) {\r\n          size = Math.max(...SIZES.filter(s => s < size));\r\n        }\r\n      } while (overlap);\r\n\r\n      new Doodad(x, y, size);\r\n\r\n      for (let xx = x; xx < size + x; xx++) {\r\n        for (let yy = y; yy < size + y; yy++) {\r\n          grid[xx][yy].visited = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    ![].concat(...grid).filter(({ visited }) => !visited).length && p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}