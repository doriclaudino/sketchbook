{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/15.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","HUE","random","points","setup","createCanvas","noFill","stroke","colorMode","HSB","initPoints","Array","from","a","TWO_PI","d","height","aSpeed","angle","concat","map","pt","Object","assign","draw","background","beginShape","curveVertex","polarToCartesian","width","length","noise","frameCount","forEach","i","endShape","push","blendMode","MULTIPLY","x","y","fill","rect","GRID_SIZE","pop","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-06-15-js-8c45a34c60418793f3bc.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const STEPS = 50;\r\n  const GRID_SIZE = 60;\r\n  const HUE = p.random(70);\r\n\r\n  let points = [];\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.noFill();\r\n    p.stroke(255);\r\n    p.colorMode(p.HSB, 100);\r\n\r\n    const initPoints = Array.from(Array(3), () => ({\r\n      a: p.random(p.TWO_PI),\r\n      d: p.random(p.height),\r\n      aSpeed: p.random(0.005, 0.01) * p.random([-1, 1]),\r\n    }));\r\n\r\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\r\n      points = points.concat(\r\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\r\n      );\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n\r\n    p.beginShape();\r\n    p.curveVertex(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[points.length - 3].a,\r\n        points[points.length - 3].d *\r\n          p.noise(\r\n            points[points.length - 3].d,\r\n            points[points.length - 3].a,\r\n            p.frameCount / 400\r\n          ),\r\n        true\r\n      )\r\n    );\r\n    p.curveVertex(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[points.length - 2].a,\r\n        points[points.length - 2].d *\r\n          p.noise(\r\n            points[points.length - 2].d,\r\n            points[points.length - 2].a,\r\n            p.frameCount / 400\r\n          ),\r\n        true\r\n      )\r\n    );\r\n    p.curveVertex(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[points.length - 1].a,\r\n        points[points.length - 1].d *\r\n          p.noise(\r\n            points[points.length - 1].d,\r\n            points[points.length - 1].a,\r\n            p.frameCount / 400\r\n          ),\r\n        true\r\n      )\r\n    );\r\n    points.forEach(({ a, d, aSpeed }, i) => {\r\n      p.curveVertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          a,\r\n          d * p.noise(d, a, p.frameCount / 400),\r\n          true\r\n        )\r\n      );\r\n      points[i].a += aSpeed;\r\n    });\r\n\r\n    p.endShape();\r\n\r\n    p.push();\r\n    p.blendMode(p.MULTIPLY);\r\n    for (let x = 0; x < p.width; x += GRID_SIZE) {\r\n      for (let y = 0; y < p.height; y += GRID_SIZE) {\r\n        p.fill(\r\n          p.map(p.noise(x + 1, y + 1, p.frameCount / 10), 0, 1, HUE, HUE + 30),\r\n          100,\r\n          100,\r\n          50\r\n        );\r\n        p.rect(\r\n          x - GRID_SIZE / 3,\r\n          y - GRID_SIZE / 3,\r\n          GRID_SIZE + GRID_SIZE / 3,\r\n          GRID_SIZE + GRID_SIZE / 3\r\n        );\r\n      }\r\n    }\r\n    p.pop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}