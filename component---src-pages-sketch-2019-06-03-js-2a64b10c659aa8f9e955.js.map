{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/03.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","alpha","particles","Particle","hue","this","velocity","createVector","random","position","move","prev","add","map","noise","frameCount","mult","setup","createCanvas","a","TWO_PI","push","width","height","background","noStroke","draw","fill","beginShape","forEach","particle","vertex","endShape","CLOSE","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,kiCCVjC,IAAME,EAAS,SAASC,GACtB,IAAIC,EAAQ,EAERC,EAAY,GAEVC,EALmB,WAMvB,WAAYP,EAAGC,EAAGO,GAChBC,KAAKT,EAAIA,EACTS,KAAKR,EAAIA,EAETQ,KAAKC,SAAWN,EAAEO,aAAaP,EAAEQ,QAAQ,EAAG,GAAIR,EAAEQ,QAAQ,EAAG,IAC7DH,KAAKI,SAAWT,EAAEO,aAAaF,KAAKT,EAAGS,KAAKR,GAXvB,mBAcvBa,KAAA,WACEL,KAAKM,KAAO,CAAEf,EAAGS,KAAKI,SAASb,EAAGC,EAAGQ,KAAKI,SAASZ,GACnDQ,KAAKC,SAASM,IACZZ,EAAEO,aACAP,EAAEa,IACAb,EAAEc,MACAT,KAAKI,SAASb,EAAI,IAClBS,KAAKI,SAASZ,EAAI,IAClBG,EAAEe,WAAa,KAEjB,EACA,GACC,GACD,IAEFf,EAAEa,IACAb,EAAEc,MACAT,KAAKI,SAASb,EAAI,IAClBS,KAAKI,SAASZ,EAAI,IAClBG,EAAEe,WAAa,KAEjB,EACA,GACC,GACD,MAINV,KAAKC,SAASU,KAxCD,SAyCbX,KAAKI,SAASG,IAAIP,KAAKC,WA3CF,KA+CzBN,EAAEiB,MAAQ,WACRjB,EAAEkB,aAAa,IAAK,KACpB,IAAK,IAAIC,EAAI,EAAGA,EAAInB,EAAEoB,OAAQD,GAAKnB,EAAEoB,OAAS,GAC5ClB,EAAUmB,KAAV,EACMlB,EADN,EAEOL,YAAiBE,EAAEsB,MAAQ,EAAGtB,EAAEuB,OAAS,EAAGJ,EAAG,KAAK,MAI7DnB,EAAEwB,WAAW,GACbxB,EAAEyB,YAGJzB,EAAE0B,KAAO,WACP1B,EAAE2B,KAAK3B,EAAEa,IAAIb,EAAEb,IAAIa,EAAEe,WAAa,MAAO,EAAG,EAAG,EAAG,KAAMd,GAExDD,EAAE4B,aACF1B,EAAU2B,SAAQ,SAAAC,GAChBA,EAASpB,OACTV,EAAE+B,OAAOD,EAASrB,SAASb,EAAGkC,EAASrB,SAASZ,MAElDG,EAAEgC,SAAShC,EAAEiC,QAIL,KADVhC,GAAS,OACMD,EAAEkC,UAGJ,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACEpC,OAAQA,EACRqC,KAAMD,EAASE,SACfC,YAAY","file":"component---src-pages-sketch-2019-06-03-js-2a64b10c659aa8f9e955.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport Link from \"~components/link\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  let alpha = 5;\r\n  let multiplier = 0.99;\r\n  let particles = [];\r\n\r\n  class Particle {\r\n    constructor(x, y, hue) {\r\n      this.x = x;\r\n      this.y = y;\r\n\r\n      this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\r\n      this.position = p.createVector(this.x, this.y);\r\n    }\r\n\r\n    move() {\r\n      this.prev = { x: this.position.x, y: this.position.y };\r\n      this.velocity.add(\r\n        p.createVector(\r\n          p.map(\r\n            p.noise(\r\n              this.position.x / 300,\r\n              this.position.y / 200,\r\n              p.frameCount / 400\r\n            ),\r\n            0,\r\n            1,\r\n            -0.1,\r\n            0.1\r\n          ),\r\n          p.map(\r\n            p.noise(\r\n              this.position.x / 200,\r\n              this.position.y / 300,\r\n              p.frameCount / 400\r\n            ),\r\n            0,\r\n            1,\r\n            -0.1,\r\n            0.1\r\n          )\r\n        )\r\n      );\r\n      this.velocity.mult(multiplier, multiplier);\r\n      this.position.add(this.velocity);\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    for (let a = 0; a < p.TWO_PI; a += p.TWO_PI / 50) {\r\n      particles.push(\r\n        new Particle(\r\n          ...polarToCartesian(p.width / 2, p.height / 2, a, 100, true)\r\n        )\r\n      );\r\n    }\r\n    p.background(0);\r\n    p.noStroke();\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.fill(p.map(p.cos(p.frameCount / 100), -1, 1, 0, 255), alpha);\r\n\r\n    p.beginShape();\r\n    particles.forEach(particle => {\r\n      particle.move();\r\n      p.vertex(particle.position.x, particle.position.y);\r\n    });\r\n    p.endShape(p.CLOSE);\r\n  };\r\n\r\n  alpha -= 0.0005;\r\n  alpha === 0 && p.noLoop();\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Reload page for a different variation.\"\r\n  />\r\n);\r\n"],"sourceRoot":""}