{"version":3,"sources":["webpack:///./src/lib/addNoise.js","webpack:///./src/pages/sketch/2019/05/11.js"],"names":["addNoise","p","intensity","PTS","width","height","push","i","fill","noStroke","ellipse","randomGaussian","pixelDensity","pop","sketch","w","h","GRID_SIZE","SIZES","HUE","random","BG","color","grid","Doodad","x","y","size","this","tileSize","tile","createGraphics","colorMode","HSB","background","stroke","strokeCap","PROJECT","strokeWeight","noFill","drawSmallTile","drawTile","drawBigTile","drawReallyBigTile","translate","rotate","HALF_PI","image","arc","PI","circle","setup","createCanvas","floor","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-05-11-js-b715064d3f7c95c7e06c.js","sourcesContent":["const addNoise = (p, intensity = 0.5) => {\n  const PTS = p.width * p.height * 0.02;\n\n  p.push();\n  for (let i = 0; i < PTS; i++) {\n    p.fill(\n      i % 2\n        ? `rgba(0, 0, 0, ${intensity})`\n        : `rgba(255, 255, 255, ${intensity})`\n    );\n    p.noStroke();\n    p.ellipse(\n      p.randomGaussian(p.width / 2, p.width / 3),\n      p.randomGaussian(p.height / 2, p.height / 3),\n      1 / (p.pixelDensity() / 2)\n    );\n  }\n  p.pop();\n};\n\nexport default addNoise;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport addNoise from \"~lib/addNoise\";\r\n\r\nconst sketch = function(p) {\r\n  const GRID_SIZE = 30;\r\n  const SIZES = [1, 4, 4, 4, 4, 5, 5, 5, 6, 6];\r\n  const HUE = p.random(100);\r\n  const BG = p.color(HUE, 75, 100);\r\n\r\n  let grid = [];\r\n  let w;\r\n  let h;\r\n\r\n  class Doodad {\r\n    constructor(x, y, size) {\r\n      this.x = x * GRID_SIZE;\r\n      this.y = y * GRID_SIZE;\r\n      this.tileSize = size * GRID_SIZE;\r\n\r\n      this.tile = p.createGraphics(this.tileSize, this.tileSize);\r\n      this.tile.colorMode(p.HSB, 100);\r\n      this.tile.background(BG);\r\n      this.tile.stroke(100 - HUE, 25, 50);\r\n      this.tile.strokeCap(p.PROJECT);\r\n      this.tile.strokeWeight(GRID_SIZE / 5);\r\n      this.tile.noFill();\r\n\r\n      switch (size) {\r\n        case 1:\r\n          this.drawSmallTile();\r\n          break;\r\n\r\n        case 4:\r\n          this.drawTile();\r\n          break;\r\n\r\n        case 5:\r\n          this.drawTile();\r\n          this.drawBigTile();\r\n          break;\r\n\r\n        case 6:\r\n          this.drawTile();\r\n          this.drawReallyBigTile();\r\n          break;\r\n      }\r\n\r\n      p.push();\r\n      p.translate(this.x + this.tileSize / 2, this.y + this.tileSize / 2);\r\n      p.rotate(p.random([0, p.HALF_PI]));\r\n      p.image(this.tile, -this.tileSize / 2, -this.tileSize / 2);\r\n      p.pop();\r\n    }\r\n\r\n    drawSmallTile() {\r\n      this.tile.arc(0, 0, this.tileSize, this.tileSize, 0, p.HALF_PI);\r\n      this.tile.arc(\r\n        this.tileSize,\r\n        this.tileSize,\r\n        this.tileSize,\r\n        this.tileSize,\r\n        p.PI,\r\n        p.HALF_PI + p.PI\r\n      );\r\n    }\r\n\r\n    drawTile() {\r\n      this.tile.circle(0, 0, GRID_SIZE / 2);\r\n      this.tile.circle(0, this.tileSize, GRID_SIZE / 2);\r\n      this.tile.circle(this.tileSize, 0, GRID_SIZE / 2);\r\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE / 2);\r\n      this.tile.circle(0, 0, GRID_SIZE * 1.5);\r\n      this.tile.circle(0, this.tileSize, GRID_SIZE * 1.5);\r\n      this.tile.circle(this.tileSize, 0, GRID_SIZE * 1.5);\r\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE * 1.5);\r\n      this.tile.circle(this.tileSize / 2, this.tileSize / 2, GRID_SIZE / 2);\r\n    }\r\n\r\n    drawBigTile() {\r\n      this.tile.circle(0, 0, this.tileSize / 2);\r\n      this.tile.circle(this.tileSize, this.tileSize, this.tileSize / 2);\r\n    }\r\n\r\n    drawReallyBigTile() {\r\n      this.tile.circle(0, 0, GRID_SIZE * 2.5);\r\n      this.tile.circle(this.tileSize, this.tileSize, GRID_SIZE * 2.5);\r\n      this.tile.circle(0, this.tileSize, GRID_SIZE * 2.5);\r\n      this.tile.circle(this.tileSize, 0, GRID_SIZE * 2.5);\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(BG);\r\n\r\n    w = p.floor(p.width / GRID_SIZE);\r\n    h = p.floor(p.height / GRID_SIZE);\r\n\r\n    for (let xx = 0; xx < w; xx++) {\r\n      grid.push([]);\r\n      for (let yy = 0; yy < h; yy++) {\r\n        grid[xx].push({\r\n          x: xx,\r\n          y: yy,\r\n          visited: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    const { x, y } = p.random(\r\n      [].concat(...grid).filter(({ visited }) => !visited)\r\n    );\r\n\r\n    if (!grid[x][y].visited) {\r\n      let size = Math.max(...SIZES);\r\n      let overlap;\r\n\r\n      do {\r\n        overlap = false;\r\n        for (let xx = x; xx < size + x; xx++) {\r\n          for (let yy = y; yy < size + y; yy++) {\r\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        }\r\n        if (overlap) {\r\n          size = Math.max(...SIZES.filter(s => s < size));\r\n        }\r\n      } while (overlap);\r\n\r\n      new Doodad(x, y, size);\r\n\r\n      for (let xx = x; xx < size + x; xx++) {\r\n        for (let yy = y; yy < size + y; yy++) {\r\n          grid[xx][yy].visited = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}