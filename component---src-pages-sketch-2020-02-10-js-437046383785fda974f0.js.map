{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/10.js"],"names":["sketch","p","lineSpace","theta","amp","dx","speed","lineHeight","total","showDistances","p5","setup","createCanvas","min","displayWidth","displayHeight","height","TWO_PI","windowResized","resizeCanvas","draw","background","noStroke","translate","width","textSize","x","centerOffset","bottom","top","i","cosx","cos","offsetX","map","getLinePoints","dcolor","dist","x1","y1","max","x2","y2","rmapcolor","fill","text","round","quad","cateto","radius","sqrt","pow","location","path","pathname","description"],"mappings":"yKAKMA,EAAS,SAASC,GACtB,IAAIC,EACFC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,OATkC,IAAdR,MAAI,IAAIS,KAY9BT,EAAEU,MAAQ,WACRV,EAAEW,aAAaX,EAAEY,IAAI,KAAMZ,EAAEa,cAAeb,EAAEY,IAAI,KAAMZ,EAAEc,gBAE1Db,EAAY,EACZK,EAAa,EACbJ,EAAQ,EACRC,EAAMH,EAAEe,OAAS,EACV,IACPV,EAAQ,IACRD,EAAMJ,EAAEgB,OAFD,IAEkBf,EACzBM,EAAe,EAANJ,GAAYF,EAAYK,GACjCE,GAAgB,GAYlBR,EAAEiB,cAAgB,WAChBjB,EAAEkB,aAAalB,EAAEa,aAAcb,EAAEc,gBAGnCd,EAAEmB,KAAO,WACPhB,EAAMH,EAAEe,OAAS,EACjBf,EAAEoB,WAAW,GACbpB,EAAEqB,WACFrB,EAAEsB,UAAUtB,EAAEuB,MAAQ,EAAGvB,EAAEe,OAAS,GACpCf,EAAEwB,SAAS,IASX,IANA,IAAIC,EADJvB,GAASG,EAGLqB,GADQvB,EAERwB,EAAS,GACTC,EAAM,GAEDC,EAAI,EAAGA,EAAItB,EAAOsB,IAAK,CAE9B,IAAIC,EAAO9B,EAAE+B,IAAIN,GACbO,EAAUhC,EAAEiC,IAAIH,GAAO,EAAG,EAAU,GAAN3B,EAAS,GAM3CwB,EAASO,EAAc/B,EAHvBuB,GAA8BzB,GAS9B2B,EAAMM,EAAc/B,EAHpBuB,GAA8BpB,GAM9B,IAAI6B,EAASnC,EAAEoC,KACbT,EAAOU,GACPV,EAAOW,GACPtC,EAAEuC,IAAIZ,EAAOU,GAAIV,EAAOa,GAAKR,GAC7BL,EAAOc,IAELC,EAAY1C,EAAEiC,IAAIE,EAAQ,EAAS,EAANhC,EAAS,IAAK,GAG/CH,EAAE2C,KAAK,IAAK,GAAID,EAAY,IAGxBlC,GAAiBqB,EAAI,GAAG7B,EAAE4C,KAAK5C,EAAE6C,MAAMV,GAASP,EAAIY,GAAK,GAAIZ,EAAIa,IAErEzC,EAAE8C,KACAnB,EAAOU,GACPV,EAAOW,GACPV,EAAIS,GACJT,EAAIU,GACJV,EAAIY,GACJZ,EAAIa,GACJzC,EAAEuC,IAAIZ,EAAOU,GAAIV,EAAOa,GAAKR,GAC7BL,EAAOc,IAIThB,GAAKrB,IAIT,IAAM8B,EAAgB,SAAC/B,EAAKuB,GAAN,MAAwB,CAC5CW,IAAKU,EAAO5C,EAAKuB,GACjBY,IAAKZ,EACLc,GAAIO,EAAO5C,EAAKuB,GAChBe,IAAKf,IAIDqB,EAAS,SAACC,EAAQjC,GAAT,OACbf,EAAEiD,KAAKjD,EAAEkD,IAAIF,EAAQ,GAAKhD,EAAEkD,IAAInC,EAAQ,MAG7B,0BAAGoC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpD,OAAQA,EAAQqD,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2020-02-10-js-437046383785fda974f0.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport p5 from \"p5\";\n// import \"p5.createloop\";\n\nconst sketch = function(p = new p5()) {\n  let lineSpace,\n    theta,\n    amp,\n    wait,\n    dx,\n    speed,\n    lineHeight,\n    total,\n    showDistances,\n    settings;\n\n  p.setup = function() {\n    p.createCanvas(p.min(1200, p.displayWidth), p.min(1200, p.displayHeight));\n\n    lineSpace = 2; //space between waves\n    lineHeight = 4;\n    theta = 0.0;\n    amp = p.height / 4; //amplitude of the wave, and radius of circle\n    wait = 500.0; //wave offset\n    speed = 0.01; //growth wave speed\n    dx = (p.TWO_PI / wait) * lineSpace;\n    total = (amp * 2) / (lineSpace + lineHeight);\n    showDistances = false;\n\n    // if (window && window.QuickSettings) {\n    //   settings = QuickSettings.create();\n    //   settings.addBoolean(\n    //     \"show Distances\",\n    //     showDistances,\n    //     x => (showDistances = x)\n    //   );\n    // }\n  };\n\n  p.windowResized = function() {\n    p.resizeCanvas(p.displayWidth, p.displayHeight);\n  };\n\n  p.draw = function() {\n    amp = p.height / 4;\n    p.background(0);\n    p.noStroke();\n    p.translate(p.width / 2, p.height / 2);\n    p.textSize(16);\n\n    theta += speed;\n    let x = theta;\n    let init = -amp; //init from top\n    let centerOffset = init;\n    let bottom = {};\n    let top = {};\n\n    for (let i = 0; i < total; i++) {\n      //here control the wave length in/out\n      let cosx = p.cos(x);\n      let offsetX = p.map(cosx, -1, 1, -amp * 2, 0);\n\n      //move or lines down/up\n      centerOffset = centerOffset + lineSpace;\n\n      //bottom points if we start from bottom\n      bottom = getLinePoints(amp, centerOffset);\n\n      //move to the next line or top points\n      centerOffset = centerOffset + lineHeight;\n\n      //top points if we start from bottom\n      top = getLinePoints(amp, centerOffset);\n\n      //get max dist\n      let dcolor = p.dist(\n        bottom.x1,\n        bottom.y1,\n        p.max(bottom.x1, bottom.x2 + offsetX),\n        bottom.y2\n      );\n      let rmapcolor = p.map(dcolor, 0, amp * 2, 255, 0);\n\n      //more red, little green, more blue\n      p.fill(255, 75, rmapcolor - 75);\n\n      //every second\n      if (showDistances && i % 2) p.text(p.round(dcolor), top.x2 + 30, top.y2);\n\n      p.quad(\n        bottom.x1,\n        bottom.y1,\n        top.x1,\n        top.y1,\n        top.x2,\n        top.y2,\n        p.max(bottom.x1, bottom.x2 + offsetX),\n        bottom.y2\n      );\n\n      //update delay\n      x += dx;\n    }\n  };\n\n  const getLinePoints = (amp, centerOffset) => ({\n    x1: -cateto(amp, centerOffset),\n    y1: -centerOffset,\n    x2: cateto(amp, centerOffset),\n    y2: -centerOffset,\n  });\n\n  //base on radius and cathetus height, we can find other cathetus, using triangle\n  const cateto = (radius, height) =>\n    p.sqrt(p.pow(radius, 2) - p.pow(height, 2));\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}