{"version":3,"sources":["webpack:///./src/components/sketch.js","webpack:///./src/components/sketch-title.js","webpack:///./src/components/sketch-controls.js","webpack:///./src/components/sketch-layout.js","webpack:///./src/pages/sketch/2020/02/08.js"],"names":["SketchWrapper","Sketch","props","sketchRef","React","createRef","canvas","componentDidMount","this","p5","sketch","current","componentDidUpdate","remove","componentWillUnmount","render","ref","Component","path","dateTime","sketchTitle","SketchControls","children","other","id","description","query","images","sketches","image","edges","find","edge","node","relativePath","includes","replace","sketchIndex","findIndex","next","previous","title","ogImage","childImageSharp","og","src","twitterImage","twitter","css","to","label","icon","p","rotationSpeedSlider","rotationSpeedP","colorPicker1","colorPicker2","colorPicker3","speed1","speed2","RENDER","getURLParams","colors","brown","mustard","niceRed","rotationSpeedSliderPanel","rotationSpeedPPanel","initialRotations","starRotation","panelRotation","size","color1","color2","color3","toFrameRate","value","decimals","getFrameRate","toFixed","getSpeedStats","toSeconds","diamond","angle","base","color","rotation","push","noStroke","fill","rotate","quad","tangHeight","pop","panel","flip","altura","height","rad","radians","Math","tan","setup","pixelDensity","frameRate","background","createCanvas","angleMode","DEGREES","createColorPicker","parent","createSlider","createP","draw","elt","innerText","translate","width","purple","rectMode","CENTER","rect","backgroundSquare","orange","leftPanel","green","rightPanel","location","pathname"],"mappings":"gqBAGA,IAAMA,EAAa,4PAuCJC,E,oBApBb,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,UAAYC,IAAMC,YACvB,EAAKC,OAAS,KAHG,E,kHAKnBC,kBAAA,WACEC,KAAKF,OAAS,IAAIG,GAAGD,KAAKN,MAAMQ,OAAQF,KAAKL,UAAUQ,U,EAEzDC,mBAAA,WACEJ,KAAKF,OAAOO,SACZL,KAAKF,OAAS,IAAIG,GAAGD,KAAKN,MAAMQ,OAAQF,KAAKL,UAAUQ,U,EAEzDG,qBAAA,WACEN,KAAKF,OAAOO,U,EAEdE,OAAA,WACE,OAAO,YAACf,EAAD,CAAegB,IAAKR,KAAKL,a,GAjBfC,IAAMa,W,YClBZ,kBAAGC,EAAH,EAAGA,KAAH,OACb,oBAAMC,SAAUC,YAAYF,IAAQE,YAAYF,K,iQCDlD,IAAMG,EAAc,iMAUL,kBAAGC,EAAH,EAAGA,SAAaC,E,oIAAhB,wBACb,YAACF,EAAD,GAAgBG,GAAG,mBAAsBD,GACtC,IACAD,EAAU,M,gICJA,kBAAGZ,EAAH,EAAGA,OAAQQ,EAAX,EAAWA,KAAMO,EAAjB,EAAiBA,YAAjB,OACb,YAAC,cAAD,CACEC,MAAOA,EACPX,OAAQ,YAA2B,IAAxBY,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACXC,EAAQF,EAAOG,MAAMC,MAAK,SAAAC,GAAI,OAClCA,EAAKC,KAAKC,aAAaC,SACrBjB,EAAKkB,QAAQ,WAAY,IAAIA,QAAQ,MAAO,QAG1CC,EAAcT,EAASE,MAAMQ,WACjC,SAAAN,GAAI,OAAIA,EAAKC,KAAKf,OAASA,KAPG,EASLU,EAASE,MAAMO,IAAgB,GAAlDE,EATwB,EASxBA,KAAMC,EATkB,EASlBA,SAEd,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEC,MAAOrB,YAAYF,GACnBwB,QAASb,EAAQA,EAAMI,KAAKU,gBAAgBC,GAAGC,IAAM,KACrDC,aAAcjB,EAAQA,EAAMI,KAAKU,gBAAgBI,QAAQF,IAAM,OAEjE,YAAC,IAAD,KACE,kBACEG,IAAG,GAMH,YAAC,EAAD,CAAa9B,KAAMA,IAAS,KACxB,IACN,YAAC,IAAD,CACE+B,GAAE,YAAc7B,YAAYF,GAC5BgC,MAAM,gBACNC,KAAK,OAEP,YAAC,IAAD,CAAMF,GAAIV,GAAQA,EAAKrB,KAAMiC,KAAK,SAClC,YAAC,IAAD,CAAMF,GAAIT,GAAYA,EAAStB,KAAMiC,KAAK,WAClC,IACV,wBACE,YAAC,EAAD,CAAQzC,OAAQA,IADlB,IAC6B,YAAC,EAAD,MAC1Be,GACC,iBACEuB,IAAG,GAIFvB,EAAa,KAEf,KACG,MAjDhB,UAwDIC,EAAK,aCjELhB,EAAS,SAAU0C,GACvB,IASIC,EACAC,EAUAC,EACAC,EACAC,EACAC,EACAC,EAxBEC,EAASR,EAAES,eAAe9C,OAI1B+C,EAAS,CACbC,MAAO,UACPC,QAAS,UACTC,QAAS,WAIPC,EAA2B,EAC3BC,EAAsB,EACtBC,EAAmB,CAAC,EAAG,GAAI,IAAK,IAAK,IAAK,KAC1CC,EAAe,EACfC,EAAgB,EAChBC,EAAO,EACPC,EAASV,EAAOE,QAChBS,EAASX,EAAOC,MAChBW,EAASZ,EAAOG,QAQdU,EAAc,SAACC,EAAOC,GAAR,OAAqBA,GAAYD,EAAQxB,EAAE0B,gBAAgBC,QAAQF,GAAYD,EAAQxB,EAAE0B,gBACvGE,EAAgB,SAACJ,GAAD,OAAcA,EAAd,SAA4BD,EAAYC,EAAM,GAA9C,YAFJ,SAACA,EAAOC,GAAR,OAAqBA,GAAiC,GAArBF,EAAYC,IAAaG,QAAQF,GAAiC,GAArBF,EAAYC,GAE1BK,CAAUL,EAAM,GAA5E,OAYhBM,EAAU,SAACC,EAAOC,EAAMC,EAAOC,GACnClC,EAAEmC,OACFnC,EAAEoC,WACFpC,EAAEqC,KAAKJ,GACPjC,EAAEsC,OAAOJ,GACTlC,EAAEuC,KACA,EACA,EACA,EACO,EAAPP,EACAQ,EAAWR,EAAMD,GACV,EAAPC,EACAQ,EAAWR,EAAMD,GACjBC,GAEFhC,EAAEyC,OAWEC,EAAQ,SAACvB,EAAMc,EAAOC,EAAUS,QAAiB,IAAjBA,OAAO,GAC3C,IAAIC,EAASJ,EAAWrB,EAAO,GAC/BnB,EAAEmC,OACFnC,EAAEsC,OAAOJ,GACTlC,EAAEqC,KAAKJ,GACPjC,EAAEoC,WACFpC,EAAEuC,KACA,EACA,EAEA,EACApB,EAAO,EAEPwB,EAAOxB,EAAO,EAAIA,GAAQ,EAC1BA,EAAO,EAEPwB,EAAOxB,EAAO,EAAIA,GAAQ,GACzByB,GAEH5C,EAAEyC,OAGED,EAAa,SAACR,EAAmBD,QAAe,IAAlCC,MAAOa,OAAS,QAAkB,IAAfd,MAAQ,IAC7C,IAAIe,EAAM9C,EAAE+C,QAAQhB,GAGpB,OAFUiB,KAAKC,IAAIH,GACAd,GAIrBhC,EAAEkD,MAAQ,WACRlD,EAAEmD,aAAa3C,EAAS,EAAI,GAC5BR,EAAEoD,UA/FS,IAgGXpD,EAAEqD,WAAW,KACbrD,EAAEsD,aAAa,IAAK,KACpBtD,EAAEuD,UAAUvD,EAAEwD,SAEdpD,EAAeJ,EAAEyD,kBAAkBpC,GACnClB,EAAeH,EAAEyD,kBAAkBrC,GACnCf,EAAeL,EAAEyD,kBAAkBnC,GACnCnB,EAAauD,OAAO,mBACpBtD,EAAasD,OAAO,mBACpBrD,EAAaqD,OAAO,mBAEpBzD,EAAsBD,EAAE2D,cAAc,EAAG,EAAG,GAAK,MACjDzD,EAAiBF,EAAE4D,QAAW3D,EAAoBuB,QAAjC,mBACjBvB,EAAoByD,OAAO,mBAC3BxD,EAAewD,OAAO,mBAEtB5C,EAA2Bd,EAAE2D,cAAc,EAAG,EAAG,EAAG,MACpD5C,EAAsBf,EAAE4D,QAAW9C,EAAyBU,QAAtC,mBACtBV,EAAyB4C,OAAO,mBAChC3C,EAAoB2C,OAAO,oBAQ7B1D,EAAE6D,KAAO,WAEPzC,EAASjB,EAAaqB,QACtBH,EAASjB,EAAaoB,QACtBF,EAASjB,EAAamB,QAGtBlB,EAASL,EAAoBuB,QAC7BjB,EAASO,EAAyBU,QAIlCL,EAAkB,EAAXnB,EAAE6C,OAGT3C,EAAe4D,IAAIC,UAAYnC,EAActB,GAC7CS,EAAoB+C,IAAIC,UAAYnC,EAAcrB,GAGlDP,EAAEgE,UAAUhE,EAAEiE,MAAQ,EAAGjE,EAAE6C,OAAS,GAlHb,SAAC1B,EAAMe,EAAUD,QAA0B,IAA1BA,MAAQvB,EAAOwD,QACvDlE,EAAEmC,OACFnC,EAAEmE,SAASnE,EAAEoE,QACbpE,EAAEsC,OAAOJ,GACTlC,EAAEqC,KAAKJ,GACPjC,EAAEoC,WACFpC,EAAEqE,KAAK,EAAG,EAAGlD,EAAMA,GACnBnB,EAAEyC,MA8GF6B,CAAiBnD,EAAMD,EAAeE,GArFtB,SAACD,EAAMe,EAAcD,QAA0B,IAAxCC,MAAW,QAA6B,IAA1BD,MAAQvB,EAAO6D,QACpD7B,EAAMvB,EAAMc,EAAOC,GAuFnBsC,CAAUrD,EAAMD,EAAeI,GA5Fd,SAACH,EAAMe,EAAcD,QAAyB,IAAvCC,MAAW,QAA4B,IAAzBD,MAAQvB,EAAO+D,OACrD/B,EAAMvB,EAAMc,EAAOC,GAAU,GA4F7BwC,CAAWvD,EAAMD,EAAeG,GAIhCS,EAAQ,GAAI,GAAIR,EAAQN,EAAiB,GAAKC,GAC9Ca,EAAQ,GAAI,GAAIT,EAAQL,EAAiB,GAAKC,GAC9Ca,EAAQ,GAAI,GAAIV,EAAQJ,EAAiB,GAAKC,GAC9Ca,EAAQ,GAAI,GAAIR,EAAQN,EAAiB,GAAKC,GAC9Ca,EAAQ,GAAI,GAAIT,EAAQL,EAAiB,GAAKC,GAC9Ca,EAAQ,GAAI,GAAIV,EAAQJ,EAAiB,GAAKC,GAG9CA,GAAgBX,EAChBY,GAAiBX,IAIN,0BACboE,EADa,EACbA,SADa,OAEP,YACN,EADM,CACOrH,OACXA,EAEFQ,KACE6G,EAASC,SAEXvG,YAAc","file":"component---src-pages-sketch-2020-02-08-js-82adfcaf327c92cae595.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst SketchWrapper = styled.div`\r\n  width: 100%;\r\n  overflow: hidden;\r\n  position: relative;\r\n  height: 0;\r\n  padding: 0 0 127.27272727%;\r\n\r\n  & > canvas {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100% !important;\r\n    height: 100% !important;\r\n  }\r\n`;\r\n\r\nclass Sketch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n    this.canvas = null;\r\n  }\r\n  componentDidMount() {\r\n    this.canvas = new p5(this.props.sketch, this.sketchRef.current);\r\n  }\r\n  componentDidUpdate() {\r\n    this.canvas.remove();\r\n    this.canvas = new p5(this.props.sketch, this.sketchRef.current);\r\n  }\r\n  componentWillUnmount() {\r\n    this.canvas.remove();\r\n  }\r\n  render() {\r\n    return <SketchWrapper ref={this.sketchRef} />;\r\n  }\r\n}\r\n\r\nexport default Sketch;\r\n","import React from \"react\";\nimport sketchTitle from \"~util/sketch-title\";\n\nexport default ({ path }) => (\n  <time dateTime={sketchTitle(path)}>{sketchTitle(path)}</time>\n);\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst SketchControls = styled.div`\r\n  min-height: 100px;\r\n  min-width: 100px;\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n`;\r\n\r\nexport default ({ children, ...other }) => (\r\n  <SketchControls id=\"sketch-controls\" {...other}>\r\n    {\" \"}\r\n    {children}{\" \"}\r\n  </SketchControls>\r\n);\r\n","import React from \"react\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\nimport { css } from \"@emotion/core\";\r\nimport Layout from \"~components/layout\";\r\nimport SEO from \"~components/seo\";\r\nimport Header from \"~components/header\";\r\nimport Icon from \"~components/icon\";\r\nimport Sketch from \"~components/sketch\";\r\nimport SketchTitle from \"~components/sketch-title\";\r\nimport SketchControls from \"~components/sketch-controls\";\r\nimport sketchTitle from \"~util/sketch-title\";\r\n\r\nexport default ({ sketch, path, description }) => (\r\n  <StaticQuery\r\n    query={query}\r\n    render={({ images, sketches }) => {\r\n      const image = images.edges.find(edge =>\r\n        edge.node.relativePath.includes(\r\n          path.replace(\"/sketch/\", \"\").replace(/\\/$/, \"\")\r\n        )\r\n      );\r\n      const sketchIndex = sketches.edges.findIndex(\r\n        edge => edge.node.path === path\r\n      );\r\n      const { next, previous } = sketches.edges[sketchIndex] || {};\r\n\r\n      return (\r\n        <Layout>\r\n          <SEO\r\n            title={sketchTitle(path)}\r\n            ogImage={image ? image.node.childImageSharp.og.src : null}\r\n            twitterImage={image ? image.node.childImageSharp.twitter.src : null}\r\n          />\r\n          <Header>\r\n            <h1\r\n              css={css`\r\n                grid-area: c;\r\n                text-align: center;\r\n                white-space: nowrap;\r\n              `}\r\n            >\r\n              <SketchTitle path={path} />{\" \"}\r\n            </h1>{\" \"}\r\n            <Icon\r\n              to={`/#sketch-${sketchTitle(path)}`}\r\n              label=\"Back to Index\"\r\n              icon=\"up\"\r\n            />\r\n            <Icon to={next && next.path} icon=\"left\" />\r\n            <Icon to={previous && previous.path} icon=\"right\" />\r\n          </Header>{\" \"}\r\n          <main>\r\n            <Sketch sketch={sketch} /> <SketchControls />\r\n            {description && (\r\n              <p\r\n                css={css`\r\n                  padding: var(--spacing);\r\n                `}\r\n              >\r\n                {description}{\" \"}\r\n              </p>\r\n            )}{\" \"}\r\n          </main>{\" \"}\r\n        </Layout>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nconst query = graphql`\r\n  query {\r\n    sketches: allSitePage(\r\n      filter: { path: { regex: \"/sketch/\" } }\r\n      sort: { fields: path, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          path\r\n        }\r\n        next {\r\n          path\r\n        }\r\n        previous {\r\n          path\r\n        }\r\n      }\r\n    }\r\n    images: allFile(\r\n      filter: { relativePath: { regex: \"/[0-9]{4}/\" }, ext: { nin: [\".js\"] } }\r\n      sort: { fields: relativePath, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          extension\r\n          childImageSharp {\r\n            twitter: resize(width: 1024) {\r\n              src\r\n            }\r\n            og: resize(width: 1200, height: 630, cropFocus: CENTER) {\r\n              src\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n// import \"p5.createloop\";\r\n\r\nconst sketch = function (p) {\r\n  const RENDER = p.getURLParams().render;\r\n  // const DURATION = 20;\r\n  const RATE = 30;\r\n\r\n  const colors = {\r\n    brown: \"#341C09\",\r\n    mustard: \"#F3A914\",\r\n    niceRed: \"#E34C43\"\r\n  }\r\n  let rotationSpeedSlider;\r\n  let rotationSpeedP;\r\n  let rotationSpeedSliderPanel = 0;\r\n  let rotationSpeedPPanel = 0;\r\n  let initialRotations = [0, 60, 120, 180, 240, 300];\r\n  let starRotation = 0;\r\n  let panelRotation = 0;\r\n  let size = 0;\r\n  let color1 = colors.mustard;\r\n  let color2 = colors.brown;\r\n  let color3 = colors.niceRed;\r\n  let colorPicker1;\r\n  let colorPicker2;\r\n  let colorPicker3;\r\n  let speed1;\r\n  let speed2;\r\n\r\n  const toSeconds = (value, decimals) => decimals ? (toFrameRate(value) * 60).toFixed(decimals) : toFrameRate(value) * 60\r\n  const toFrameRate = (value, decimals) => decimals ? (value / p.getFrameRate()).toFixed(decimals) : value / p.getFrameRate()\r\n  const getSpeedStats = (value) => `${value}speed ${toFrameRate(value,2)}°/frame  ${toSeconds(value,2)}°/s`\r\n\r\n  const backgroundSquare = (size, rotation, color = colors.purple) => {\r\n    p.push();\r\n    p.rectMode(p.CENTER);\r\n    p.rotate(rotation);\r\n    p.fill(color);\r\n    p.noStroke();\r\n    p.rect(0, 0, size, size);\r\n    p.pop();\r\n  };\r\n\r\n  const diamond = (angle, base, color, rotation) => {\r\n    p.push();\r\n    p.noStroke();\r\n    p.fill(color);\r\n    p.rotate(rotation);\r\n    p.quad(\r\n      0,\r\n      0,\r\n      0,\r\n      base * 2,\r\n      tangHeight(base, angle),\r\n      base * 3,\r\n      tangHeight(base, angle),\r\n      base\r\n    );\r\n    p.pop();\r\n  };\r\n\r\n  const rightPanel = (size, rotation = 0, color = colors.green) => {\r\n    panel(size, color, rotation, true);\r\n  };\r\n\r\n  const leftPanel = (size, rotation = 0, color = colors.orange) => {\r\n    panel(size, color, rotation);\r\n  };\r\n\r\n  const panel = (size, color, rotation, flip = false) => {\r\n    let altura = tangHeight(size / 2);\r\n    p.push();\r\n    p.rotate(rotation);\r\n    p.fill(color);\r\n    p.noStroke();\r\n    p.quad(\r\n      0,\r\n      0,\r\n\r\n      0,\r\n      size / 2,\r\n\r\n      flip ? size / 2 : size / -2,\r\n      size / 2,\r\n\r\n      flip ? size / 2 : size / -2,\r\n      -altura\r\n    );\r\n    p.pop();\r\n  };\r\n\r\n  const tangHeight = (base = height / 2, angle = 30) => {\r\n    let rad = p.radians(angle);\r\n    let tan = Math.tan(rad);\r\n    let altura = tan * base;\r\n    return altura;\r\n  };\r\n\r\n  p.setup = function () {\r\n    p.pixelDensity(RENDER ? 2 : 1);\r\n    p.frameRate(RATE);\r\n    p.background(255);\r\n    p.createCanvas(720, 720);\r\n    p.angleMode(p.DEGREES);\r\n\r\n    colorPicker2 = p.createColorPicker(color2);\r\n    colorPicker1 = p.createColorPicker(color1);\r\n    colorPicker3 = p.createColorPicker(color3);\r\n    colorPicker1.parent('sketch-controls');\r\n    colorPicker2.parent('sketch-controls');\r\n    colorPicker3.parent('sketch-controls');\r\n\r\n    rotationSpeedSlider = p.createSlider(-1, 1, 0.5, 0.0001);\r\n    rotationSpeedP = p.createP(`${rotationSpeedSlider.value()} rotation speed`)\r\n    rotationSpeedSlider.parent('sketch-controls');\r\n    rotationSpeedP.parent('sketch-controls');\r\n\r\n    rotationSpeedSliderPanel = p.createSlider(-1, 1, 0, 0.0001);\r\n    rotationSpeedPPanel = p.createP(`${rotationSpeedSliderPanel.value()} rotation speed`)\r\n    rotationSpeedSliderPanel.parent('sketch-controls');\r\n    rotationSpeedPPanel.parent('sketch-controls');\r\n\r\n    // p.createLoop(DURATION, {\r\n    //  gif: RENDER ? { render: false, open: true } : false,\r\n    //  noiseRadius: 0.1,\r\n    // });\r\n  };\r\n\r\n  p.draw = function () {\r\n    /** update colors */\r\n    color1 = colorPicker1.value()\r\n    color2 = colorPicker2.value()\r\n    color3 = colorPicker3.value()\r\n\r\n    /** update speed values */\r\n    speed1 = rotationSpeedSlider.value()\r\n    speed2 = rotationSpeedSliderPanel.value()\r\n\r\n\r\n    /** resize panels on background twices bigger than canvas */\r\n    size = p.height * 2\r\n\r\n    /** update texts */\r\n    rotationSpeedP.elt.innerText = getSpeedStats(speed1)\r\n    rotationSpeedPPanel.elt.innerText = getSpeedStats(speed2)\r\n\r\n    /** move everything on center of our canva */\r\n    p.translate(p.width / 2, p.height / 2);\r\n\r\n    /** create a square to keep rotate kinda background */\r\n    backgroundSquare(size, panelRotation, color1);\r\n\r\n    /** add our left/right panels*/\r\n    leftPanel(size, panelRotation, color3);\r\n    rightPanel(size, panelRotation, color2);\r\n\r\n\r\n    /** diamonds on center */\r\n    diamond(60, 60, color3, initialRotations[0] + starRotation);\r\n    diamond(60, 60, color2, initialRotations[1] + starRotation);\r\n    diamond(60, 60, color1, initialRotations[2] + starRotation);\r\n    diamond(60, 60, color3, initialRotations[3] + starRotation);\r\n    diamond(60, 60, color2, initialRotations[4] + starRotation);\r\n    diamond(60, 60, color1, initialRotations[5] + starRotation);\r\n\r\n    /** update speed every frame */\r\n    starRotation += speed1;\r\n    panelRotation += speed2;\r\n  };\r\n};\r\n\r\nexport default ({\r\n  location\r\n}) => ( <\r\n  SketchLayout sketch = {\r\n    sketch\r\n  }\r\n  path = {\r\n    location.pathname\r\n  }\r\n  description = \"it create illusions of squares when the diamonds cross the background with the same color\" / >\r\n);"],"sourceRoot":""}