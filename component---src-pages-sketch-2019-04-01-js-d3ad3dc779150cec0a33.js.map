{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/01.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","ellipseA","ellipseB","speedA","random","TWO_PI","speedB","speedStart","angleA","angleB","PI","angleStart","curves","setup","createCanvas","colorMode","HSL","width","height","draw","background","stroke","noFill","push","pointA","polarToCartesianEllipse","pointB","hue","map","sin","frameCount","start","polarToCartesian","end","length","shift","forEach","c","i","beginShape","vertex","bezierVertex","endShape","line","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-04-01-js-d3ad3dc779150cec0a33.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian, {\r\n  polarToCartesianEllipse,\r\n} from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const CURVE_COUNT = 100;\r\n\r\n  let ellipseA = [];\r\n  let ellipseB = [];\r\n  let speedA = p.random(0.1, 0.5) / p.TWO_PI;\r\n  let speedB = p.random(0.1, 0.5) / p.TWO_PI;\r\n  let speedStart = p.random(0.01, 0.05) / p.TWO_PI;\r\n  let angleA = 0;\r\n  let angleB = p.PI;\r\n  let angleStart = 0;\r\n  let curves = [];\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSL, 100);\r\n    ellipseA = [\r\n      p.random(p.width / 3, p.width / 2),\r\n      p.random(p.height / 3, p.height / 2),\r\n    ];\r\n    ellipseB = [\r\n      p.random(p.width / 3, p.width / 2),\r\n      p.random(p.height / 3, p.height / 2),\r\n    ];\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n    p.stroke(255);\r\n    p.noFill();\r\n\r\n    curves.push({\r\n      pointA: polarToCartesianEllipse(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        angleA,\r\n        ...ellipseA,\r\n        true\r\n      ),\r\n      pointB: polarToCartesianEllipse(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        angleB,\r\n        ...ellipseB,\r\n        true\r\n      ),\r\n      hue: p.map(p.sin(p.frameCount / 1000), -1, 1, 0, 100),\r\n    });\r\n\r\n    const start = polarToCartesian(\r\n      p.width / 2,\r\n      p.height / 2,\r\n      angleStart,\r\n      p.width * 0.4,\r\n      true\r\n    );\r\n    const end = polarToCartesian(\r\n      p.width / 2,\r\n      p.height / 2,\r\n      angleStart + p.PI,\r\n      p.width * 0.4,\r\n      true\r\n    );\r\n\r\n    if (curves.length > CURVE_COUNT) curves.shift();\r\n    curves.forEach((c, i) => {\r\n      p.stroke(c.hue, 50, 75, 100 * (i / CURVE_COUNT));\r\n      p.beginShape();\r\n      p.vertex(...start);\r\n      p.bezierVertex(...c.pointA, ...c.pointB, ...end);\r\n      p.endShape();\r\n      p.stroke(c.hue, 50, 50, 25);\r\n      p.line(...c.pointA, ...c.pointB);\r\n    });\r\n\r\n    angleA += speedA;\r\n    angleB -= speedB;\r\n    angleStart += speedStart;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}