{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/05.js","webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","SPEED","TWO_PI","innerSpeed","setup","createCanvas","background","noFill","strokeWeight","width","draw","thisFocalPoint","polarToCartesian","height","map","thisPoint","noise","frameCount","lerpLine","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","random","point","lerp"],"mappings":"6jBAKA,IAAMA,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAAaC,KAAcP,EAAEQ,OAC7BC,EAPU,EAOWT,EAAEQ,OAE3BR,EAAEU,MAAQ,WACRV,EAAEW,aAAa,IAAK,KACpBX,EAAEY,WAAW,KACbZ,EAAEa,SACFb,EAAEc,aAAa,IACfb,EAAiB,GAAVD,EAAEe,OAGXf,EAAEgB,KAAO,WACP,IAAMC,EAAiBC,YACrBlB,EAAEe,MAAQ,EACVf,EAAEmB,OAAS,EACXhB,EACAH,EAAEoB,IAAIjB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,EAAM,IACzC,GAGIoB,EAAYH,IAAgB,WAAhB,IACbD,GADa,QAEhBb,GACCD,EAAaH,EAAEQ,OACZR,EAAEoB,IAAIjB,EAAYH,EAAEQ,OAAmB,EAAXR,EAAEQ,OAAYP,EAAM,GAChDD,EAAEoB,IAAIjB,EAAY,EAAGH,EAAEQ,OAAQ,EAAGP,IACpCD,EAAEsB,MAAM,IAAM,IAAMtB,EAAEuB,WAAa,MACrC,KAEErB,GACFsB,IAAQ,WAAR,GAASxB,GAAT,SAAeqB,GAAf,EAA6BnB,GAA7B,CAAwCF,EAAEsB,MAAF,MAAAtB,EAAC,EAAUiB,OAErDf,EAAYmB,EAEZjB,GAAcK,GADdN,GAAcG,GAEc,EAAXN,EAAEQ,QAAYR,EAAEyB,WAItB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3B,OAAQA,EAAQ4B,KAAMD,EAASE,SAAUC,YAAY,O,kCCpDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB3B,IAzBU,SACvBqB,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,oCCHlB,aACb7C,EACA8C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWnB,KAAKoB,IAAIJ,EAAM,IAAOlD,EAAEuD,KAAKT,EAAIC,EAAIC,EAAIC,IAEjDO,EAAI,EAAGA,EAAI,EAAGA,GAAKH,GAChB,IAANG,GAAYL,KACXC,GAASpD,EAAEyD,SAAWD,IAAOJ,IAChCpD,EAAE0D,MAAM1D,EAAE2D,KAAKb,EAAIE,EAAIQ,GAAIxD,EAAE2D,KAAKZ,EAAIE,EAAIO","file":"component---src-pages-sketch-2019-05-05-js-92feba2625e94c7638f1.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\nimport lerpLine from \"~lib/lerpLine\";\r\n\r\nconst sketch = function(p) {\r\n  const SPEED = 1;\r\n\r\n  let size;\r\n  let prevPoint;\r\n  let outerAngle = 0;\r\n  let innerAngle = p.PI;\r\n  let outerSpeed = SPEED / 250 / p.TWO_PI;\r\n  let innerSpeed = SPEED / p.TWO_PI;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(255);\r\n    p.noFill();\r\n    p.strokeWeight(0.5);\r\n    size = p.width * 0.4;\r\n  };\r\n\r\n  p.draw = function() {\r\n    const thisFocalPoint = polarToCartesian(\r\n      p.width / 2,\r\n      p.height / 2,\r\n      outerAngle,\r\n      p.map(outerAngle, 0, p.TWO_PI * 2, size, 0),\r\n      true\r\n    );\r\n\r\n    const thisPoint = polarToCartesian(\r\n      ...thisFocalPoint,\r\n      innerAngle,\r\n      (outerAngle > p.TWO_PI\r\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\r\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\r\n        p.noise(0.01, 0.02, p.frameCount / 2000),\r\n      true\r\n    );\r\n    if (prevPoint) {\r\n      lerpLine(p, ...thisPoint, ...prevPoint, p.noise(...thisFocalPoint));\r\n    }\r\n    prevPoint = thisPoint;\r\n    outerAngle += outerSpeed;\r\n    innerAngle += innerSpeed;\r\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}