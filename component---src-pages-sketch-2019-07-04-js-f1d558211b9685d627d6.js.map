{"version":3,"sources":["webpack:///./src/pages/sketch/2019/07/04.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","count","margin","HUE","random","COLORS","Array","from","length","_","i","setup","frameRate","createLoop","FRAMES","createCanvas","width","strokeWeight","rectMode","RADIUS","colorMode","HSB","draw","blendMode","BLEND","background","noFill","HARD_LIGHT","a","map","frameCount","TWO_PI","d","sin","centerPoints","polarToCartesian","height","r","lerp","br","forEach","cp","j","stroke","x","y","square","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"0KAKMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EAJEC,EAAMH,EAAEI,OAAO,IACfC,EAASC,MAAMC,KAAK,CAAEC,OAFhB,IAE+B,SAACC,EAAGC,GAAJ,OAAUP,EAAO,GAAaO,KAKzEV,EAAEW,MAAQ,WACRX,EAAEY,UAAU,IAERZ,EAAEa,YACJb,EAAEa,WAAWC,IAEfd,EAAEe,aAAa,IAAK,KACpBd,EAAQD,EAAEgB,MAAQ,GAClBd,EAASF,EAAEgB,OAAS,EAAI,GACxBhB,EAAEiB,aAAa,GACfjB,EAAEkB,SAASlB,EAAEmB,QACbnB,EAAEoB,UAAUpB,EAAEqB,IAAK,MAGrBrB,EAAEsB,KAAO,WACPtB,EAAEuB,UAAUvB,EAAEwB,OACdxB,EAAEyB,WAAW,GAEbzB,EAAE0B,SACF1B,EAAEuB,UAAUvB,EAAE2B,YAcd,IAZA,IAAMC,EAAI5B,EAAE6B,IAAI7B,EAAE8B,WA7BL,IA6B0B,EA7B1B,IA6BqC,EAAG9B,EAAE+B,QACjDC,EAAIhC,EAAE6B,IAAI7B,EAAEiC,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAG5B,EAAEgB,MAAQ,EAAa,EAATd,GAElDgC,EAAe5B,MAAMC,KAAK,CAAEC,OAAQH,EAAOG,SAAU,SAACC,EAAGC,GAAJ,OACvDyB,YACEnC,EAAEgB,MAAQ,EACVhB,EAAEoC,OAAS,EACXR,EAAI5B,EAAE+B,QAAUrB,EAAIL,EAAOG,QAC3BwB,MAfc,WAmBTtB,GACP,IAAM2B,EAAIrC,EAAEsC,KAAK,GAAItC,EAAEgB,MAAQ,EAAId,EAAQQ,GACrC6B,EAAKvC,EAAE6B,IAAI7B,EAAEiC,IAAQ,EAAJL,IAAS,EAAG,EAAG,EAAGS,GAEzCH,EAAaM,SAAQ,SAACC,EAAIC,GACxB1C,EAAE2C,OAAOtC,EAAOqC,GAAI,GAAI,KACxB,IAAME,EAAI5C,EAAEsC,KAAKG,EAAGG,EAAG5C,EAAEgB,MAAQ,EAAGN,GAC9BmC,EAAI7C,EAAEsC,KAAKG,EAAGI,EAAG7C,EAAEoC,OAAS,EAAG1B,GACrCV,EAAE8C,OAAOF,EAAGC,EAAGR,EAAGE,OARb7B,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAIT,EAAQ,EAA/BS,KAcE,0BAAGqC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchD,OAAQA,EAAQiD,KAAMD,EAASE,SAAUC,YAAY,O,kCC9DrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKtB,IAAIoB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMnB,EAAIe,EAAUJ,KAAKC,IAAIH,GAASQ,EAChChB,EAAIe,EAAUL,KAAKtB,IAAIoB,GAASS,EACtC,OAAOC,EAAU,CAACnB,EAAGC,GAAK,CAAED,IAAGC,MAIlBV,IAzBU,SACvBwB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMnB,EAAIO,EAAkBQ,EAASN,EAAOC,GACtCT,EAAIY,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACnB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-07-04-js-f1d558211b9685d627d6.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n// import \"p5.createloop\";\r\n\r\nconst sketch = function(p) {\r\n  const FRAMES = 600;\r\n  const QTY = 4;\r\n  const HUE = p.random(100 / QTY);\r\n  const COLORS = Array.from({ length: QTY }, (_, i) => HUE + (100 / QTY) * i);\r\n\r\n  let count;\r\n  let margin;\r\n\r\n  p.setup = function() {\r\n    p.frameRate(30);\r\n\r\n    if (p.createLoop) {\r\n      p.createLoop(FRAMES / 30);\r\n    }\r\n    p.createCanvas(660, 840);\r\n    count = p.width / 50;\r\n    margin = p.width * (1 / 8);\r\n    p.strokeWeight(2);\r\n    p.rectMode(p.RADIUS);\r\n    p.colorMode(p.HSB, 100);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.blendMode(p.BLEND);\r\n    p.background(0);\r\n\r\n    p.noFill();\r\n    p.blendMode(p.HARD_LIGHT);\r\n\r\n    const a = p.map(p.frameCount % FRAMES, 0, FRAMES, 0, p.TWO_PI);\r\n    const d = p.map(p.sin(a * 3), -1, 1, 0, p.width / 2 - margin * 2);\r\n\r\n    let centerPoints = Array.from({ length: COLORS.length }, (_, i) =>\r\n      polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        a + p.TWO_PI * (i / COLORS.length),\r\n        d\r\n      )\r\n    );\r\n\r\n    for (let i = 0; i < 1; i += 1 / count) {\r\n      const r = p.lerp(10, p.width / 2 - margin, i);\r\n      const br = p.map(p.sin(a * 3), -1, 1, 0, r);\r\n\r\n      centerPoints.forEach((cp, j) => {\r\n        p.stroke(COLORS[j], 50, 100);\r\n        const x = p.lerp(cp.x, p.width / 2, i);\r\n        const y = p.lerp(cp.y, p.height / 2, i);\r\n        p.square(x, y, r, br);\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}