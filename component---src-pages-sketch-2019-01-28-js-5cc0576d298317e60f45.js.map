{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/28.js"],"names":["sketch","p","POINT_COUNT","points","drawAThing","x","y","sort","a","b","dist","vector","getFarthestPoint","color","stroke","line","setup","createCanvas","background","Array","fill","map","_","i","createVector","randomGaussian","width","height","draw","Y","floor","frameCount","X","xi","yi","noLoop","location","path","pathname","description"],"mappings":"mJAGMA,EAAS,SAASC,GACtB,IACMC,EAAc,GAChBC,EAAS,GAEb,SAASC,EAAWC,EAAGC,GAAI,IAAD,EAM1B,SAA0BD,EAAGC,GAM3B,OALAH,EAAOI,MACL,SAACC,EAAGC,GAAJ,OACER,EAAES,KAAKL,EAAGC,EAAGE,EAAEG,OAAON,EAAGG,EAAEG,OAAOL,GAClCL,EAAES,KAAKL,EAAGC,EAAGG,EAAEE,OAAON,EAAGI,EAAEE,OAAOL,MAE/BH,EAAOD,EAAc,GAXFU,CAAiBP,EAAGC,GAAtCK,EADgB,EAChBA,OAAQE,EADQ,EACRA,MAChBZ,EAAEa,OAAOD,EAAOA,EAAOA,EAAO,IAC9BZ,EAAEc,KAAKV,EAAGC,EAAGK,EAAON,EAAGM,EAAOL,GAYhCL,EAAEe,MAAQ,WACRf,EAAEgB,aAAa,IAAK,KACpBhB,EAAEiB,WAAW,KACbf,EAAS,IAAIgB,MAAMjB,GAAakB,OAAOC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CACpDZ,OAAQV,EAAEuB,aACRvB,EAAEwB,eAAexB,EAAEyB,MAAQ,EAAIzB,EAAEyB,MAxB1B,GAwB0C,GACjDzB,EAAEwB,eAAexB,EAAE0B,OAAS,EAAI1B,EAAE0B,OAzB3B,GAyB4C,IAErDd,MAAO,CAAC,IAAK,OAAa,GAAGU,EAAI,QAIrCtB,EAAE2B,KAAO,WACP,IAAMC,EAAI5B,EAAE6B,MAAM7B,EAAE8B,YAAc9B,EAAEyB,MAhCzB,KAiCLM,EAAI/B,EAAE6B,MAAM7B,EAAE8B,WAAc9B,EAAEyB,MAjCzB,GAiCyCG,GACpD,GAAIA,EAAI5B,EAAE0B,OAlCC,GAmCT,IAAK,IAAIM,EAAK,EAAGA,EAnCR,GAmCmBA,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EApCV,GAoCqBA,MACxBjC,EAAE8B,WAAa9B,EAAE6B,MArCd,GAqC2B,MAC9B1B,EAAW4B,EAAK/B,EAAEyB,MAtCf,GAsC+BO,EAAIJ,EAAK5B,EAAE0B,OAtC1C,GAsC2DO,QAIpEjC,EAAEkC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-01-28-js-5cc0576d298317e60f45.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n\r\nconst sketch = function(p) {\r\n  const GRID = 30;\r\n  const POINT_COUNT = 10;\r\n  let points = [];\r\n\r\n  function drawAThing(x, y) {\r\n    const { vector, color } = getFarthestPoint(x, y);\r\n    p.stroke(color, color, color, 32);\r\n    p.line(x, y, vector.x, vector.y);\r\n  }\r\n\r\n  function getFarthestPoint(x, y) {\r\n    points.sort(\r\n      (a, b) =>\r\n        p.dist(x, y, a.vector.x, a.vector.y) -\r\n        p.dist(x, y, b.vector.x, b.vector.y)\r\n    );\r\n    return points[POINT_COUNT - 1];\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(255);\r\n    points = new Array(POINT_COUNT).fill().map((_, i) => ({\r\n      vector: p.createVector(\r\n        p.randomGaussian(p.width / 2, (p.width / GRID) * 3),\r\n        p.randomGaussian(p.height / 2, (p.height / GRID) * 3)\r\n      ),\r\n      color: [255, 255 * 0.666, 0][i % 3],\r\n    }));\r\n  };\r\n\r\n  p.draw = function() {\r\n    const Y = p.floor(p.frameCount / (p.width / GRID));\r\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\r\n    if (Y < p.height / GRID) {\r\n      for (let xi = 0; xi < GRID; xi++) {\r\n        for (let yi = 0; yi < GRID; yi++) {\r\n          !(p.frameCount % p.floor(GRID / 13)) &&\r\n            drawAThing(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\r\n        }\r\n      }\r\n    } else {\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\r\n);\r\n"],"sourceRoot":""}