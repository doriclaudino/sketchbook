{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/21.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","r1Speed","r2Speed","r3Speed","r","g","b","CF","angle","abs","sin","cos","tan","PI","r1","r2","r3","getColor","setup","pixelDensity","createCanvas","background","random","TWO_PI","Array","from","Set","length","color","noStroke","blendMode","HARD_LIGHT","draw","translate","width","height","polarToCartesian","x","y","HANDLE","noLoop","fill","beginShape","vertex","quadraticVertex","endShape","CLOSE","location","path","pathname","description","polarToCartesianX","center","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"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","file":"component---src-pages-sketch-2019-02-21-js-a1e80daf73b74769699d.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const CF = [\r\n    angle => p.abs(p.sin(angle)) * 240,\r\n    angle => p.abs(p.cos(angle)) * 240,\r\n    angle => p.abs(p.tan(angle)) * 240,\r\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\r\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\r\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\r\n    angle => p.abs(p.sin(-angle)) * 240,\r\n    angle => p.abs(p.cos(-angle)) * 240,\r\n    angle => p.abs(p.tan(-angle)) * 240,\r\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\r\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\r\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\r\n  ];\r\n  let r1 = 0;\r\n  let r2 = 0;\r\n  let r3 = 0;\r\n  let r1Speed;\r\n  let r2Speed;\r\n  let r3Speed;\r\n  let r;\r\n  let g;\r\n  let b;\r\n  let getColor = () => {};\r\n\r\n  p.setup = function() {\r\n    p.pixelDensity(4);\r\n    p.createCanvas(660, 840);\r\n    p.background(0);\r\n    r1Speed = (p.random(0.05, 0.1) / p.TWO_PI) * p.random([-1, 1]);\r\n    r2Speed = (p.random(0.15, 0.25) / p.TWO_PI) * p.random([-1, 1]);\r\n    r3Speed = p.random(0.01, 0.015) / p.TWO_PI;\r\n    while (Array.from(new Set([r, g, b])).length < 3) {\r\n      r = p.random(CF);\r\n      g = p.random(CF);\r\n      b = p.random(CF);\r\n    }\r\n    getColor = angle => p.color(r(angle), g(angle), b(angle), 8);\r\n    p.noStroke();\r\n    p.blendMode(p.HARD_LIGHT);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.translate(p.width / 2, p.height * p.sin(r3));\r\n    const { x, y } = polarToCartesian(0, 0, r1, 200);\r\n    const HANDLE = polarToCartesian(x, y, r2, p.sin(r3) * 500);\r\n    if (p.height * p.sin(r3) < 0 && y < 0 && HANDLE.y < 0) {\r\n      p.noLoop();\r\n      return;\r\n    }\r\n    p.fill(getColor(r3 * 2));\r\n    p.beginShape();\r\n    p.vertex(0, 0);\r\n    p.quadraticVertex(HANDLE.x, HANDLE.y, x, y);\r\n    p.endShape(p.CLOSE);\r\n    r1 += r1Speed;\r\n    r2 += r2Speed;\r\n    r3 += r3Speed;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"Reload page for a different variation.\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}