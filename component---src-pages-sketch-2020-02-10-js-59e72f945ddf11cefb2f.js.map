{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/10.js"],"names":["sketch","p","lineSpace","theta","amp","wait","dx","speed","lineHeight","total","showDistances","settings","bgColor","color1","color2","canvasSize","p5","getSettings","setup","createCanvas","min","windowWidth","windowHeight","height","TWO_PI","setTimeout","createPanel","interval","setInterval","window","QuickSettings","clearInterval","create","document","querySelector","setDraggable","setCollapsible","addBoolean","x","addRange","windowResized","addColor","resizeCanvas","setRangeParameters","draw","background","noStroke","translate","width","textSize","centerOffset","bottom","top","i","cosx","cos","offsetX","map","getLinePoints","dcolor","dist","x1","y1","max","x2","y2","rmapcolor","color1Rgb","color","color2Rgb","lerpColor","fill","text","round","quad","cateto","radius","sqrt","pow","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-02-10-js-59e72f945ddf11cefb2f.js","sourcesContent":["import React from \"react\";\nimport SketchLayout from \"~components/sketch-layout\";\nimport p5 from \"p5\";\n// import \"p5.createloop\";\n\nconst sketch = function(p = new p5()) {\n  let lineSpace,\n    theta,\n    amp,\n    wait,\n    dx,\n    speed,\n    lineHeight,\n    total,\n    showDistances,\n    settings,\n    bgColor,\n    color1,\n    color2,\n    canvasSize;\n\n  p.getSettings = function() {\n    return settings;\n  };\n\n  p.setup = function() {\n    canvasSize = 1200;\n    p.createCanvas(\n      p.min(canvasSize, p.windowWidth),\n      p.min(canvasSize, p.windowHeight)\n    );\n    lineSpace = 2; //space between waves\n    lineHeight = 4;\n    theta = 0.0;\n    amp = p.height / 4; //amplitude of the wave, and radius of circle\n    wait = 500.0; //wave offset\n    speed = 0.01; //growth wave speed\n    dx = (p.TWO_PI / wait) * lineSpace;\n    total = (amp * 2) / (lineSpace + lineHeight);\n    showDistances = false;\n    bgColor = \"#000000\";\n    color1 = \"#ff0000\";\n    color2 = \"#1a42e6\";\n    setTimeout(() => {\n      createPanel();\n    }, 1000);\n  };\n\n  const createPanel = () => {\n    let interval = setInterval(() => {\n      if (window && window.QuickSettings) {\n        clearInterval(interval);\n        settings = QuickSettings.create(\n          50,\n          50,\n          \"playground\",\n          document.querySelector(\"#main > main\")\n        )\n          .setDraggable(true)\n          .setCollapsible(true)\n          .addBoolean(\"show_distances\", showDistances, x => (showDistances = x))\n          .addRange(\"canvas_size\", 1, p.windowWidth, canvasSize, 1, x => {\n            canvasSize = x;\n            p.windowResized();\n          })\n          .addRange(\n            \"line_space\",\n            0.01,\n            10,\n            lineSpace,\n            0.01,\n            x => (lineSpace = x)\n          )\n          .addRange(\n            \"line_height\",\n            0.01,\n            10,\n            lineHeight,\n            0.01,\n            x => (lineHeight = x)\n          )\n          .addRange(\"wave_wait\", 100, 10000, wait, 1, x => {\n            wait = x;\n            dx = (p.TWO_PI / wait) * lineSpace;\n          })\n          .addRange(\"speed\", 0.01, 3, speed, 0.01, x => (speed = x))\n          .addColor(\"bgColor\", bgColor, x => (bgColor = x))\n          .addColor(\"color1\", color1, x => (color1 = x))\n          .addColor(\"color2\", color2, x => (color2 = x));\n      }\n    }, 20);\n  };\n\n  p.windowResized = function() {\n    p.resizeCanvas(\n      p.min(canvasSize, p.windowWidth),\n      p.min(canvasSize, p.windowHeight)\n    );\n    settings.setRangeParameters(\"canvas_size\", 1, p.windowWidth, 1);\n  };\n\n  p.draw = function() {\n    amp = p.height / 4;\n    total = (amp * 2) / (lineSpace + lineHeight);\n    p.background(bgColor);\n    p.noStroke();\n    p.translate(p.width / 2, p.height / 2);\n    p.textSize(16);\n\n    theta += speed;\n    let x = theta;\n    let init = -amp; //init from top\n    let centerOffset = init;\n    let bottom = {};\n    let top = {};\n\n    for (let i = 0; i < total; i++) {\n      //here control the wave length in/out\n      let cosx = p.cos(x);\n      let offsetX = p.map(cosx, -1, 1, -amp * 2, 0);\n\n      //move or lines down/up\n      centerOffset = centerOffset + lineSpace;\n\n      //bottom points if we start from bottom\n      bottom = getLinePoints(amp, centerOffset);\n\n      //move to the next line or top points\n      centerOffset = centerOffset + lineHeight;\n\n      //top points if we start from bottom\n      top = getLinePoints(amp, centerOffset);\n\n      //get max dist\n      let dcolor = p.dist(\n        bottom.x1,\n        bottom.y1,\n        p.max(bottom.x1, bottom.x2 + offsetX),\n        bottom.y2\n      );\n      let rmapcolor = p.map(dcolor, 0, amp * 2, 0, 1);\n      let color1Rgb = p.color(color1);\n      let color2Rgb = p.color(color2);\n      let lerpColor = p.lerpColor(color1Rgb, color2Rgb, rmapcolor);\n      //more red, little green, more blue\n      p.fill(lerpColor);\n\n      //every second\n      if (showDistances && i % 2) p.text(p.round(dcolor), top.x2 + 30, top.y2);\n\n      p.quad(\n        bottom.x1,\n        bottom.y1,\n        top.x1,\n        top.y1,\n        top.x2,\n        top.y2,\n        p.max(bottom.x1, bottom.x2 + offsetX),\n        bottom.y2\n      );\n\n      //update delay\n      x += dx;\n    }\n  };\n\n  const getLinePoints = (amp, centerOffset) => ({\n    x1: -cateto(amp, centerOffset),\n    y1: -centerOffset,\n    x2: cateto(amp, centerOffset),\n    y2: -centerOffset,\n  });\n\n  //base on radius and cathetus height, we can find other cathetus, using triangle\n  const cateto = (radius, height) =>\n    p.sqrt(p.pow(radius, 2) - p.pow(height, 2));\n};\n\nexport default ({ location }) => (\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\n);\n"],"sourceRoot":""}