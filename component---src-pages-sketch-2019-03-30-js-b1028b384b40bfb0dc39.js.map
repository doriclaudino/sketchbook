{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/30.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","size","HUE","random","pixelColor","x","y","t","v","g","result","map","sin","TWO_PI","dist","width","height","noise","offset","pow","color","setup","createCanvas","pixelDensity","colorMode","HSB","blendMode","HARD_LIGHT","rectMode","CENTER","fill","draw","background","frameCount","stroke","point","noStroke","rect","location","path","pathname","description","href","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","polarToCartesian"],"mappings":"yLAKMA,EAAS,SAASC,GACtB,IAGIC,EAFEC,EAAMF,EAAEG,OAAO,EAAG,IAgBlBC,EAAa,SAASC,EAAGC,EAAGC,GAChC,IAboBC,EAAGC,EAajBC,GAbcF,EAclBR,EAAEW,IAAIX,EAAEY,IAAIZ,EAAEa,QAAUN,EAVb,SAASF,EAAGC,GACzB,OACEL,EACAD,EAAEc,KAAKT,EAAGC,EAAGN,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,GACrChB,EAAEiB,MAAMhB,EAAOI,EAAGJ,EAAOK,GAMGY,CAAOb,EAAGC,MAAO,EAAG,EAAG,EAAG,GAdjCG,EAerB,EAdKD,EAAI,GAAM,GAAMR,EAAEmB,IAAI,EAAIX,EAAGC,GAAK,EAAI,GAAMT,EAAEmB,IAAI,GAAK,EAAIX,GAAIC,IAgBtE,OAAOT,EAAEoB,MAAMlB,EAAMQ,EAAS,GAAKA,EAAU,EAAG,IAAMA,IAGxDV,EAAEqB,MAAQ,WAERrB,EAAEsB,aAAa,GAAqB,IACpCtB,EAAEuB,aAFoB,IAItBvB,EAAEwB,UAAUxB,EAAEyB,IAAK,KACnBzB,EAAE0B,UAAU1B,EAAE2B,YACd3B,EAAE4B,SAAS5B,EAAE6B,QAEb7B,EAAE8B,KAAK5B,EAAM,GAAI,GAAI,IAAK,IAC1BD,EAAOD,EAAEa,OAASb,EAAEgB,QAGtBhB,EAAE+B,KAAO,WACP/B,EAAEgC,WAAW,GAEb,IADA,IAAIzB,EAAM,GAAOP,EAAEiC,WAAa,GAxCnB,MAyCJ5B,EAAI,EAAGA,EAAIL,EAAEe,MAAOV,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAEgB,OAAQV,IAC5BN,EAAEkC,OAAO9B,EAAWC,EAAGC,EAAGC,IAC1BP,EAAEmC,MAAM9B,EAAGC,GAGfN,EAAEoC,WACFpC,EAAEqC,KAAKrC,EAAEe,MAAQ,EAAGf,EAAEgB,OAAS,EAAa,IAAVhB,EAAEe,MAAwB,IAAVf,EAAEe,SAIzC,0BAAGuB,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACEvC,OAAQA,EACRwC,KAAMD,EAASE,SACfC,YACE,6DAC+B,IAC7B,YAAC,IAAD,CAAMC,KAAK,gGAAX,iBAFF,S,kCC/DN,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKnC,IAAIiC,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMlD,EAAI8C,EAAUJ,KAAKC,IAAIH,GAASQ,EAChC/C,EAAI8C,EAAUL,KAAKnC,IAAIiC,GAASS,EACtC,OAAOC,EAAU,CAAClD,EAAGC,GAAK,CAAED,IAAGC,MAIlBkD,IAzBU,SACvBL,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMlD,EAAIsC,EAAkBQ,EAASN,EAAOC,GACtCxC,EAAI2C,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAAClD,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-30-js-b1028b384b40bfb0dc39.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\nimport Link from \"~components/link\";\r\n\r\nconst sketch = function(p) {\r\n  const FRAMES = 30;\r\n  const HUE = p.random(0, 50);\r\n\r\n  let size;\r\n\r\n  const ease = function(v, g) {\r\n    return v < 0.5 ? 0.5 * p.pow(2 * v, g) : 1 - 0.5 * p.pow(2 * (1 - v), g);\r\n  };\r\n\r\n  const offset = function(x, y) {\r\n    return (\r\n      size *\r\n      p.dist(x, y, p.width / 2, p.height / 2) *\r\n      p.noise(size * x, size * y)\r\n    );\r\n  };\r\n\r\n  const pixelColor = function(x, y, t) {\r\n    const result = ease(\r\n      p.map(p.sin(p.TWO_PI * (t + offset(x, y))), -1, 1, 0, 1),\r\n      5\r\n    );\r\n    return p.color(HUE * result, (80 * result) / 2, 100 * result);\r\n  };\r\n\r\n  p.setup = function() {\r\n    const PIXEL_DENSITY = 10;\r\n    p.createCanvas(660 / PIXEL_DENSITY, 840 / PIXEL_DENSITY);\r\n    p.pixelDensity(PIXEL_DENSITY);\r\n\r\n    p.colorMode(p.HSB, 100);\r\n    p.blendMode(p.HARD_LIGHT);\r\n    p.rectMode(p.CENTER);\r\n\r\n    p.fill(HUE + 50, 80, 100, 50);\r\n    size = p.TWO_PI / p.height;\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n    let t = ((1.0 * (p.frameCount - 1)) % FRAMES) / FRAMES;\r\n    for (let x = 0; x < p.width; x++) {\r\n      for (let y = 0; y < p.height; y++) {\r\n        p.stroke(pixelColor(x, y, t));\r\n        p.point(x, y);\r\n      }\r\n    }\r\n    p.noStroke();\r\n    p.rect(p.width / 2, p.height / 2, p.width * 0.75, p.width * 0.75);\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description={\r\n      <>\r\n        Time well spent playing with{\" \"}\r\n        <Link href=\"https://necessarydisorder.wordpress.com/2017/09/02/animated-stripes-gifs-from-scalar-fields/\">\r\n          this tutorial\r\n        </Link>\r\n        .\r\n      </>\r\n    }\r\n  />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}