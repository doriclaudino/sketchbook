{"version":3,"sources":["webpack:///./src/pages/sketch/2019/03/23.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","size","prevPoint","outerAngle","innerAngle","PI","outerSpeed","SPEED","TWO_PI","innerSpeed","hue","random","setup","createCanvas","background","noFill","strokeWeight","colorMode","HSB","width","draw","stroke","map","thisFocalPoint","polarToCartesian","height","thisPoint","noise","frameCount","line","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"mjBAIA,IAAMA,EAAS,SAASC,GACtB,IAEIC,EACAC,EACAC,EAAa,EACbC,EAAaJ,EAAEK,GACfC,EAAaC,KAAcP,EAAEQ,OAC7BC,EAPU,EAOWT,EAAEQ,OACvBE,EAAMV,EAAEW,OAAO,KAEnBX,EAAEY,MAAQ,WACRZ,EAAEa,aAAa,IAAK,KACpBb,EAAEc,WAAW,IACbd,EAAEe,SACFf,EAAEgB,aAAa,IACfhB,EAAEiB,UAAUjB,EAAEkB,KACdjB,EAAiB,GAAVD,EAAEmB,OAGXnB,EAAEoB,KAAO,WACPpB,EAAEqB,OAAOX,EAAKV,EAAEsB,IAAInB,EAAY,EAAc,EAAXH,EAAEQ,OAAY,EAAG,KAAM,KAE1D,IAAMe,EAAiBC,YACrBxB,EAAEmB,MAAQ,EACVnB,EAAEyB,OAAS,EACXtB,EACAH,EAAEsB,IAAInB,EAAY,EAAc,EAAXH,EAAEQ,OAAYP,EAAM,IACzC,GAGIyB,EAAYF,IAAgB,WAAhB,IACbD,GADa,QAEhBnB,GACCD,EAAaH,EAAEQ,OACZR,EAAEsB,IAAInB,EAAYH,EAAEQ,OAAmB,EAAXR,EAAEQ,OAAYP,EAAM,GAChDD,EAAEsB,IAAInB,EAAY,EAAGH,EAAEQ,OAAQ,EAAGP,IACpCD,EAAE2B,MAAM,IAAM,IAAM3B,EAAE4B,WAAa,MACrC,KAEE1B,GACFF,EAAE6B,KAAF,MAAA7B,EAAC,EAAS0B,GAAT,SAAuBxB,KAE1BA,EAAYwB,EAEZtB,GAAcK,GADdN,GAAcG,GAEc,EAAXN,EAAEQ,QAAYR,EAAE8B,WAItB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,SAAUC,YAAY,O,kCCvDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB1B,IAzBU,SACvBoB,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-03-23-js-3c2e8556661c2f92385b.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const SPEED = 1;\r\n\r\n  let size;\r\n  let prevPoint;\r\n  let outerAngle = 0;\r\n  let innerAngle = p.PI;\r\n  let outerSpeed = SPEED / 250 / p.TWO_PI;\r\n  let innerSpeed = SPEED / p.TWO_PI;\r\n  let hue = p.random(100);\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(64);\r\n    p.noFill();\r\n    p.strokeWeight(0.5);\r\n    p.colorMode(p.HSB);\r\n    size = p.width * 0.4;\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.stroke(hue, p.map(outerAngle, 0, p.TWO_PI * 2, 0, 100), 100);\r\n\r\n    const thisFocalPoint = polarToCartesian(\r\n      p.width / 2,\r\n      p.height / 2,\r\n      outerAngle,\r\n      p.map(outerAngle, 0, p.TWO_PI * 2, size, 0),\r\n      true\r\n    );\r\n\r\n    const thisPoint = polarToCartesian(\r\n      ...thisFocalPoint,\r\n      innerAngle,\r\n      (outerAngle > p.TWO_PI\r\n        ? p.map(outerAngle, p.TWO_PI, p.TWO_PI * 2, size, 0)\r\n        : p.map(outerAngle, 0, p.TWO_PI, 0, size)) *\r\n        p.noise(0.01, 0.02, p.frameCount / 2000),\r\n      true\r\n    );\r\n    if (prevPoint) {\r\n      p.line(...thisPoint, ...prevPoint);\r\n    }\r\n    prevPoint = thisPoint;\r\n    outerAngle += outerSpeed;\r\n    innerAngle += innerSpeed;\r\n    if (outerAngle > p.TWO_PI * 2) p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}