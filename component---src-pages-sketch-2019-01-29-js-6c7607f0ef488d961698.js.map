{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/29.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","drawing","lastPoints","guides","viewGuides","setup","createCanvas","createGraphics","width","height","background","noStroke","push","r","speed","random","TWO_PI","direction","HALF_PI","draw","frameRate","image","X0","polarToCartesianX","X1","Y1","sin","X2","Y2","Y3","leftHandleX","lerp","leftHandleY","rightHandleX","rightHandleY","stroke","strokeWeight","line","ellipse","i","length","frameCount","fill","beginShape","vertex","bezierVertex","X3","endShape","Y0","abs","PI","mousePressed","location","path","pathname","description","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian"],"mappings":"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","file":"component---src-pages-sketch-2019-01-29-js-6c7607f0ef488d961698.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport { polarToCartesianX } from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  let guides = [];\r\n  let viewGuides = false;\r\n  let drawing;\r\n  let lastPoints;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    drawing = p.createGraphics(p.width, p.height);\r\n    drawing.background(255);\r\n    drawing.noStroke();\r\n    guides.push({\r\n      r: 0,\r\n      speed: p.random(1.5) / p.TWO_PI,\r\n      direction: p.random([-1, 1]),\r\n    });\r\n    guides.push({\r\n      r: p.HALF_PI,\r\n      speed: p.random(0.5) / p.TWO_PI,\r\n      direction: -1,\r\n    });\r\n    guides.push({\r\n      r: 0,\r\n      speed: p.random(1.5) / p.TWO_PI,\r\n      direction: p.random([-1, 1]),\r\n    });\r\n    guides.push({\r\n      r: 0,\r\n      speed: p.random(0.5, 1.5) / p.TWO_PI,\r\n      direction: p.random([-1, 1]),\r\n    });\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.frameRate(viewGuides ? 15 : 60);\r\n    p.background(255);\r\n    p.image(drawing, 0, 0);\r\n    const X0 = polarToCartesianX(p.width / 2, guides[0].r, p.width / 2 - 100);\r\n    const Y0 = 0;\r\n    const X1 = p.width;\r\n    const Y1 = p.height / 2 + p.sin(guides[1].r) * (p.height / 2);\r\n    const X2 = polarToCartesianX(p.width / 2, guides[2].r, p.width / 2 - 100);\r\n    const Y2 = p.height;\r\n    const X3 = 0;\r\n    const Y3 = p.height / 2 + p.sin(guides[3].r) * (p.height / 2);\r\n    const leftHandleX = p.lerp(X3, X0, 0.5);\r\n    const leftHandleY = p.lerp(Y3, Y0, 0.5);\r\n    const rightHandleX = p.lerp(X1, X2, 0.5);\r\n    const rightHandleY = p.lerp(Y1, Y2, 0.5);\r\n    if (viewGuides) {\r\n      p.stroke(\"red\");\r\n      p.strokeWeight(1);\r\n      p.line(X1, Y1, X2, Y2);\r\n      p.line(X3, Y3, X0, Y0);\r\n      p.strokeWeight(6);\r\n      p.line(X1, Y1, X3, Y3);\r\n      p.line(X1, Y1, rightHandleX, rightHandleY);\r\n      p.line(X3, Y3, leftHandleX, leftHandleY);\r\n      p.ellipse(rightHandleX, rightHandleY, 12);\r\n      p.ellipse(leftHandleX, leftHandleY, 12);\r\n    }\r\n    for (let i = 0; i < guides.length; i++) {\r\n      guides[i].r += guides[i].speed * guides[i].direction;\r\n    }\r\n    if (p.frameCount > 1) {\r\n      drawing.fill(p.frameCount % 2 ? 255 : 0);\r\n      drawing.beginShape();\r\n      drawing.vertex(X1, Y1);\r\n      drawing.bezierVertex(\r\n        rightHandleX,\r\n        rightHandleY,\r\n        leftHandleX,\r\n        leftHandleY,\r\n        X3,\r\n        Y3\r\n      );\r\n      drawing.vertex(lastPoints.X3, lastPoints.Y3);\r\n      drawing.bezierVertex(\r\n        lastPoints.leftHandleX,\r\n        lastPoints.leftHandleY,\r\n        lastPoints.rightHandleX,\r\n        lastPoints.rightHandleY,\r\n        lastPoints.X1,\r\n        lastPoints.Y1\r\n      );\r\n      drawing.endShape();\r\n    }\r\n    lastPoints = {\r\n      X0,\r\n      Y0,\r\n      X1,\r\n      Y1,\r\n      X2,\r\n      Y2,\r\n      X3,\r\n      Y3,\r\n      rightHandleX,\r\n      rightHandleY,\r\n      leftHandleX,\r\n      leftHandleY,\r\n    };\r\n    if (p.abs(guides[1].r) > p.PI + p.PI / 2) {\r\n    }\r\n  };\r\n\r\n  p.mousePressed = function() {\r\n    viewGuides = !viewGuides;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"\r\n      Reload page for a different variation. Click or tap sketch to toggle guides.\"\r\n  />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}