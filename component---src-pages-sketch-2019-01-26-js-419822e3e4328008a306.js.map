{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/26.js"],"names":["sketch","p","points","drawPixel","x","y","C","sort","a","b","dist","vector","color","getNearestPoint","fill","rect","setup","createCanvas","background","Array","map","createVector","randomGaussian","width","height","i","Object","assign","noStroke","rectMode","CENTER","draw","Y","floor","frameCount","X","xi","yi","addNoise","noLoop","location","path","pathname"],"mappings":"6JAGMA,EAAS,SAASC,GACtB,IACIC,EAAS,GAEb,SAASC,EAAUC,EAAGC,GACpB,IAAMC,EAA4B,EAOpC,SAAyBF,EAAGC,GAM1B,OALAH,EAAOK,MACL,SAACC,EAAGC,GAAJ,OACER,EAAES,KAAKN,EAAGC,EAAGG,EAAEG,OAAOP,EAAGI,EAAEG,OAAON,GAClCJ,EAAES,KAAKN,EAAGC,EAAGI,EAAEE,OAAOP,EAAGK,EAAEE,OAAON,MAE/BH,EAAO,GAAGU,MAbPC,CAAgBT,EAAGC,GAC7BJ,EAAEa,KAAKR,EAAGA,EAAGA,EAAG,OAChBL,EAAEc,KAAKX,EAAGC,EAAG,EAAG,GAChBJ,EAAEa,KAAKR,GACPL,EAAEc,KAAKX,EAAGC,EAAG,EAAG,GAYlBJ,EAAEe,MAAQ,WACRf,EAAEgB,aAAa,IAAK,KACpBhB,EAAEiB,WAAW,KACbhB,EAAS,IAAIiB,MAAM,IAChBL,OACAM,KAAI,iBAAO,CACVT,OAAQV,EAAEoB,aACRpB,EAAEqB,eAAerB,EAAEsB,MAAQ,EAAItB,EAAEsB,MA3B5B,GA2B4C,GACjDtB,EAAEqB,eAAerB,EAAEuB,OAAS,EAAIvB,EAAEuB,OA5B7B,GA4B8C,QAGtDjB,MACC,SAACC,EAAGC,GAAJ,OACER,EAAES,KAAKT,EAAEsB,MAAQ,EAAGtB,EAAEuB,OAAS,EAAGhB,EAAEG,OAAOP,EAAGI,EAAEG,OAAON,GACvDJ,EAAES,KAAKT,EAAEsB,MAAQ,EAAGtB,EAAEuB,OAAS,EAAGf,EAAEE,OAAOP,EAAGK,EAAEE,OAAON,MAE1De,KAAI,SAACnB,EAAGwB,GAAJ,OAAUC,OAAOC,OAAO1B,EAAG,CAAEW,MAAOa,OAC3CxB,EAAE2B,WACF3B,EAAE4B,SAAS5B,EAAE6B,SAGf7B,EAAE8B,KAAO,WACP,IAAMC,EAAI/B,EAAEgC,MAAMhC,EAAEiC,YAAcjC,EAAEsB,MA1CzB,KA2CLY,EAAIlC,EAAEgC,MAAMhC,EAAEiC,WAAcjC,EAAEsB,MA3CzB,GA2CyCS,GACpD,GAAIA,EAAI/B,EAAEuB,OA5CC,GA6CT,IAAK,IAAIY,EAAK,EAAGA,EA7CR,GA6CmBA,IAC1B,IAAK,IAAIC,EAAK,EAAGA,EA9CV,GA8CqBA,IAC1BlC,EAAUgC,EAAKlC,EAAEsB,MA/CZ,GA+C4Ba,EAAIJ,EAAK/B,EAAEuB,OA/CvC,GA+CwDa,QAIjEC,SAAS,IACTrC,EAAEsC,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcxC,OAAQA,EAAQyC,KAAMD,EAASE","file":"component---src-pages-sketch-2019-01-26-js-419822e3e4328008a306.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n\r\nconst sketch = function(p) {\r\n  const GRID = 30;\r\n  let points = [];\r\n\r\n  function drawPixel(x, y) {\r\n    const C = getNearestPoint(x, y) * 4;\r\n    p.fill(C, C, C, 255 / 2);\r\n    p.rect(x, y, 2, 2);\r\n    p.fill(C);\r\n    p.rect(x, y, 1, 1);\r\n  }\r\n\r\n  function getNearestPoint(x, y) {\r\n    points.sort(\r\n      (a, b) =>\r\n        p.dist(x, y, a.vector.x, a.vector.y) -\r\n        p.dist(x, y, b.vector.x, b.vector.y)\r\n    );\r\n    return points[0].color;\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(255);\r\n    points = new Array(64)\r\n      .fill()\r\n      .map(() => ({\r\n        vector: p.createVector(\r\n          p.randomGaussian(p.width / 2, (p.width / GRID) * 3),\r\n          p.randomGaussian(p.height / 2, (p.height / GRID) * 3)\r\n        ),\r\n      }))\r\n      .sort(\r\n        (a, b) =>\r\n          p.dist(p.width / 2, p.height / 2, a.vector.x, a.vector.y) -\r\n          p.dist(p.width / 2, p.height / 2, b.vector.x, b.vector.y)\r\n      )\r\n      .map((p, i) => Object.assign(p, { color: i }));\r\n    p.noStroke();\r\n    p.rectMode(p.CENTER);\r\n  };\r\n\r\n  p.draw = function() {\r\n    const Y = p.floor(p.frameCount / (p.width / GRID));\r\n    const X = p.floor(p.frameCount - (p.width / GRID) * Y);\r\n    if (Y < p.height / GRID) {\r\n      for (let xi = 0; xi < GRID; xi++) {\r\n        for (let yi = 0; yi < GRID; yi++) {\r\n          drawPixel(X + (p.width / GRID) * xi, Y + (p.height / GRID) * yi);\r\n        }\r\n      }\r\n    } else {\r\n      addNoise(0.2);\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} />\r\n);\r\n"],"sourceRoot":""}