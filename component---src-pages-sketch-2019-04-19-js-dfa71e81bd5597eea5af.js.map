{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/19.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","t","setup","createCanvas","background","stroke","noFill","draw","translate","width","map","cos","frameCount","height","beginShape","i","TWO_PI","prevVertex","polarToCartesian","noise","curveVertex","endShape","PI","noLoop","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IAAIC,EAAI,EAGRD,EAAEE,MAAQ,WACRF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,WAAW,GACbJ,EAAEK,OAAO,IAAK,IACdL,EAAEM,UAGJN,EAAEO,KAAO,WACPP,EAAEQ,UACAR,EAAES,MAAQ,EACVT,EAAEU,IAAIV,EAAEW,IAAIX,EAAEY,WAAa,MAAQ,EAAG,EAAG,EAAGZ,EAAEa,SAEhDb,EAAEc,aAIF,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAEgB,OAAQD,GAAK,IAAM,CACvC,IAAIE,EAAaC,YACf,EACA,EACAH,EAAId,EACJD,EAAEU,IAAIV,EAAEmB,MAAMJ,EAAGd,GAAI,EAAG,EAAG,EAAGD,EAAES,QAChC,GAEFT,EAAEoB,YAAF,MAAApB,EAAC,EAAgBiB,IAEnBjB,EAAEqB,WACFpB,GAAK,KACLD,EAAEY,WAAa,IAAOZ,EAAEsB,IAAMtB,EAAEuB,WAIrB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAczB,OAAQA,EAAQ0B,KAAMD,EAASE,SAAUC,YAAY,O,kCCzCrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKrB,IAAImB,GAASC,GAE9BE,EAAoB,SAACJ,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKE,IAAIJ,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKrB,IAAImB,GAASQ,EAChCI,EAAIL,EAAUL,KAAKE,IAAIJ,GAASS,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBxB,IAzBU,SACvBkB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIb,EAAkBQ,EAASN,EAAOC,GACtCW,EAAIT,EAAkBI,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-19-js-dfa71e81bd5597eea5af.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  let t = 0;\r\n  let prevVertex;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(0);\r\n    p.stroke(255, 10);\r\n    p.noFill();\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.translate(\r\n      p.width / 2,\r\n      p.map(p.cos(p.frameCount / 1000), -1, 1, 0, p.height)\r\n    );\r\n    p.beginShape();\r\n    if (prevVertex) {\r\n      p.vertex(...prevVertex);\r\n    }\r\n    for (let i = 0; i < p.TWO_PI; i += 0.01) {\r\n      let prevVertex = polarToCartesian(\r\n        0,\r\n        0,\r\n        i + t,\r\n        p.map(p.noise(i, t), 0, 1, 0, p.width),\r\n        true\r\n      );\r\n      p.curveVertex(...prevVertex);\r\n    }\r\n    p.endShape();\r\n    t += 0.001;\r\n    p.frameCount / 1000 > p.PI && p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}