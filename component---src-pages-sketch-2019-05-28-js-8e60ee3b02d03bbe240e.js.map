{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/28.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","setup","createCanvas","noStroke","noFill","colorMode","HSB","draw","blendMode","BLEND","background","HARD_LIGHT","translate","width","height","rotate","HALF_PI","r","START","map","frameCount","DIST","sin","a","TWO_PI","polarToCartesian","x","y","strokeWeight","stroke","beginShape","vertex","endShape","CLOSE","location","path","pathname","description","polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray"],"mappings":"6FAAA,yDAIMA,EAAS,SAASC,GAItBA,EAAEC,MAAQ,WACRD,EAAEE,aAAa,IAAK,KACpBF,EAAEG,WACFH,EAAEI,SACFJ,EAAEK,UAAUL,EAAEM,IAAK,MAGrBN,EAAEO,KAAO,WACPP,EAAEQ,UAAUR,EAAES,OACdT,EAAEU,WAAW,KACbV,EAAEQ,UAAUR,EAAEW,YAEdX,EAAEY,UAAUZ,EAAEa,MAAQ,EAAGb,EAAEc,OAAS,GACpCd,EAAEe,OAAOf,EAAEgB,QAAU,GACrB,IAAK,IAAIC,EAAI,EAAGA,GAjBJ,GAiBgBA,IAU1B,IATA,IAAMC,EAAQlB,EAAEmB,IACdF,EACA,EApBQ,GAsBRjB,EAAEoB,WAAF,IACApB,EAAEoB,WAAF,KAEIC,EAAOrB,EAAEmB,IAAInB,EAAEsB,IAAItB,EAAEoB,WAAF,MAA+B,EAAG,EAAG,EAAG,GAExDG,EAAI,EAAIL,EAAOK,EAAIvB,EAAEwB,OAASN,EAAOK,GAAKvB,EAAEwB,OAASP,EAAG,CAAC,IAAD,EAC9CQ,YACfJ,EACAA,EACAE,EACAvB,EAAEmB,IAAIF,EAAG,EAhCH,GAgCa,EAAc,KAAXjB,EAAEc,SAJlBY,EADuD,EACvDA,EAAGC,EADoD,EACpDA,EAOX3B,EAAE4B,aAAa5B,EAAEmB,IAAIF,EAAG,EAnChB,GAmC0B,GAAI,IACtCjB,EAAE6B,OAAO7B,EAAEmB,IAAInB,EAAEsB,IAAIC,IAAK,EAAG,EAAG,EAAG,KAAM,GAAI,IAE7CvB,EAAE8B,aACF9B,EAAE+B,OAAOL,EAAGC,GACZ3B,EAAE+B,QAAQL,EAAGC,GACb3B,EAAE+B,QAAQL,GAAIC,GACd3B,EAAE+B,OAAOL,GAAIC,GACb3B,EAAEgC,SAAShC,EAAEiC,UAMN,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcnC,OAAQA,EAAQoC,KAAMD,EAASE,SAAUC,YAAY,O,kCCvDrE,0GAAMC,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKpB,IAAIkB,GAASC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAP,EACAQ,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMxB,EAAIoB,EAAUJ,KAAKC,IAAIH,GAASQ,EAChCrB,EAAIoB,EAAUL,KAAKpB,IAAIkB,GAASS,EACtC,OAAOC,EAAU,CAACxB,EAAGC,GAAK,CAAED,IAAGC,MAIlBF,IAzBU,SACvBqB,EACAC,EACAP,EACAC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMxB,EAAIY,EAAkBQ,EAASN,EAAOC,GACtCd,EAAIiB,EAAkBG,EAASP,EAAOC,GAC5C,OAAOS,EAAU,CAACxB,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-05-28-js-8e60ee3b02d03bbe240e.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const RINGS = 10;\r\n  const SPEED = 10;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.noStroke();\r\n    p.noFill();\r\n    p.colorMode(p.HSB, 100);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.blendMode(p.BLEND);\r\n    p.background(255);\r\n    p.blendMode(p.HARD_LIGHT);\r\n\r\n    p.translate(p.width / 2, p.height / 2);\r\n    p.rotate(p.HALF_PI / 2);\r\n    for (let r = 1; r <= RINGS; r++) {\r\n      const START = p.map(\r\n        r,\r\n        1,\r\n        RINGS,\r\n        p.frameCount / (SPEED * 10),\r\n        p.frameCount / (SPEED * 100)\r\n      );\r\n      const DIST = p.map(p.sin(p.frameCount / (SPEED * 50)), -1, 1, 4, 1);\r\n\r\n      for (let a = 0 + START; a < p.TWO_PI + START; a += p.TWO_PI / r) {\r\n        const { x, y } = polarToCartesian(\r\n          DIST,\r\n          DIST,\r\n          a,\r\n          p.map(r, 1, RINGS, 0, p.height * 0.666)\r\n        );\r\n\r\n        p.strokeWeight(p.map(r, 1, RINGS, 20, 0));\r\n        p.stroke(p.map(p.sin(a), -1, 1, 0, 100), 75, 50);\r\n\r\n        p.beginShape();\r\n        p.vertex(x, y);\r\n        p.vertex(-x, y);\r\n        p.vertex(-x, -y);\r\n        p.vertex(x, -y);\r\n        p.endShape(p.CLOSE);\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}