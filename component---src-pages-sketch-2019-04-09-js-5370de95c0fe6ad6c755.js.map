{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/09.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","radius","HUE","random","angle","setup","createCanvas","colorMode","HSB","noFill","dist","width","height","draw","background","r","TWO_PI","noise","frameCount","push","strokeWeight","stroke","map","cos","translate","rotate","start","polarToCartesian","end","bezier","pop","location","path","pathname","description","polarToCartesianX","center","distance","Math","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"ijBAIA,IAAMA,EAAS,SAASC,GACtB,IAIIC,EAJEC,EAAMF,EAAEG,OAAO,IAGjBC,EAAQ,EAGZJ,EAAEK,MAAQ,WACRL,EAAEM,aAAa,IAAK,KACpBN,EAAEO,UAAUP,EAAEQ,IAAK,KACnBR,EAAES,SAEFR,EAASD,EAAEU,KAAK,EAAG,EAAGV,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,IAGhDZ,EAAEa,KAAO,WACPb,EAAEc,WAAW,GAEb,IACE,IAAIC,EAAI,EACRA,EAAIf,EAAEgB,OACND,GAAKf,EAAEgB,QAAU,GAAKhB,EAAEiB,MAAM,IAAM,IAAMjB,EAAEkB,WAAa,MACzD,CACAlB,EAAEmB,OACFnB,EAAEoB,aAAa,IACfpB,EAAEqB,OAAOrB,EAAEsB,IAAItB,EAAEuB,IAAIR,IAAK,EAAG,EAAGb,EAAKA,EAAM,IAAK,IAAK,KACrDF,EAAEwB,UAAUxB,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,GACpCZ,EAAEyB,OAAOrB,GAET,IAAMsB,EAAQC,YAAiB,EAAG,EAAGZ,EAAGd,GAAQ,GAC1C2B,EAAM,CAACF,EAAM,IAAKA,EAAM,IAC9B1B,EAAE6B,OAAF,MAAA7B,EAAC,EAAW0B,GAAX,QAAkB,EAAG,EAAG,EAAG,GAAME,IAClC5B,EAAE8B,MAGJ,IACE,IAAIf,EAAI,EACRA,EAAIf,EAAEgB,OACND,GAAKf,EAAEgB,QAAU,GAAKhB,EAAEiB,MAAM,IAAM,IAAMjB,EAAEkB,WAAa,MACzD,CACAlB,EAAEmB,OACFnB,EAAEoB,aAAa,GACfpB,EAAEqB,OAAO,GACTrB,EAAEwB,UAAUxB,EAAEW,MAAQ,EAAGX,EAAEY,OAAS,GACpCZ,EAAEyB,QAAQrB,GAEV,IAAMsB,EAAQC,YAAiB,EAAG,EAAGZ,EAAGd,GAAQ,GAC1C2B,EAAM,CAACF,EAAM,IAAKA,EAAM,IAC9B1B,EAAE6B,OAAF,MAAA7B,EAAC,EACI0B,GADJ,SAEEzB,EAAS,GACTA,EAAS,EACVA,EAAS,EACTA,EAAS,GACN2B,IAEL5B,EAAE8B,MAEJ1B,GAxDY,OA4DD,0BAAG2B,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,SAAUC,YAAY,O,kCCnErE,0GAAMC,EAAoB,SAACC,EAAQhC,EAAOiC,GACxC,OAAOD,EAASE,KAAKf,IAAInB,GAASiC,GAE9BE,EAAoB,SAACH,EAAQhC,EAAOiC,GACxC,OAAOD,EAASE,KAAKE,IAAIpC,GAASiC,GAa9BI,EAA0B,SAC9BC,EACAC,EACAvC,EACAwC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKf,IAAInB,GAASwC,EAChCI,EAAIL,EAAUL,KAAKE,IAAIpC,GAASyC,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBrB,IAzBU,SACvBe,EACAC,EACAvC,EACAiC,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAAStC,EAAOiC,GACtCW,EAAIT,EAAkBI,EAASvC,EAAOiC,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-04-09-js-5370de95c0fe6ad6c755.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const HUE = p.random(50);\r\n  const SPEED = 0.001;\r\n\r\n  let angle = 0;\r\n  let radius;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, 100);\r\n    p.noFill();\r\n\r\n    radius = p.dist(0, 0, p.width / 2, p.height / 2);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n\r\n    for (\r\n      let r = 0;\r\n      r < p.TWO_PI;\r\n      r += p.TWO_PI / (50 * p.noise(0.08, 0.09, p.frameCount / 3000))\r\n    ) {\r\n      p.push();\r\n      p.strokeWeight(10);\r\n      p.stroke(p.map(p.cos(r), -1, 1, HUE, HUE + 20), 100, 100);\r\n      p.translate(p.width / 2, p.height / 2);\r\n      p.rotate(angle);\r\n\r\n      const start = polarToCartesian(0, 0, r, radius, true);\r\n      const end = [start[0], -start[1]];\r\n      p.bezier(...start, 0, 0, 0, 0, ...end);\r\n      p.pop();\r\n    }\r\n\r\n    for (\r\n      let r = 0;\r\n      r < p.TWO_PI;\r\n      r += p.TWO_PI / (50 * p.noise(0.06, 0.07, p.frameCount / 1000))\r\n    ) {\r\n      p.push();\r\n      p.strokeWeight(5);\r\n      p.stroke(0);\r\n      p.translate(p.width / 2, p.height / 2);\r\n      p.rotate(-angle);\r\n\r\n      const start = polarToCartesian(0, 0, r, radius, true);\r\n      const end = [start[0], -start[1]];\r\n      p.bezier(\r\n        ...start,\r\n        -radius / 2,\r\n        -radius / 2,\r\n        radius / 2,\r\n        radius / 2,\r\n        ...end\r\n      );\r\n      p.pop();\r\n    }\r\n    angle += SPEED;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}