{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/03/29.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","focus","minDist","SPEED","random","SPEED_A","TWO_PI","SPEED_B","angleA","angleB","PI","setup","createCanvas","background","createVector","randomGaussian","width","height","min","dist","draw","pointA","map","pointB","noise","frameCount","size","a","stroke","point","noLoop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,sfCXjC,IAAME,EAAS,SAASC,GACtB,IAKIC,EAGAC,EAPEC,EAAQH,EAAEI,OAAO,IAAM,IACvBC,EAAUF,EAAQH,EAAEM,OACpBC,EAAmB,GAARJ,EAAeH,EAAEM,OAG9BE,EAAS,EACTC,EAAST,EAAEU,GAGfV,EAAEW,MAAQ,WACRX,EAAEY,aAAa,IAAK,KACpBZ,EAAEa,WAAW,GACbZ,EAAQD,EAAEc,aACRd,EAAEe,eAAef,EAAEgB,MAAQ,EAAGhB,EAAEgB,MAAQ,IACxChB,EAAEe,eAAef,EAAEiB,OAAS,EAAGjB,EAAEiB,OAAS,KAE5Cf,EAAUF,EAAEkB,IACVlB,EAAEmB,KAAKlB,EAAML,EAAGK,EAAMJ,EAAGG,EAAEgB,MAAOhB,EAAEiB,QACpCjB,EAAEmB,KAAKlB,EAAML,EAAGK,EAAMJ,EAAG,EAAG,GAC5BG,EAAEmB,KAAKlB,EAAML,EAAGK,EAAMJ,EAAG,EAAGG,EAAEiB,QAC9BjB,EAAEmB,KAAKlB,EAAML,EAAGK,EAAMJ,EAAGG,EAAEgB,MAAO,KAItChB,EAAEoB,KAAO,WAkBP,IAjBA,IAAMC,EAAS,CACbrB,EAAEgB,MAAQ,EACVhB,EAAEsB,IAAItB,EAAEX,IAAImB,IAAU,EAAG,EAAc,IAAXR,EAAEiB,OAA0B,IAAXjB,EAAEiB,SAE3CM,EAASzB,IAAgB,WAAhB,EACVuB,EADU,QAEbZ,EACCT,EAAEgB,MAAQ,EAAKhB,EAAEwB,MAAM,KAAO,KAAOxB,EAAEyB,WAAa,QAEjDC,EAAO1B,EAAEsB,IACbtB,EAAEmB,KAAKI,EAAO3B,EAAG2B,EAAO1B,EAAGI,EAAML,EAAGK,EAAMJ,GAC1C,EACAK,EACA,EAvCS,IA2CFyB,EAAI,EAAGA,EAAI3B,EAAEM,OAAQqB,GAAK,GAAM3B,EAAEM,OACzCN,EAAE4B,OAAO,IAAK5B,EAAEsB,IAAII,EAAM,EA5CjB,GA4C0B,GAAI,IAAK,IAC5C1B,EAAE6B,MAAF,MAAA7B,EAAC,EACIF,YACDyB,EAAO3B,EACP2B,EAAO1B,EACP8B,EACA3B,EAAEe,eAAe,EAAGW,IACpB,KAMNjB,GAAUF,GADVC,GAAUH,GAGGL,EAAEM,SAAQE,EAAS,GAE5BC,EAAoB,EAAXT,EAAEM,QAAYN,EAAE8B,WAIlB,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAchC,OAAQA,EAAQiC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-03-29-js-a1e1a745efd49746b453.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const BLUR = 50;\r\n  const SPEED = p.random(0.05, 0.1);\r\n  const SPEED_A = SPEED / p.TWO_PI;\r\n  const SPEED_B = (SPEED * 0.1) / p.TWO_PI;\r\n\r\n  let focus;\r\n  let angleA = 0;\r\n  let angleB = p.PI;\r\n  let minDist;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(0);\r\n    focus = p.createVector(\r\n      p.randomGaussian(p.width / 2, p.width / 10),\r\n      p.randomGaussian(p.height / 2, p.height / 10)\r\n    );\r\n    minDist = p.min(\r\n      p.dist(focus.x, focus.y, p.width, p.height),\r\n      p.dist(focus.x, focus.y, 0, 0),\r\n      p.dist(focus.x, focus.y, 0, p.height),\r\n      p.dist(focus.x, focus.y, p.width, 0)\r\n    );\r\n  };\r\n\r\n  p.draw = function() {\r\n    const pointA = [\r\n      p.width / 2,\r\n      p.map(p.sin(angleA), -1, 1, p.height * 0.25, p.height * 0.75),\r\n    ];\r\n    const pointB = polarToCartesian(\r\n      ...pointA,\r\n      angleB,\r\n      (p.width / 2) * p.noise(0.001, 0.002, p.frameCount / 1000)\r\n    );\r\n    const size = p.map(\r\n      p.dist(pointB.x, pointB.y, focus.x, focus.y),\r\n      0,\r\n      minDist,\r\n      1,\r\n      BLUR\r\n    );\r\n\r\n    for (let a = 0; a < p.TWO_PI; a += 0.1 / p.TWO_PI) {\r\n      p.stroke(255, p.map(size, 1, BLUR, 10, 0.5, true));\r\n      p.point(\r\n        ...polarToCartesian(\r\n          pointB.x,\r\n          pointB.y,\r\n          a,\r\n          p.randomGaussian(1, size),\r\n          true\r\n        )\r\n      );\r\n    }\r\n\r\n    angleA += SPEED_A;\r\n    angleB += SPEED_B;\r\n\r\n    if (angleA > p.TWO_PI) angleA = 0;\r\n\r\n    if (angleB > p.TWO_PI * 2) p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}