{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/02.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","drawing","dark","lastPoints","rOpt","gOpt","bOpt","aOpt","guides","viewGuides","drawingComplete","colorFunctions","angle","abs","sin","cos","tan","PI","setup","createCanvas","random","createGraphics","width","height","background","stroke","strokeWeight","line","blendMode","DARKEST","LIGHTEST","noStroke","Array","from","Set","length","i","push","r","HALF_PI","speed","TWO_PI","direction","sort","a","b","draw","image","X0","polarToCartesianX","X1","Y1","X2","Y2","Y3","leftHandleX","lerp","leftHandleY","rightHandleX","rightHandleY","ellipse","frameCount","fill","beginShape","vertex","bezierVertex","X3","endShape","Y0","noLoop","mousePressed","redraw","location","path","pathname","description","center","distance","Math","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian"],"mappings":"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","file":"component---src-pages-sketch-2019-02-02-js-346487f946f947038c2d.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport { polarToCartesianX } from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  let guides = [];\r\n  let viewGuides = false;\r\n  let drawing;\r\n  let dark;\r\n  let lastPoints;\r\n  let rOpt;\r\n  let gOpt;\r\n  let bOpt;\r\n  let aOpt;\r\n  let drawingComplete = false;\r\n  const colorFunctions = [\r\n    angle => p.abs(p.sin(angle)) * 240,\r\n    angle => p.abs(p.cos(angle)) * 240,\r\n    angle => p.abs(p.tan(angle)) * 240,\r\n    angle => p.abs(p.sin(angle + p.PI)) * 240,\r\n    angle => p.abs(p.cos(angle + p.PI)) * 240,\r\n    angle => p.abs(p.tan(angle + p.PI)) * 240,\r\n    angle => p.abs(p.sin(-angle)) * 240,\r\n    angle => p.abs(p.cos(-angle)) * 240,\r\n    angle => p.abs(p.tan(-angle)) * 240,\r\n    angle => p.abs(p.sin(-angle + p.PI)) * 240,\r\n    angle => p.abs(p.cos(-angle + p.PI)) * 240,\r\n    angle => p.abs(p.tan(-angle + p.PI)) * 240,\r\n  ];\r\n\r\n  function setFill(a) {\r\n    drawing.fill(rOpt(a), gOpt(a), bOpt(a), aOpt(a * 3));\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    dark = p.random([0, 1]);\r\n    drawing = p.createGraphics(p.width, p.height);\r\n    drawing.background(dark ? 0 : 255);\r\n    drawing.stroke(dark ? 255 : 0);\r\n    drawing.strokeWeight(100);\r\n    drawing.line(p.width * 0.25, 150, p.width * 0.25, p.height - 150);\r\n    drawing.line(p.width * 0.5, 150, p.width * 0.5, p.height - 150);\r\n    drawing.line(p.width * 0.75, 150, p.width * 0.75, p.height - 150);\r\n    drawing.blendMode(dark ? p.DARKEST : p.LIGHTEST);\r\n    drawing.noStroke();\r\n    while (Array.from(new Set([rOpt, gOpt, bOpt, aOpt])).length < 4) {\r\n      rOpt = p.random(colorFunctions);\r\n      gOpt = p.random(colorFunctions);\r\n      bOpt = p.random(colorFunctions);\r\n      aOpt = p.random(colorFunctions);\r\n    }\r\n    for (let i = 0; i < 4; i++) {\r\n      guides.push({\r\n        r: p.HALF_PI * i,\r\n        speed: p.random(0.01, (2 - i / 2) * 0.1) / p.TWO_PI,\r\n        direction: p.random([-1, 1]),\r\n      });\r\n    }\r\n    guides.sort((a, b) => a.r - b.r);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(255);\r\n    p.image(drawing, 0, 0);\r\n    const X0 = polarToCartesianX(p.width / 2, guides[0].r, p.width / 2);\r\n    const Y0 = 0;\r\n    const X1 = p.width;\r\n    const Y1 = p.height / 2 + p.sin(guides[1].r) * (p.height / 2);\r\n    const X2 = polarToCartesianX(p.width / 2, guides[2].r, p.width / 2);\r\n    const Y2 = p.height;\r\n    const X3 = 0;\r\n    const Y3 = p.height / 2 + p.sin(guides[3].r) * (p.height / 2);\r\n    const leftHandleX = p.lerp(X3, X0, 0.2);\r\n    const leftHandleY = p.lerp(Y3, Y0, 0.2);\r\n    const rightHandleX = p.lerp(X1, X2, 0.2);\r\n    const rightHandleY = p.lerp(Y1, Y2, 0.2);\r\n    if (viewGuides) {\r\n      p.stroke(\"red\");\r\n      p.strokeWeight(1);\r\n      p.line(X1, Y1, X2, Y2);\r\n      p.line(X3, Y3, X0, Y0);\r\n      p.strokeWeight(6);\r\n      p.line(X1, Y1, X3, Y3);\r\n      p.line(X1, Y1, rightHandleX, rightHandleY);\r\n      p.line(X3, Y3, leftHandleX, leftHandleY);\r\n      p.ellipse(rightHandleX, rightHandleY, 12);\r\n      p.ellipse(leftHandleX, leftHandleY, 12);\r\n    }\r\n    for (let i = 0; i < guides.length; i++) {\r\n      guides[i].r += guides[i].speed * guides[i].direction;\r\n    }\r\n    if (p.frameCount > 1) {\r\n      setFill(guides[0].r);\r\n      drawing.beginShape();\r\n      drawing.vertex(X1, Y1);\r\n      drawing.bezierVertex(\r\n        rightHandleX,\r\n        rightHandleY,\r\n        leftHandleX,\r\n        leftHandleY,\r\n        X3,\r\n        Y3\r\n      );\r\n      drawing.vertex(lastPoints.X3, lastPoints.Y3);\r\n      drawing.bezierVertex(\r\n        lastPoints.leftHandleX,\r\n        lastPoints.leftHandleY,\r\n        lastPoints.rightHandleX,\r\n        lastPoints.rightHandleY,\r\n        lastPoints.X1,\r\n        lastPoints.Y1\r\n      );\r\n      drawing.endShape();\r\n    }\r\n    lastPoints = {\r\n      X0,\r\n      Y0,\r\n      X1,\r\n      Y1,\r\n      X2,\r\n      Y2,\r\n      X3,\r\n      Y3,\r\n      rightHandleX,\r\n      rightHandleY,\r\n      leftHandleX,\r\n      leftHandleY,\r\n    };\r\n    if (\r\n      p.abs(guides[1].r) > p.TWO_PI * 3 &&\r\n      p.abs(guides[3].r) > p.TWO_PI * 3\r\n    ) {\r\n      p.noLoop();\r\n      drawingComplete = true;\r\n    }\r\n  };\r\n\r\n  p.mousePressed = function() {\r\n    viewGuides = !viewGuides;\r\n    if (drawingComplete) p.redraw();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Reload page for a different variation. Click or tap sketch to toggle guides.\"\r\n  />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}