{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/11.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","background","stroke","strokeWeight","noFill","initPoints","Array","from","a","random","TWO_PI","d","width","angle","concat","map","draw","curve","polarToCartesian","height","frameCount","length","noLoop","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"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","file":"component---src-pages-sketch-2019-06-11-js-d238584710de5d19654a.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const STEPS = 5;\r\n\r\n  let points = [];\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.background(0);\r\n    p.stroke(255);\r\n    p.strokeWeight(5);\r\n    p.noFill();\r\n\r\n    const initPoints = Array.from(Array(4), () => ({\r\n      a: p.random(p.TWO_PI),\r\n      d: p.random(p.width / 4, p.width * 0.45),\r\n    }));\r\n\r\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\r\n      points = points.concat(\r\n        initPoints.map(({ a, d }) => ({ a: a + angle, d }))\r\n      );\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.curve(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[p.frameCount].a,\r\n        points[p.frameCount].d,\r\n        true\r\n      ),\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[p.frameCount + 1].a,\r\n        points[p.frameCount + 1].d,\r\n        true\r\n      ),\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[p.frameCount + 2].a,\r\n        points[p.frameCount + 2].d,\r\n        true\r\n      ),\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[p.frameCount + 3].a,\r\n        points[p.frameCount + 3].d,\r\n        true\r\n      )\r\n    );\r\n    if (p.frameCount === points.length - 4) {\r\n      p.curve(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[p.frameCount + 1].a,\r\n          points[p.frameCount + 1].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[p.frameCount + 2].a,\r\n          points[p.frameCount + 2].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[p.frameCount + 3].a,\r\n          points[p.frameCount + 3].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[0].a,\r\n          points[0].d,\r\n          true\r\n        )\r\n      );\r\n      p.curve(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[p.frameCount + 2].a,\r\n          points[p.frameCount + 2].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[p.frameCount + 3].a,\r\n          points[p.frameCount + 3].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[0].a,\r\n          points[0].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[1].a,\r\n          points[1].d,\r\n          true\r\n        )\r\n      );\r\n      p.curve(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[p.frameCount + 3].a,\r\n          points[p.frameCount + 3].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[0].a,\r\n          points[0].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[1].a,\r\n          points[1].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[2].a,\r\n          points[2].d,\r\n          true\r\n        )\r\n      );\r\n      p.curve(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[0].a,\r\n          points[0].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[1].a,\r\n          points[1].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[2].a,\r\n          points[2].d,\r\n          true\r\n        ),\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          points[3].a,\r\n          points[3].d,\r\n          true\r\n        )\r\n      );\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Reload page for a different variation.\"\r\n  />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}