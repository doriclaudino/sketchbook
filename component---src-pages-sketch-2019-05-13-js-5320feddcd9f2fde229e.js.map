{"version":3,"sources":["webpack:///./src/pages/sketch/2019/05/13.js","webpack:///./src/lib/lerpLine.js"],"names":["sketch","p","hue","random","y","setup","createCanvas","colorMode","HSB","blendMode","LIGHTEST","background","strokeWeight","draw","NOISE","noise","frameCount","stroke","lerpLine","width","height","noLoop","location","path","pathname","description","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","Math","max","dist","l","point","lerp"],"mappings":"6FAAA,yDAIMA,EAAS,SAASC,GACtB,IAAIC,EAAMD,EAAEE,OAAO,IACfC,EAAI,EAERH,EAAEI,MAAQ,WACRJ,EAAEK,aAAa,IAAK,KACpBL,EAAEM,UAAUN,EAAEO,IAAK,KACnBP,EAAEQ,UAAUR,EAAES,UACdT,EAAEU,WAAWT,EAAK,GAAI,IACtBD,EAAEW,aAAa,IAGjBX,EAAEY,KAAO,WACP,IAAMC,EAAQb,EAAEc,MAAMd,EAAEe,WAAad,EAAKE,EAAIF,GAAO,EACrDD,EAAEgB,OAAOf,GAAQD,EAAEe,WAAa,EAAK,GAAI,GAAI,GAAI,IAEjDE,YAASjB,EAAGA,EAAEkB,MAAQ,EAAGf,EAAa,IAAVH,EAAEkB,MAAcf,EAAGU,GAAO,GACtDI,YAASjB,EAAGA,EAAEkB,MAAQ,EAAGf,EAAa,IAAVH,EAAEkB,MAAcf,EAAGU,GAAO,GACtDI,YACEjB,EACAA,EAAEkB,MAAQ,EACVlB,EAAEmB,OAAShB,EACD,IAAVH,EAAEkB,MACFlB,EAAEmB,OAAShB,EACXU,GACA,GAEFI,YACEjB,EACAA,EAAEkB,MAAQ,EACVlB,EAAEmB,OAAShB,EACD,IAAVH,EAAEkB,MACFlB,EAAEmB,OAAShB,EACXU,GACA,GAEFI,YAASjB,EAAG,EAAGG,EAAa,IAAVH,EAAEkB,MAAcf,EAAGU,GAAO,GAC5CI,YAASjB,EAAGA,EAAEkB,MAAOf,EAAa,IAAVH,EAAEkB,MAAcf,EAAGU,GAAO,GAClDI,YAASjB,EAAG,EAAGA,EAAEmB,OAAShB,EAAa,IAAVH,EAAEkB,MAAclB,EAAEmB,OAAShB,EAAGU,GAAO,GAClEI,YACEjB,EACAA,EAAEkB,MACFlB,EAAEmB,OAAShB,EACD,IAAVH,EAAEkB,MACFlB,EAAEmB,OAAShB,EACXU,GACA,IAGFV,GAAK,GACGH,EAAEmB,OAAS,GACjBnB,EAAEoB,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAActB,OAAQA,EAAQuB,KAAMD,EAASE,SAAUC,YAAY,O,oCCjDtD,aACbxB,EACAyB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,QACA,IAFAD,OAAe,QAEf,IADAC,OAAQ,GAIR,IAFA,IAAMC,EAAWC,KAAKC,IAAIL,EAAM,IAAO7B,EAAEmC,KAAKV,EAAIC,EAAIC,EAAIC,IAEjDQ,EAAI,EAAGA,EAAI,EAAGA,GAAKJ,GAChB,IAANI,GAAYN,KACXC,GAAS/B,EAAEE,SAAWkC,IAAOL,IAChC/B,EAAEqC,MAAMrC,EAAEsC,KAAKb,EAAIE,EAAIS,GAAIpC,EAAEsC,KAAKZ,EAAIE,EAAIQ","file":"component---src-pages-sketch-2019-05-13-js-5320feddcd9f2fde229e.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport lerpLine from \"~lib/lerpLine\";\r\n\r\nconst sketch = function(p) {\r\n  let hue = p.random(33);\r\n  let y = 0;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, 100);\r\n    p.blendMode(p.LIGHTEST);\r\n    p.background(hue, 25, 25);\r\n    p.strokeWeight(6);\r\n  };\r\n\r\n  p.draw = function() {\r\n    const NOISE = p.noise(p.frameCount / hue, y / hue) / 5;\r\n    p.stroke(hue * ((p.frameCount % 3) + 1), 90, 75, 75);\r\n\r\n    lerpLine(p, p.width / 2, y, p.width * 0.75, y, NOISE, false);\r\n    lerpLine(p, p.width / 2, y, p.width * 0.25, y, NOISE, false);\r\n    lerpLine(\r\n      p,\r\n      p.width / 2,\r\n      p.height - y,\r\n      p.width * 0.75,\r\n      p.height - y,\r\n      NOISE,\r\n      false\r\n    );\r\n    lerpLine(\r\n      p,\r\n      p.width / 2,\r\n      p.height - y,\r\n      p.width * 0.25,\r\n      p.height - y,\r\n      NOISE,\r\n      false\r\n    );\r\n    lerpLine(p, 0, y, p.width * 0.25, y, NOISE, false);\r\n    lerpLine(p, p.width, y, p.width * 0.75, y, NOISE, false);\r\n    lerpLine(p, 0, p.height - y, p.width * 0.25, p.height - y, NOISE, false);\r\n    lerpLine(\r\n      p,\r\n      p.width,\r\n      p.height - y,\r\n      p.width * 0.75,\r\n      p.height - y,\r\n      NOISE,\r\n      false\r\n    );\r\n\r\n    y += 2;\r\n    if (y > p.height / 2) {\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n"],"sourceRoot":""}