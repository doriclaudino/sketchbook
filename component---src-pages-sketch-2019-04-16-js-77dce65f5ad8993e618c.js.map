{"version":3,"sources":["webpack:///./src/pages/sketch/2019/04/16.js"],"names":["sketch","p","w","h","GRID_SIZE","SIZES","LINES","grid","Doodad","x","y","size","this","lines","arc","push","strokeCap","PROJECT","translate","rotate","random","HALF_PI","PI","i","pop","setup","createCanvas","colorMode","HSB","hue","background","stroke","strokeWeight","noFill","floor","width","height","xx","yy","visited","draw","concat","filter","overlap","Math","max","s","length","noLoop","location","path","pathname","description"],"mappings":"uiBAGA,IAAMA,EAAS,SAASC,GACtB,IAKIC,EACAC,EANEC,EAAY,GACZC,EAAQ,CAAC,EAAG,EAAG,EAAG,GAClBC,EAAQ,EAEVC,EAAO,GAILC,EATmB,WAUvB,WAAYC,EAAGC,EAAGC,GAChBC,KAAKH,EAAIA,EAAIL,EACbQ,KAAKF,EAAIA,EAAIN,EACbQ,KAAKD,KAAOA,EAAOP,EACnBQ,KAAKC,MAAQF,EAAOL,EAEpBM,KAAKE,MAhBgB,mBAmBvBA,IAAA,WACEb,EAAEc,OACFd,EAAEe,UAAUf,EAAEgB,SACdhB,EAAEiB,UAAUN,KAAKH,EAAIG,KAAKD,KAAO,EAAGC,KAAKF,EAAIE,KAAKD,KAAO,GACzDV,EAAEkB,OAAOlB,EAAEmB,OAAO,CAAC,EAAGnB,EAAEoB,QAASpB,EAAEqB,GAAIrB,EAAEoB,QAAUpB,EAAEqB,MACrD,IAAK,IAAIC,EAAI,EAAGA,GAAiB,EAAZX,KAAKD,KAAUY,GAAkB,EAAZX,KAAKD,KAAYC,KAAKC,MAC9DZ,EAAEa,KAAKF,KAAKD,KAAO,GAAIC,KAAKD,KAAO,EAAGY,EAAGA,EAAG,EAAGtB,EAAEoB,SAEnDpB,EAAEuB,OA3BmB,KA+BzBvB,EAAEwB,MAAQ,WACRxB,EAAEyB,aAAa,IAAK,KACpBzB,EAAE0B,UAAU1B,EAAE2B,IAAK,KAEnB3B,EAAE0B,UAAU1B,EAAE2B,IAAK,KAEnB,IAAMC,EAAM5B,EAAEmB,OAAO,KACrBnB,EAAE6B,WAAWD,EAAK,GAAI,IACtB5B,EAAE8B,OAAOF,EAAK,GAAI,KAClB5B,EAAE+B,aAAa,GACf/B,EAAEgC,SAEF/B,EAAID,EAAEiC,MAAMjC,EAAEkC,MAAQ/B,GACtBD,EAAIF,EAAEiC,MAAMjC,EAAEmC,OAAShC,GAEvB,IAAK,IAAIiC,EAAK,EAAGA,EAAKnC,EAAGmC,IAAM,CAC7B9B,EAAKQ,KAAK,IACV,IAAK,IAAIuB,EAAK,EAAGA,EAAKnC,EAAGmC,IACvB/B,EAAK8B,GAAItB,KAAK,CACZN,EAAG4B,EACH3B,EAAG4B,EACHC,SAAS,MAMjBtC,EAAEuC,KAAO,WAAY,IAAD,MACDvC,EAAEmB,QACjB,MAAGqB,OAAH,QAAalC,GAAMmC,QAAO,qBAAGH,YADvB9B,EADU,EACVA,EAAGC,EADO,EACPA,EAINH,EAAKE,GAAGC,GAAG6B,SAAU,WACxB,IACII,EADAhC,EAAOiC,KAAKC,IAAL,MAAAD,KAAYvC,GAGvB,EAAG,CACDsC,GAAU,EACV,IAAK,IAAIN,EAAK5B,EAAG4B,EAAK1B,EAAOF,EAAG4B,IAC9B,IAAK,IAAIC,EAAK5B,EAAG4B,EAAK3B,EAAOD,EAAG4B,KAC1B7B,EAAIE,EAAOT,GAAKQ,EAAIC,EAAOR,GAAKI,EAAK8B,GAAIC,GAAIC,WAC/CI,GAAU,GAIZA,IACFhC,EAAOiC,KAAKC,IAAL,MAAAD,KAAI,EAAQvC,EAAMqC,QAAO,SAAAI,GAAC,OAAIA,EAAInC,cAEpCgC,GAET,IAAInC,EAAOC,EAAGC,EAAGC,GAEjB,IAAK,IAAI0B,EAAK5B,EAAG4B,EAAK1B,EAAOF,EAAG4B,IAC9B,IAAK,IAAIC,EAAK5B,EAAG4B,EAAK3B,EAAOD,EAAG4B,IAC9B/B,EAAK8B,GAAIC,GAAIC,SAAU,EAtBH,IA2BrB,MAAGE,OAAH,QAAalC,GAAMmC,QAAO,qBAAGH,WAAwBQ,QACxD9C,EAAE+C,WAKO,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcjD,OAAQA,EAAQkD,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-04-16-js-77dce65f5ad8993e618c.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n\r\nconst sketch = function(p) {\r\n  const GRID_SIZE = 15;\r\n  const SIZES = [1, 2, 3, 5];\r\n  const LINES = 2;\r\n\r\n  let grid = [];\r\n  let w;\r\n  let h;\r\n\r\n  class Doodad {\r\n    constructor(x, y, size) {\r\n      this.x = x * GRID_SIZE;\r\n      this.y = y * GRID_SIZE;\r\n      this.size = size * GRID_SIZE;\r\n      this.lines = size * LINES;\r\n\r\n      this.arc();\r\n    }\r\n\r\n    arc() {\r\n      p.push();\r\n      p.strokeCap(p.PROJECT);\r\n      p.translate(this.x + this.size / 2, this.y + this.size / 2);\r\n      p.rotate(p.random([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]));\r\n      for (let i = 0; i <= this.size * 2; i += (this.size * 2) / this.lines) {\r\n        p.arc(-this.size / 2, -this.size / 2, i, i, 0, p.HALF_PI);\r\n      }\r\n      p.pop();\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, 100);\r\n\r\n    p.colorMode(p.HSB, 100);\r\n\r\n    const hue = p.random(100);\r\n    p.background(hue, 25, 25);\r\n    p.stroke(hue, 75, 100);\r\n    p.strokeWeight(1);\r\n    p.noFill();\r\n\r\n    w = p.floor(p.width / GRID_SIZE);\r\n    h = p.floor(p.height / GRID_SIZE);\r\n\r\n    for (let xx = 0; xx < w; xx++) {\r\n      grid.push([]);\r\n      for (let yy = 0; yy < h; yy++) {\r\n        grid[xx].push({\r\n          x: xx,\r\n          y: yy,\r\n          visited: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    const { x, y } = p.random(\r\n      [].concat(...grid).filter(({ visited }) => !visited)\r\n    );\r\n\r\n    if (!grid[x][y].visited) {\r\n      let size = Math.max(...SIZES);\r\n      let overlap;\r\n\r\n      do {\r\n        overlap = false;\r\n        for (let xx = x; xx < size + x; xx++) {\r\n          for (let yy = y; yy < size + y; yy++) {\r\n            if (x + size > w || y + size > h || grid[xx][yy].visited) {\r\n              overlap = true;\r\n            }\r\n          }\r\n        }\r\n        if (overlap) {\r\n          size = Math.max(...SIZES.filter(s => s < size));\r\n        }\r\n      } while (overlap);\r\n\r\n      new Doodad(x, y, size);\r\n\r\n      for (let xx = x; xx < size + x; xx++) {\r\n        for (let yy = y; yy < size + y; yy++) {\r\n          grid[xx][yy].visited = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (![].concat(...grid).filter(({ visited }) => !visited).length) {\r\n      p.noLoop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}