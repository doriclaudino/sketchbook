{"version":3,"sources":["webpack:///./src/pages/sketch/2020/02/08.js"],"names":["sketch","p","rotationSpeedSlider","rotationSpeedP","colorPicker1","colorPicker2","colorPicker3","speed1","speed2","RENDER","getURLParams","render","colors","brown","mustard","niceRed","rotationSpeedSliderPanel","rotationSpeedPPanel","initialRotations","starRotation","panelRotation","size","color1","color2","color3","toFrameRate","value","decimals","getFrameRate","toFixed","getSpeedStats","toSeconds","diamond","angle","base","color","rotation","push","noStroke","fill","rotate","quad","tangHeight","pop","panel","flip","altura","height","rad","radians","Math","tan","setup","pixelDensity","frameRate","background","createCanvas","angleMode","DEGREES","createColorPicker","parent","createSlider","createP","draw","elt","innerText","translate","width","purple","rectMode","CENTER","rect","backgroundSquare","orange","leftPanel","green","rightPanel","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2020-02-08-js-e4df451c91aae98f6886.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n// import \"p5.createloop\";\r\n\r\nconst sketch = function(p) {\r\n  const RENDER = p.getURLParams().render;\r\n  // const DURATION = 20;\r\n  const RATE = 30;\r\n\r\n  const colors = {\r\n    brown: \"#341C09\",\r\n    mustard: \"#F3A914\",\r\n    niceRed: \"#E34C43\",\r\n  };\r\n  let rotationSpeedSlider;\r\n  let rotationSpeedP;\r\n  let rotationSpeedSliderPanel = 0;\r\n  let rotationSpeedPPanel = 0;\r\n  let initialRotations = [0, 60, 120, 180, 240, 300];\r\n  let starRotation = 0;\r\n  let panelRotation = 0;\r\n  let size = 0;\r\n  let color1 = colors.mustard;\r\n  let color2 = colors.brown;\r\n  let color3 = colors.niceRed;\r\n  let colorPicker1;\r\n  let colorPicker2;\r\n  let colorPicker3;\r\n  let speed1;\r\n  let speed2;\r\n\r\n  const toSeconds = (value, decimals) =>\r\n    decimals\r\n      ? (toFrameRate(value) * 60).toFixed(decimals)\r\n      : toFrameRate(value) * 60;\r\n  const toFrameRate = (value, decimals) =>\r\n    decimals\r\n      ? (value / p.getFrameRate()).toFixed(decimals)\r\n      : value / p.getFrameRate();\r\n  const getSpeedStats = value =>\r\n    `${value}speed ${toFrameRate(value, 2)}°/frame  ${toSeconds(value, 2)}°/s`;\r\n\r\n  const backgroundSquare = (size, rotation, color = colors.purple) => {\r\n    p.push();\r\n    p.rectMode(p.CENTER);\r\n    p.rotate(rotation);\r\n    p.fill(color);\r\n    p.noStroke();\r\n    p.rect(0, 0, size, size);\r\n    p.pop();\r\n  };\r\n\r\n  const diamond = (angle, base, color, rotation) => {\r\n    p.push();\r\n    p.noStroke();\r\n    p.fill(color);\r\n    p.rotate(rotation);\r\n    p.quad(\r\n      0,\r\n      0,\r\n      0,\r\n      base * 2,\r\n      tangHeight(base, angle),\r\n      base * 3,\r\n      tangHeight(base, angle),\r\n      base\r\n    );\r\n    p.pop();\r\n  };\r\n\r\n  const rightPanel = (size, rotation = 0, color = colors.green) => {\r\n    panel(size, color, rotation, true);\r\n  };\r\n\r\n  const leftPanel = (size, rotation = 0, color = colors.orange) => {\r\n    panel(size, color, rotation);\r\n  };\r\n\r\n  const panel = (size, color, rotation, flip = false) => {\r\n    let altura = tangHeight(size / 2);\r\n    p.push();\r\n    p.rotate(rotation);\r\n    p.fill(color);\r\n    p.noStroke();\r\n    p.quad(\r\n      0,\r\n      0,\r\n\r\n      0,\r\n      size / 2,\r\n\r\n      flip ? size / 2 : size / -2,\r\n      size / 2,\r\n\r\n      flip ? size / 2 : size / -2,\r\n      -altura\r\n    );\r\n    p.pop();\r\n  };\r\n\r\n  const tangHeight = (base = height / 2, angle = 30) => {\r\n    let rad = p.radians(angle);\r\n    let tan = Math.tan(rad);\r\n    let altura = tan * base;\r\n    return altura;\r\n  };\r\n\r\n  p.setup = function() {\r\n    p.pixelDensity(RENDER ? 2 : 1);\r\n    p.frameRate(RATE);\r\n    p.background(255);\r\n    p.createCanvas(720, 720);\r\n    p.angleMode(p.DEGREES);\r\n\r\n    colorPicker2 = p.createColorPicker(color2);\r\n    colorPicker1 = p.createColorPicker(color1);\r\n    colorPicker3 = p.createColorPicker(color3);\r\n    colorPicker1.parent(\"sketch-controls\");\r\n    colorPicker2.parent(\"sketch-controls\");\r\n    colorPicker3.parent(\"sketch-controls\");\r\n\r\n    rotationSpeedSlider = p.createSlider(-1, 1, 0.5, 0.0001);\r\n    rotationSpeedP = p.createP(`${rotationSpeedSlider.value()} rotation speed`);\r\n    rotationSpeedSlider.parent(\"sketch-controls\");\r\n    rotationSpeedP.parent(\"sketch-controls\");\r\n\r\n    rotationSpeedSliderPanel = p.createSlider(-1, 1, 0, 0.0001);\r\n    rotationSpeedPPanel = p.createP(\r\n      `${rotationSpeedSliderPanel.value()} rotation speed`\r\n    );\r\n    rotationSpeedSliderPanel.parent(\"sketch-controls\");\r\n    rotationSpeedPPanel.parent(\"sketch-controls\");\r\n\r\n    // p.createLoop(DURATION, {\r\n    //  gif: RENDER ? { render: false, open: true } : false,\r\n    //  noiseRadius: 0.1,\r\n    // });\r\n  };\r\n\r\n  p.draw = function() {\r\n    /** update colors */\r\n    color1 = colorPicker1.value();\r\n    color2 = colorPicker2.value();\r\n    color3 = colorPicker3.value();\r\n\r\n    /** update speed values */\r\n    speed1 = rotationSpeedSlider.value();\r\n    speed2 = rotationSpeedSliderPanel.value();\r\n\r\n    /** resize panels on background twices bigger than canvas */\r\n    size = p.height * 2;\r\n\r\n    /** update texts */\r\n    rotationSpeedP.elt.innerText = getSpeedStats(speed1);\r\n    rotationSpeedPPanel.elt.innerText = getSpeedStats(speed2);\r\n\r\n    /** move everything on center of our canva */\r\n    p.translate(p.width / 2, p.height / 2);\r\n\r\n    /** create a square to keep rotate kinda background */\r\n    backgroundSquare(size, panelRotation, color1);\r\n\r\n    /** add our left/right panels*/\r\n    leftPanel(size, panelRotation, color3);\r\n    rightPanel(size, panelRotation, color2);\r\n\r\n    /** diamonds on center */\r\n    diamond(60, 60, color3, initialRotations[0] + starRotation);\r\n    diamond(60, 60, color2, initialRotations[1] + starRotation);\r\n    diamond(60, 60, color1, initialRotations[2] + starRotation);\r\n    diamond(60, 60, color3, initialRotations[3] + starRotation);\r\n    diamond(60, 60, color2, initialRotations[4] + starRotation);\r\n    diamond(60, 60, color1, initialRotations[5] + starRotation);\r\n\r\n    /** update speed every frame */\r\n    starRotation += speed1;\r\n    panelRotation += speed2;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"it create illusions of squares when the diamonds cross the background with the same color\"\r\n  />\r\n);\r\n"],"sourceRoot":""}