{"version":3,"sources":["webpack:///./src/pages/sketch/2019/01/18.js"],"names":["sketch","p","drawing","lastPoint","circles","viewGuides","speeds","Array","fill","map","_","i","setup","createCanvas","createGraphics","width","height","THIS_SPEED","random","THIS_SIZE","filter","s","push","r","HALF_PI","speed","TWO_PI","size","direction","noFill","draw","background","frameRate","image","alpha","X0_AXIS","cos","Y0_AXIS","X0","Y0","sin","X1_AXIS","Y1_AXIS","X1","Y1","X2_AXIS","Y2_AXIS","X2","Y2","X3_AXIS","Y3_AXIS","X3","Y3","stroke","color","strokeWeight","ellipse","line","length","x1","y1","x2","y2","x3","y3","x4","y4","uA","uB","x","floor","y","frameCount","l","mousePressed","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-01-18-js-714ca3bacc29d65ef77d.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n\r\nconst sketch = function(p) {\r\n  let circleCount = 3;\r\n  let circles = [];\r\n  let viewGuides = false;\r\n  let drawing;\r\n  let speeds = new Array(10).fill().map((_, i) => (i + 1) / 10);\r\n  let lastPoint;\r\n\r\n  function guideColor(alpha) {\r\n    return p.color(255, 0, 0, alpha);\r\n  }\r\n\r\n  function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\r\n    const uA =\r\n      ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\r\n      ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\r\n    const uB =\r\n      ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\r\n      ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\r\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\r\n      return {\r\n        x: p.floor(x1 + uA * (x2 - x1)),\r\n        y: p.floor(y1 + uA * (y2 - y1)),\r\n      };\r\n    }\r\n    return {\r\n      x: null,\r\n      y: null,\r\n    };\r\n  }\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    drawing = p.createGraphics(p.width, p.height);\r\n    for (let i = 0; i < circleCount; i++) {\r\n      const THIS_SPEED = p.random(speeds);\r\n      const THIS_SIZE = (p.width / 6) * p.random(0.1, 1);\r\n      speeds = speeds.filter(s => s !== THIS_SPEED);\r\n      circles.push({\r\n        r: p.HALF_PI * i,\r\n        speed: THIS_SPEED / p.TWO_PI,\r\n        size: THIS_SIZE,\r\n        direction: p.random([1, -1]),\r\n      });\r\n    }\r\n    p.noFill();\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(255);\r\n    p.frameRate(viewGuides ? 15 : 30);\r\n    p.image(drawing, 0, 0);\r\n    const X0_AXIS =\r\n      p.width / 2 + p.cos(circles[0].r) * (p.width / 2 - circles[1].size * 2);\r\n    const Y0_AXIS = circles[0].size / 2;\r\n    const X0 = X0_AXIS + p.cos(circles[0].r) * (circles[0].size / 2);\r\n    const Y0 = Y0_AXIS + p.sin(circles[0].r) * (circles[0].size / 2);\r\n    const X1_AXIS = p.width - circles[1].size / 2;\r\n    const Y1_AXIS =\r\n      p.height / 2 +\r\n      p.cos(circles[1].r) *\r\n        (p.height / 2 - (circles[0].size + circles[2].size));\r\n    const X1 = X1_AXIS + p.cos(circles[1].r) * (circles[1].size / 2);\r\n    const Y1 = Y1_AXIS + p.sin(circles[1].r) * (circles[1].size / 2);\r\n    const X2_AXIS =\r\n      p.width / 2 + p.cos(circles[2].r) * (p.width / 2 - circles[1].size * 2);\r\n    const Y2_AXIS = p.height - circles[2].size / 2;\r\n    const X2 = X2_AXIS + p.cos(circles[2].r) * (circles[2].size / 2);\r\n    const Y2 = Y2_AXIS + p.sin(circles[2].r) * (circles[2].size / 2);\r\n    const X3_AXIS = circles[1].size / 2;\r\n    const Y3_AXIS =\r\n      p.height / 2 +\r\n      p.cos(circles[1].r) *\r\n        (p.height / 2 - (circles[0].size + circles[2].size));\r\n    const X3 =\r\n      X3_AXIS + p.cos(circles[1].r + p.HALF_PI) * (circles[1].size / 2);\r\n    const Y3 =\r\n      Y3_AXIS + p.sin(circles[1].r + p.HALF_PI) * (circles[1].size / 2);\r\n    if (viewGuides) {\r\n      p.stroke(guideColor(128));\r\n      p.strokeWeight(1);\r\n      p.ellipse(X0_AXIS, Y0_AXIS, circles[0].size);\r\n      p.ellipse(X1_AXIS, Y1_AXIS, circles[1].size);\r\n      p.ellipse(X2_AXIS, Y2_AXIS, circles[2].size);\r\n      p.ellipse(X3_AXIS, Y3_AXIS, circles[1].size);\r\n      p.line(X0, Y0, X2, Y2);\r\n      p.line(X1, Y1, X3, Y3);\r\n    }\r\n    for (let i = 0; i < circles.length; i++) {\r\n      circles[i].r += circles[i].speed * circles[i].direction;\r\n    }\r\n    const { x, y } = lineIntersection(X0, Y0, X2, Y2, X1, Y1, X3, Y3);\r\n    if (x && y && p.frameCount > 1) {\r\n      for (let l = 0; l < 1; l += 0.01) {\r\n        drawing.line(x, y, lastPoint.x, lastPoint.y);\r\n      }\r\n    }\r\n    lastPoint =\r\n      x && y\r\n        ? {\r\n            x,\r\n            y,\r\n          }\r\n        : lastPoint;\r\n  };\r\n\r\n  p.mousePressed = function() {\r\n    viewGuides = !viewGuides;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"\r\n      Reload page for a different variation. Click or tap sketch to toggle\r\n      guides.\r\n    \"\r\n  />\r\n);\r\n"],"sourceRoot":""}