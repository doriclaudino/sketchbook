{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/13.js","webpack:///./src/lib/polarToCartesian.js"],"names":["sketch","p","points","setup","createCanvas","stroke","strokeWeight","noFill","colorMode","HSB","initPoints","Array","from","a","random","TWO_PI","d","height","aSpeed","angle","concat","map","pt","Object","assign","draw","background","beginShape","curveVertex","polarToCartesian","width","length","forEach","i","endShape","push","blendMode","MULTIPLY","fill","sin","frameCount","rect","pop","location","path","pathname","description","polarToCartesianX","center","distance","Math","cos","polarToCartesianY","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y"],"mappings":"ukBAIA,IAAMA,EAAS,SAASC,GACtB,IAEIC,EAAS,GAEbD,EAAEE,MAAQ,WACRF,EAAEG,aAAa,IAAK,KACpBH,EAAEI,OAAO,KACTJ,EAAEK,aAAa,GACfL,EAAEM,SACFN,EAAEO,UAAUP,EAAEQ,IAAK,KAQnB,IANA,IAAMC,EAAaC,MAAMC,KAAKD,MAAM,IAAI,iBAAO,CAC7CE,EAAGZ,EAAEa,OAAOb,EAAEc,QACdC,EAAGf,EAAEa,OAAOb,EAAEgB,QACdC,OAAQjB,EAAEa,OAAO,KAAQb,EAAEa,OAAO,EAAE,EAAG,QAVtB,WAaVK,GACPjB,EAASA,EAAOkB,OACdV,EAAWW,KAAI,SAAAC,GAAE,OAAIC,OAAOC,OAAO,GAAIF,EAAI,CAAET,EAAGS,EAAGT,EAAIM,SAFlDA,EAAQ,EAAGA,EAAQlB,EAAEc,OAAQI,GAASlB,EAAEc,OAjBrC,GAiBsD,EAAzDI,IAOXlB,EAAEwB,KAAO,WACPxB,EAAEyB,WAAW,GAEbzB,EAAE0B,aACF1B,EAAE2B,YAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAE6B,MAAQ,EACV7B,EAAEgB,OAAS,EACXf,EAAOA,EAAO6B,OAAS,GAAGlB,EAC1BX,EAAOA,EAAO6B,OAAS,GAAGf,GAC1B,KAGJf,EAAE2B,YAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAE6B,MAAQ,EACV7B,EAAEgB,OAAS,EACXf,EAAOA,EAAO6B,OAAS,GAAGlB,EAC1BX,EAAOA,EAAO6B,OAAS,GAAGf,GAC1B,KAGJf,EAAE2B,YAAF,MAAA3B,EAAC,EACI4B,YACD5B,EAAE6B,MAAQ,EACV7B,EAAEgB,OAAS,EACXf,EAAOA,EAAO6B,OAAS,GAAGlB,EAC1BX,EAAOA,EAAO6B,OAAS,GAAGf,GAC1B,KAGJd,EAAO8B,SAAQ,WAAmBC,GAAO,IAAvBpB,EAAsB,EAAtBA,EAAGG,EAAmB,EAAnBA,EAAGE,EAAgB,EAAhBA,OACtBjB,EAAE2B,YAAF,MAAA3B,EAAC,EAAgB4B,YAAiB5B,EAAE6B,MAAQ,EAAG7B,EAAEgB,OAAS,EAAGJ,EAAGG,GAAG,KACnEd,EAAO+B,GAAGpB,GAAKK,KAGjBjB,EAAEiC,WAEFjC,EAAEkC,OACFlC,EAAEmC,UAAUnC,EAAEoC,UACdpC,EAAEqC,KAAKrC,EAAEoB,IAAIpB,EAAEsC,IAAItC,EAAEuC,WAAa,MAAO,EAAG,EAAG,EAAG,KAAM,IAAK,KAC7DvC,EAAEwC,KAAK,EAAG,EAAGxC,EAAE6B,MAAO7B,EAAEgB,QACxBhB,EAAEyC,QAIS,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAc3C,OAAQA,EAAQ4C,KAAMD,EAASE,SAAUC,YAAY,O,kCC5ErE,0GAAMC,EAAoB,SAACC,EAAQ7B,EAAO8B,GACxC,OAAOD,EAASE,KAAKC,IAAIhC,GAAS8B,GAE9BG,EAAoB,SAACJ,EAAQ7B,EAAO8B,GACxC,OAAOD,EAASE,KAAKX,IAAIpB,GAAS8B,GAa9BI,EAA0B,SAC9BC,EACAC,EACApC,EACAqC,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUJ,KAAKC,IAAIhC,GAASqC,EAChCI,EAAIL,EAAUL,KAAKX,IAAIpB,GAASsC,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlB/B,IAzBU,SACvByB,EACAC,EACApC,EACA8B,EACAS,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIZ,EAAkBO,EAASnC,EAAO8B,GACtCW,EAAIR,EAAkBG,EAASpC,EAAO8B,GAC5C,OAAOS,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC","file":"component---src-pages-sketch-2019-06-13-js-43048123b9a5265c99c4.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const STEPS = 50;\r\n\r\n  let points = [];\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n    p.stroke(255);\r\n    p.strokeWeight(2);\r\n    p.noFill();\r\n    p.colorMode(p.HSB, 100);\r\n\r\n    const initPoints = Array.from(Array(3), () => ({\r\n      a: p.random(p.TWO_PI),\r\n      d: p.random(p.height),\r\n      aSpeed: p.random(0.01) * p.random([-1, 1]),\r\n    }));\r\n\r\n    for (let angle = 0; angle < p.TWO_PI; angle += p.TWO_PI / STEPS) {\r\n      points = points.concat(\r\n        initPoints.map(pt => Object.assign({}, pt, { a: pt.a + angle }))\r\n      );\r\n    }\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n\r\n    p.beginShape();\r\n    p.curveVertex(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[points.length - 3].a,\r\n        points[points.length - 3].d,\r\n        true\r\n      )\r\n    );\r\n    p.curveVertex(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[points.length - 2].a,\r\n        points[points.length - 2].d,\r\n        true\r\n      )\r\n    );\r\n    p.curveVertex(\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        points[points.length - 1].a,\r\n        points[points.length - 1].d,\r\n        true\r\n      )\r\n    );\r\n    points.forEach(({ a, d, aSpeed }, i) => {\r\n      p.curveVertex(...polarToCartesian(p.width / 2, p.height / 2, a, d, true));\r\n      points[i].a += aSpeed;\r\n    });\r\n\r\n    p.endShape();\r\n\r\n    p.push();\r\n    p.blendMode(p.MULTIPLY);\r\n    p.fill(p.map(p.sin(p.frameCount / 500), -1, 1, 0, 100), 100, 100);\r\n    p.rect(0, 0, p.width, p.height);\r\n    p.pop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n"],"sourceRoot":""}