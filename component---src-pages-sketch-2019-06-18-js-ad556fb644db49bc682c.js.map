{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/pages/sketch/2019/06/18.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","sketch","p","initShape","shapes","setup","pixelDensity","createCanvas","Array","from","_","i","a","random","TWO_PI","d","sort","b","noStroke","draw","background","shape","fill","beginShape","forEach","pt","vertex","width","height","endShape","CLOSE","length","unshift","map","noise","frameCount","pop","location","path","pathname","description"],"mappings":"6FAAA,0GAAMA,EAAoB,SAACC,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKC,IAAIH,GAASC,GAE9BG,EAAoB,SAACL,EAAQC,EAAOC,GACxC,OAAOF,EAASG,KAAKG,IAAIL,GAASC,GAa9BK,EAA0B,SAC9BC,EACAC,EACAR,EACAS,EACAC,EACAC,QACG,IADHA,OAAU,GAEV,IAAMC,EAAIL,EAAUL,KAAKC,IAAIH,GAASS,EAChCI,EAAIL,EAAUN,KAAKG,IAAIL,GAASU,EACtC,OAAOC,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,MAIlBC,IAzBU,SACvBP,EACAC,EACAR,EACAC,EACAU,QACG,IADHA,OAAU,GAEV,IAAMC,EAAId,EAAkBS,EAASP,EAAOC,GACtCY,EAAIT,EAAkBI,EAASR,EAAOC,GAC5C,OAAOU,EAAU,CAACC,EAAGC,GAAK,CAAED,IAAGC,O,kgBCXjC,IAAME,EAAS,SAASC,GACtB,IAGIC,EAAY,GACZC,EAAS,GAEbF,EAAEG,MAAQ,WACRH,EAAEI,aAAa,GACfJ,EAAEK,aAAa,IAAK,MAEpBJ,EAAYK,MAAMC,KAAKD,MAVP,IAUyB,SAACE,EAAGC,GAAJ,MAAW,CAClDC,EAAGV,EAAEW,OAAOX,EAAEY,QAAUH,EAXV,GAW0BT,EAAEY,SAAWH,EAAI,GAX3C,IAYdI,EAAGb,EAAEW,OAAO,SAGJG,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,KACjCR,EAAS,CAACD,GAEVD,EAAEgB,YAGJhB,EAAEiB,KAAO,WACPjB,EAAEkB,WAAW,GAIb,IALkB,eAKTT,GACP,IAAMU,EAAQjB,EAAOO,GAAGK,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEA,EAAIK,EAAEL,KAE/CV,EAAEoB,KAAKX,EAAI,EAAI,IAAM,GACrBT,EAAEqB,aACFF,EAAMG,SAAQ,SAAAC,GAAE,OACdvB,EAAEwB,OAAF,MAAAxB,EAAC,EACIF,YACDE,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXH,EAAGb,EACHa,EAAGV,EApCD,GAoCKJ,GACP,QAINT,EAAEwB,OAAF,MAAAxB,EAAC,EACIF,YACDE,EAAEyB,MAAQ,EACVzB,EAAE0B,OAAS,EACXP,EAAM,GAAGT,EACTS,EAAM,GAAGN,EA9CL,GA8CSJ,GACb,KAGJT,EAAE2B,SAAS3B,EAAE4B,QAzBNnB,EAAIP,EAAO2B,OAAS,EAAGpB,GAAK,EAAGA,IAAM,EAArCA,GA2BTP,EAAO4B,QACL7B,EAAU8B,KAAI,gBAAGrB,EAAH,EAAGA,EAAGG,EAAN,EAAMA,EAAN,MAAe,CAC3BH,EACEV,EAAEY,QACDF,EAAIV,EAAE+B,IAAI/B,EAAEgC,MAAMtB,EAAGV,EAAEiC,WAAa,KAAM,EAAG,EAAG,GAAK,KACnDjC,EAAEY,OAAS,KAAQZ,EAAEiC,YAC1BpB,EAAGA,EAAIb,EAAE+B,IAAI/B,EAAEgC,MAAMnB,EAAGb,EAAEiC,WAAa,KAAM,EAAG,EAAG,GAAK,QAGxD/B,EAAO2B,OAAS7B,EAAE0B,OA7DZ,IA8DRxB,EAAOgC,QAKE,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CAAcpC,OAAQA,EAAQqC,KAAMD,EAASE,SAAUC,YAAY","file":"component---src-pages-sketch-2019-06-18-js-ad556fb644db49bc682c.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\n\r\nconst sketch = function(p) {\r\n  const POINT_QTY = 5;\r\n  const GAP = 20;\r\n\r\n  let initShape = [];\r\n  let shapes = [];\r\n\r\n  p.setup = function() {\r\n    p.pixelDensity(1);\r\n    p.createCanvas(660, 840);\r\n\r\n    initShape = Array.from(Array(POINT_QTY), (_, i) => ({\r\n      a: p.random(p.TWO_PI * (i / POINT_QTY), p.TWO_PI * ((i + 1) / POINT_QTY)),\r\n      d: p.random(10),\r\n    }));\r\n\r\n    initShape.sort((a, b) => a.a - b.a);\r\n    shapes = [initShape];\r\n\r\n    p.noStroke();\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(0);\r\n\r\n    let aPrev;\r\n\r\n    for (let i = shapes.length - 1; i >= 0; i--) {\r\n      const shape = shapes[i].sort((a, b) => a.a - b.a);\r\n\r\n      p.fill(i % 2 ? 255 : 0);\r\n      p.beginShape();\r\n      shape.forEach(pt =>\r\n        p.vertex(\r\n          ...polarToCartesian(\r\n            p.width / 2,\r\n            p.height / 2,\r\n            pt.a,\r\n            pt.d + i * GAP,\r\n            true\r\n          )\r\n        )\r\n      );\r\n      p.vertex(\r\n        ...polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          shape[0].a,\r\n          shape[0].d + i * GAP,\r\n          true\r\n        )\r\n      );\r\n      p.endShape(p.CLOSE);\r\n    }\r\n    shapes.unshift(\r\n      initShape.map(({ a, d }) => ({\r\n        a:\r\n          p.TWO_PI -\r\n          (a * p.map(p.noise(a, p.frameCount / 500), 0, 1, 0.1, 1.9) +\r\n            (p.TWO_PI / 1080) * p.frameCount),\r\n        d: d * p.map(p.noise(d, p.frameCount / 250), 0, 1, 0.1, 2),\r\n      }))\r\n    );\r\n    if (shapes.length > p.height / GAP) {\r\n      shapes.pop();\r\n    }\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n"],"sourceRoot":""}