{"version":3,"sources":["webpack:///./src/pages/sketch/2019/06/09.js","webpack:///./src/lib/shuffle.js"],"names":["sketch","p","HUE","random","WIDTH","RULES","GRID_SIZE","ROTATIONS","shuffle","HALF_PI","PI","cellCount","row","this","cells","Array","from","length","floor","draw","y","forEach","c","i","console","log","fill","color","push","translate","rotate","triangle","pop","update","newState","str","String","setup","createCanvas","colorMode","HSL","background","noStroke","frameCount","noLoop","location","path","pathname","description","a","j","Math"],"mappings":"oLAIMA,EAAS,SAASC,GACtB,IAAMC,EAAMD,EAAEE,OAAO,KACfC,EAAQ,IAERC,EAAQ,CACZ,IAAOJ,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,IAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,IACpB,MAAOF,EAAEE,OAAO,CAAC,EAAG,KAEhBG,EAAY,GACZC,EAAYC,YAAQ,CAAC,EAAGP,EAAEQ,QAASR,EAAES,GAAIT,EAAEQ,QAAUR,EAAES,KAEzDC,EAAY,EA4CVC,EAAM,IA7Da,WAoBvB,aACEC,KAAKC,MAAQC,MAAMC,KAAK,CAAEC,OAAQb,EAAQE,IAAa,kBAAM,KAC7DO,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAMD,KAAKC,MAAMG,OAAS,GAAK,EACpCJ,KAAKC,MAAMb,EAAEiB,MAAML,KAAKC,MAAMG,OAAS,IAAM,EAC7CJ,KAAKC,MAAMb,EAAEiB,MAAML,KAAKC,MAAMG,QAAU,EAAI,KAAO,EAzB9B,2BA2BvBE,KAAA,SAAKC,GAAI,IAAD,OACNP,KAAKC,MAAMO,SAAQ,SAACC,EAAGC,GACrBC,QAAQC,IAAIH,EAAGC,EAAIjB,EAAW,EAAKc,GACnCnB,EAAEyB,KAAKJ,EAAIrB,EAAE0B,MAAMzB,EAAK,IAAK,IAAMD,EAAE0B,MAAMzB,EAAK,IAAK,KACrDD,EAAE2B,OACF3B,EAAE4B,UACAN,EAAIjB,EAAYA,EAAY,EAC5Bc,EAAId,EAAYA,EAAY,GAE9BL,EAAE6B,OAAOvB,EAAUI,EAAY,IAC/BV,EAAE8B,UACCzB,EAAY,GACZA,EAAY,EACbA,EAAY,EACZA,EAAY,GACXA,EAAY,EACbA,EAAY,GAEdL,EAAE+B,MACFrB,QA9CmB,EAiDvBsB,OAAA,WAAU,IAAD,OACHC,EAAW,GACfrB,KAAKC,MAAMO,SAAQ,SAACC,EAAGC,GACrB,IAAIY,EAAY,IAANZ,EAAU,IAAMa,OAAO,EAAKtB,MAAMS,EAAI,IAChDY,GAAOC,OAAO,EAAKtB,MAAMS,IACzBY,GAAOZ,IAAM,EAAKT,MAAMG,OAAS,EAAI,IAAMmB,OAAO,EAAKtB,MAAMS,EAAI,IACjEW,EAASN,KAAKvB,EAAM8B,OAEtBtB,KAAKC,MAAQoB,GAzDQ,MA+DzBjC,EAAEoC,MAAQ,WACRpC,EAAEqC,aAAalC,EA7DF,KA8DbH,EAAEsC,UAAUtC,EAAEuC,IAAK,IACnBvC,EAAEwC,WAAWvC,EAAK,IAAK,IACvBD,EAAEyC,YAGJzC,EAAEkB,KAAO,WACPP,EAAIO,KAAKlB,EAAE0C,WAAa,GACxB/B,EAAIqB,SACJhC,EAAE0C,WAAarC,EAtEF,KAsEwBL,EAAE2C,WAI5B,0BAAGC,EAAH,EAAGA,SAAH,OACb,YAAC,IAAD,CACE7C,OAAQA,EACR8C,KAAMD,EAASE,SACfC,YAAY,kE,kCCrFD,SAASxC,EAAQyC,GAC9B,IAAK,IAAI1B,EAAI0B,EAAEhC,OAAS,EAAGM,EAAI,EAAGA,IAAK,CACrC,IAAM2B,EAAIC,KAAKjC,MAAMiC,KAAKhD,UAAYoB,EAAI,IADL,EAEtB,CAAC0B,EAAEC,GAAID,EAAE1B,IAAvB0B,EAAE1B,GAFkC,KAE9B0B,EAAEC,GAF4B,KAIvC,OAAOD,EALT","file":"component---src-pages-sketch-2019-06-09-js-1b511fee040f3c692290.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport shuffle from \"~lib/shuffle\";\r\n\r\nconst sketch = function(p) {\r\n  const HUE = p.random(100);\r\n  const WIDTH = 660;\r\n  const HEIGHT = 840;\r\n  const RULES = {\r\n    \"111\": p.random([0, 1]),\r\n    \"110\": p.random([0, 1]),\r\n    \"101\": p.random([0, 1]),\r\n    \"100\": p.random([0, 1]),\r\n    \"011\": p.random([0, 1]),\r\n    \"010\": p.random([0, 1]),\r\n    \"001\": p.random([0, 1]),\r\n    \"000\": p.random([0, 1]),\r\n  };\r\n  const GRID_SIZE = 10;\r\n  const ROTATIONS = shuffle([0, p.HALF_PI, p.PI, p.HALF_PI + p.PI]);\r\n\r\n  let cellCount = 0;\r\n\r\n  class Row {\r\n    constructor() {\r\n      this.cells = Array.from({ length: WIDTH / GRID_SIZE }, () => 0);\r\n      this.cells[0] = 1;\r\n      this.cells[this.cells.length - 1] = 1;\r\n      this.cells[p.floor(this.cells.length / 3)] = 1;\r\n      this.cells[p.floor(this.cells.length * (2 / 3))] = 1;\r\n    }\r\n    draw(y) {\r\n      this.cells.forEach((c, i) => {\r\n        console.log(c, i * GRID_SIZE, this.y);\r\n        p.fill(c ? p.color(HUE, 100, 50) : p.color(HUE, 100, 25));\r\n        p.push();\r\n        p.translate(\r\n          i * GRID_SIZE + GRID_SIZE / 2,\r\n          y * GRID_SIZE + GRID_SIZE / 2\r\n        );\r\n        p.rotate(ROTATIONS[cellCount % 4]);\r\n        p.triangle(\r\n          -GRID_SIZE / 2,\r\n          -GRID_SIZE / 2,\r\n          GRID_SIZE / 2,\r\n          GRID_SIZE / 2,\r\n          -GRID_SIZE / 2,\r\n          GRID_SIZE / 2\r\n        );\r\n        p.pop();\r\n        cellCount++;\r\n      });\r\n    }\r\n    update() {\r\n      let newState = [];\r\n      this.cells.forEach((c, i) => {\r\n        let str = i === 0 ? \"0\" : String(this.cells[i - 1]);\r\n        str += String(this.cells[i]);\r\n        str += i === this.cells.length - 1 ? \"0\" : String(this.cells[i + 1]);\r\n        newState.push(RULES[str]);\r\n      });\r\n      this.cells = newState;\r\n    }\r\n  }\r\n\r\n  const row = new Row();\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(WIDTH, HEIGHT);\r\n    p.colorMode(p.HSL, 75);\r\n    p.background(HUE, 100, 33);\r\n    p.noStroke();\r\n  };\r\n\r\n  p.draw = function() {\r\n    row.draw(p.frameCount - 1);\r\n    row.update();\r\n    p.frameCount * GRID_SIZE > HEIGHT && p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Continuing to explore randomly generated cellular automata.\"\r\n  />\r\n);\r\n","export default function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n"],"sourceRoot":""}