{"version":3,"sources":["webpack:///./src/lib/polarToCartesian.js","webpack:///./src/lib/lerpLine.js","webpack:///./src/pages/sketch/2019/05/12.js"],"names":["polarToCartesianX","center","angle","distance","Math","cos","polarToCartesianY","sin","polarToCartesianEllipse","centerX","centerY","radiusX","radiusY","asArray","x","y","polarToCartesian","p","x1","y1","x2","y2","rate","showFirstDot","noisy","thisRate","max","dist","l","random","point","lerp","sketch","maxDist","SLICES","vertices","setup","createCanvas","Array","from","floor","theta","TWO_PI","r","height","forEach","i","push","vector","width","reached","hue","map","filter","background","colorMode","HSB","strokeWeight","draw","reachedVector","unreachedIndex","reachedVertices","shortestDist","vertex","thisDist","stroke","lerpLine","noStroke","fill","rect","v","length","noLoop","text","pop","location","path","pathname","description"],"mappings":"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","file":"component---src-pages-sketch-2019-05-12-js-a0d13ce29d4f534eb475.js","sourcesContent":["const polarToCartesianX = (center, angle, distance) => {\n  return center + Math.cos(angle) * distance;\n};\nconst polarToCartesianY = (center, angle, distance) => {\n  return center + Math.sin(angle) * distance;\n};\nconst polarToCartesian = (\n  centerX,\n  centerY,\n  angle,\n  distance,\n  asArray = false\n) => {\n  const x = polarToCartesianX(centerX, angle, distance);\n  const y = polarToCartesianY(centerY, angle, distance);\n  return asArray ? [x, y] : { x, y };\n};\nconst polarToCartesianEllipse = (\n  centerX,\n  centerY,\n  angle,\n  radiusX,\n  radiusY,\n  asArray = false\n) => {\n  const x = centerX + Math.cos(angle) * radiusX;\n  const y = centerY + Math.sin(angle) * radiusY;\n  return asArray ? [x, y] : { x, y };\n};\n\nexport { polarToCartesianX, polarToCartesianY, polarToCartesianEllipse };\nexport default polarToCartesian;\n","/**\n * Creates a line of points at a specified interval (the rate)\n *\n * @param {obj} p The current p5.js drawing context\n * @param {*} x1\n * @param {*} y1\n * @param {*} x2\n * @param {*} y2\n * @param {*} rate Number between 0 and 1 to determine how often to draw a point\n * @param {*} showFirstDot Defaults to true\n * @param {*} noisy Defaults to true\n */\nexport default function(\n  p,\n  x1,\n  y1,\n  x2,\n  y2,\n  rate,\n  showFirstDot = true,\n  noisy = true\n) {\n  const thisRate = Math.max(rate, 0.01 / p.dist(x1, y1, x2, y2));\n\n  for (let l = 0; l < 1; l += thisRate) {\n    if (l === 0 && !showFirstDot) continue;\n    if ((noisy && p.random() > l) || !noisy) {\n      p.point(p.lerp(x1, x2, l), p.lerp(y1, y2, l));\n    }\n  }\n}\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\nimport lerpLine from \"~lib/lerpLine\";\r\n\r\nconst sketch = function(p) {\r\n  const SLICES = p.random([2, 3, 5]);\r\n\r\n  let vertices = [];\r\n  let maxDist;\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(660, 840);\r\n\r\n    Array.from(Array(p.floor(3000 / SLICES)), () => ({\r\n      theta: p.random(p.TWO_PI / SLICES),\r\n      r: p.random(p.height / 2),\r\n    })).forEach(({ theta, r }) => {\r\n      for (let i = 0; i < SLICES; i++) {\r\n        vertices.push({\r\n          vector: polarToCartesian(\r\n            p.width / 2,\r\n            p.height / 2,\r\n            theta + (p.TWO_PI / SLICES) * i,\r\n            r\r\n          ),\r\n          reached: false,\r\n          hue: p.map(p.sin(theta + (p.TWO_PI / SLICES) * i), -1, 1, 0, 100),\r\n        });\r\n      }\r\n    });\r\n    vertices = vertices.filter(\r\n      ({ vector }) =>\r\n        vector.x > 0 &&\r\n        vector.x < p.width &&\r\n        vector.y > 0 &&\r\n        vector.y < p.height\r\n    );\r\n    vertices.push({\r\n      vector: {\r\n        x: p.width / 2,\r\n        y: p.height / 2,\r\n      },\r\n      reached: true,\r\n      hue: 0,\r\n    });\r\n\r\n    maxDist = p.dist(0, 0, p.width, p.height);\r\n\r\n    p.background(0);\r\n    p.colorMode(p.HSB, 100);\r\n    p.strokeWeight(2);\r\n  };\r\n\r\n  p.draw = function() {\r\n    const reachedVertices = vertices.filter(({ reached }) => reached);\r\n\r\n    let shortestDist = maxDist;\r\n    let reachedVector;\r\n    let unreachedIndex;\r\n\r\n    vertices.forEach((vertex, i) => {\r\n      if (!vertex.reached) {\r\n        reachedVertices.forEach(({ vector, hue }) => {\r\n          const thisDist = p.dist(\r\n            vector.x,\r\n            vector.y,\r\n            vertex.vector.x,\r\n            vertex.vector.y\r\n          );\r\n          if (thisDist < shortestDist) {\r\n            shortestDist = thisDist;\r\n            unreachedIndex = i;\r\n            reachedVector = vector;\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    p.stroke(vertices[unreachedIndex].hue, 80, 100);\r\n    lerpLine(\r\n      p,\r\n      reachedVector.x,\r\n      reachedVector.y,\r\n      vertices[unreachedIndex].vector.x,\r\n      vertices[unreachedIndex].vector.y,\r\n      p.map(\r\n        p.dist(p.width / 2, p.height / 2, reachedVector.x, reachedVector.y),\r\n        0,\r\n        maxDist / 2,\r\n        0.1,\r\n        0.5\r\n      ),\r\n      false\r\n    );\r\n\r\n    vertices[unreachedIndex].reached = true;\r\n\r\n    p.push();\r\n    p.noStroke();\r\n    p.fill(\"black\");\r\n    p.rect(0, 0, 100, 20);\r\n\r\n    if (vertices.filter(v => v.reached).length === vertices.length) {\r\n      p.noLoop();\r\n    } else {\r\n      p.fill(\"white\");\r\n      p.text(vertices.length - vertices.filter(v => v.reached).length, 0, 18);\r\n    }\r\n\r\n    p.pop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout\r\n    sketch={sketch}\r\n    path={location.pathname}\r\n    description=\"Be patient.\"\r\n  />\r\n);\r\n"],"sourceRoot":""}