{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/21.js","webpack:///./src/lib/lineIntersection.js"],"names":["sketch","p","r","focus","cnvs","M","shuffle","OFFSET","QUARTER_PI","HALF_PI","PI","HUE","random","TWO_PI","SIDE_COUNT","floor","sides","complete","setup","frameRate","createCanvas","colorMode","HSB","createLoop","noiseRadius","width","push","polarToCartesian","height","createGraphics","blendMode","OVERLAY","draw","background","animLoop","theta","noise","thetaA","thetaB","a","x","y","b","i","length","lineIntersection","stroke","map","sin","cos","noFill","bezier","translate","rotate","scale","image","pop","progress","frameCount","console","info","DURATION","noLoop","location","path","pathname","description","x1","y1","x2","y2","x3","y3","x4","y4","uA","uB"],"mappings":"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","file":"component---src-pages-sketch-2020-01-21-js-5bf7976f6ece0300f315.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport \"p5.createloop\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\nimport lineIntersection from \"~lib/lineIntersection\";\r\nimport { easeInOutQuad } from \"~lib/easing\";\r\n\r\nconst sketch = function(p) {\r\n  const DURATION = 60;\r\n  const RATE = 60;\r\n  const M = p.shuffle([1, 2, 3, 5, 7, 9, 11, 13, 17]);\r\n  const OFFSET = p.shuffle([p.QUARTER_PI, p.HALF_PI, p.PI]);\r\n  const HUE = p.random(p.TWO_PI);\r\n  const SIDE_COUNT = 4 * p.floor(p.random(1, 5));\r\n\r\n  let sides = [];\r\n  let r;\r\n  let complete = 0;\r\n  let focus;\r\n  let cnvs;\r\n\r\n  p.setup = function() {\r\n    p.frameRate(RATE);\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, p.TWO_PI);\r\n    p.createLoop(DURATION, {\r\n      noiseRadius: 2,\r\n    });\r\n\r\n    r = p.width / 2 - p.width / 20;\r\n\r\n    sides.push([\r\n      polarToCartesian(p.width / 2, p.height / 2, 0, r, true),\r\n      polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        p.TWO_PI / SIDE_COUNT,\r\n        r,\r\n        true\r\n      ),\r\n    ]);\r\n    sides.push([\r\n      polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        p.TWO_PI / SIDE_COUNT,\r\n        r,\r\n        true\r\n      ),\r\n      [p.width / 2, p.height / 2],\r\n    ]);\r\n    sides.push([\r\n      polarToCartesian(p.width / 2, p.height / 2, 0, r, true),\r\n      [p.width / 2, p.height / 2],\r\n    ]);\r\n\r\n    focus = polarToCartesian(\r\n      p.width / 2,\r\n      p.height / 2,\r\n      p.TWO_PI / SIDE_COUNT / 2,\r\n      r / 2,\r\n      true\r\n    );\r\n\r\n    cnvs = p.createGraphics(p.width, p.height);\r\n    cnvs.blendMode(p.OVERLAY);\r\n    cnvs.colorMode(p.HSB, p.TWO_PI);\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.background(p.TWO_PI - HUE, p.TWO_PI, p.PI);\r\n\r\n    const { theta, noise } = p.animLoop;\r\n\r\n    const thetaA = theta * M[0];\r\n    const thetaB = theta * M[1] + OFFSET[0];\r\n\r\n    let a = { x: null, y: null };\r\n    let b = { x: null, y: null };\r\n\r\n    for (let i = 0; i < sides.length; i++) {\r\n      a =\r\n        a.x && a.y\r\n          ? a\r\n          : lineIntersection(\r\n              ...focus,\r\n              ...polarToCartesian(\r\n                p.width / 2,\r\n                p.height / 2,\r\n                thetaA,\r\n                p.width / 2,\r\n                true\r\n              ),\r\n              ...sides[i][0],\r\n              ...sides[i][1]\r\n            );\r\n\r\n      b =\r\n        b.x && b.y\r\n          ? b\r\n          : lineIntersection(\r\n              ...focus,\r\n              ...polarToCartesian(\r\n                p.width / 2,\r\n                p.height / 2,\r\n                thetaB,\r\n                p.width / 2,\r\n                true\r\n              ),\r\n              ...sides[i][0],\r\n              ...sides[i][1]\r\n            );\r\n    }\r\n\r\n    cnvs.stroke(\r\n      HUE,\r\n      p.map(p.sin(theta * M[2]), -1, 1, 0, p.TWO_PI),\r\n      p.map(p.cos(theta * M[3]), -1, 1, 0, p.TWO_PI),\r\n      p.HALF_PI\r\n    );\r\n    cnvs.noFill();\r\n    cnvs.bezier(\r\n      a.x,\r\n      a.y,\r\n      ...polarToCartesian(\r\n        ...focus,\r\n        theta * M[4],\r\n        p.map(noise(), -1, 1, 0, r / 4),\r\n        true\r\n      ),\r\n      ...polarToCartesian(\r\n        ...focus,\r\n        theta * M[5],\r\n        p.map(noise(), -1, 1, 0, r / 4),\r\n        true\r\n      ),\r\n      b.x,\r\n      b.y\r\n    );\r\n\r\n    p.translate(p.width / 2, p.height / 2);\r\n    for (let i = 0; i < SIDE_COUNT; i++) {\r\n      p.push();\r\n      p.rotate(p.TWO_PI / SIDE_COUNT / 2);\r\n      p.scale(i % 2 ? 1 : -1, 1);\r\n      p.rotate((p.TWO_PI / SIDE_COUNT) * i);\r\n      p.rotate(-(p.TWO_PI / SIDE_COUNT / 2));\r\n      p.image(cnvs, -p.width / 2, -p.height / 2);\r\n      p.pop();\r\n    }\r\n\r\n    const progress = p.floor((p.frameCount / (DURATION * RATE)) * 100);\r\n\r\n    if (progress > complete) {\r\n      complete = progress;\r\n      console.info(`${complete}%`);\r\n    }\r\n\r\n    p.frameCount === DURATION * RATE && p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","export default function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const uA =\n    ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n  const uB =\n    ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return { x: x1 + uA * (x2 - x1), y: y1 + uA * (y2 - y1) };\n  }\n  return { x: null, y: null };\n}\n"],"sourceRoot":""}