{"version":3,"sources":["webpack:///./src/pages/sketch/2020/01/20.js","webpack:///./src/lib/lineIntersection.js"],"names":["sketch","p","r","M","shuffle","OFFSET","QUARTER_PI","HALF_PI","PI","HUE","random","TWO_PI","SIDE_COUNT","sides","complete","setup","frameRate","createCanvas","colorMode","HSB","background","createLoop","noiseRadius","blendMode","OVERLAY","width","Array","fill","map","_","i","polarToCartesian","height","draw","animLoop","theta","noise1D","thetaA","thetaB","thetaC","thetaD","a","x","y","b","length","lineIntersection","stroke","asin","sin","acos","cos","noFill","bezier","easeInOutQuad","progress","floor","frameCount","console","info","DURATION","noLoop","location","path","pathname","description","x1","y1","x2","y2","x3","y3","x4","y4","uA","uB"],"mappings":"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","file":"component---src-pages-sketch-2020-01-20-js-e3b17578c116ba7a0d88.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\nimport \"p5.createloop\";\r\nimport polarToCartesian from \"~lib/polarToCartesian\";\r\nimport lineIntersection from \"~lib/lineIntersection\";\r\nimport { easeInOutQuad } from \"~lib/easing\";\r\n\r\nconst sketch = function(p) {\r\n  const DURATION = 360;\r\n  const RATE = 60;\r\n  const M = p.shuffle([1, 2, 3, 5, 7, 9, 11, 13, 17]);\r\n  const OFFSET = p.shuffle([p.QUARTER_PI, p.HALF_PI, p.PI]);\r\n  const HUE = p.random(p.TWO_PI);\r\n  const SIDE_COUNT = p.random([4, 5, 6, 7, 8]);\r\n\r\n  let sides = [];\r\n  let r;\r\n  let complete = 0;\r\n\r\n  p.setup = function() {\r\n    p.frameRate(RATE);\r\n    p.createCanvas(660, 840);\r\n    p.colorMode(p.HSB, p.TWO_PI);\r\n    p.background(p.TWO_PI - HUE, p.QUARTER_PI, p.PI);\r\n    p.createLoop(DURATION, {\r\n      noiseRadius: 2,\r\n    });\r\n    p.blendMode(p.OVERLAY);\r\n\r\n    r = p.width / 2 - p.width / 20;\r\n\r\n    sides = Array(SIDE_COUNT)\r\n      .fill()\r\n      .map((_, i) => [\r\n        polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          (p.TWO_PI / SIDE_COUNT) * i,\r\n          r,\r\n          true\r\n        ),\r\n        polarToCartesian(\r\n          p.width / 2,\r\n          p.height / 2,\r\n          (p.TWO_PI / SIDE_COUNT) * (i + 1),\r\n          r,\r\n          true\r\n        ),\r\n      ]);\r\n  };\r\n\r\n  p.draw = function() {\r\n    const { theta, noise1D } = p.animLoop;\r\n\r\n    const thetaA = theta * M[0];\r\n    const thetaB = theta * M[1] + OFFSET[0];\r\n    const thetaC = theta * M[2] + OFFSET[1];\r\n    const thetaD = theta * M[3] + OFFSET[2];\r\n\r\n    let a = { x: null, y: null };\r\n    let b = { x: null, y: null };\r\n\r\n    for (let i = 0; i < sides.length; i++) {\r\n      a =\r\n        a.x && a.y\r\n          ? a\r\n          : lineIntersection(\r\n              p.width / 2,\r\n              p.height / 2,\r\n              ...polarToCartesian(\r\n                p.width / 2,\r\n                p.height / 2,\r\n                thetaA,\r\n                p.width / 2,\r\n                true\r\n              ),\r\n              ...sides[i][0],\r\n              ...sides[i][1]\r\n            );\r\n\r\n      b =\r\n        b.x && b.y\r\n          ? b\r\n          : lineIntersection(\r\n              p.width / 2,\r\n              p.height / 2,\r\n              ...polarToCartesian(\r\n                p.width / 2,\r\n                p.height / 2,\r\n                thetaB,\r\n                p.width / 2,\r\n                true\r\n              ),\r\n              ...sides[i][0],\r\n              ...sides[i][1]\r\n            );\r\n    }\r\n\r\n    p.stroke(\r\n      HUE,\r\n      p.asin(p.sin(theta * M[4])) + p.PI / 2,\r\n      p.acos(p.cos(theta * M[5])) + p.PI / 2,\r\n      p.HALF_PI\r\n    );\r\n    p.noFill();\r\n    p.bezier(\r\n      a.x,\r\n      a.y,\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        thetaC,\r\n        r * 0.8 * easeInOutQuad((noise1D(M[6]) + 1) / 2),\r\n        true\r\n      ),\r\n      ...polarToCartesian(\r\n        p.width / 2,\r\n        p.height / 2,\r\n        thetaD,\r\n        r * 0.8 * easeInOutQuad((noise1D(M[7]) + 1) / 2),\r\n        true\r\n      ),\r\n      b.x,\r\n      b.y\r\n    );\r\n\r\n    const progress = p.floor((p.frameCount / (DURATION * RATE)) * 100);\r\n\r\n    if (progress > complete) {\r\n      complete = progress;\r\n      console.info(`${complete}%`);\r\n    }\r\n\r\n    p.frameCount === DURATION * RATE && p.noLoop();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"\" />\r\n);\r\n","export default function lineIntersection(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const uA =\n    ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n  const uB =\n    ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n    ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    return { x: x1 + uA * (x2 - x1), y: y1 + uA * (y2 - y1) };\n  }\n  return { x: null, y: null };\n}\n"],"sourceRoot":""}