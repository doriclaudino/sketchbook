{"version":3,"sources":["webpack:///./src/pages/sketch/2019/02/11.js"],"names":["sketch","p","grid1","grid2","grid3","colorFunctions","angle","abs","sin","cos","tan","HALF_PI","Hexagon","centx","centy","radius","this","cf","random","getColor","color","TAU","draw","fill","noStroke","TWO_PI","beginShape","a","PI","vx","vy","vertex","endShape","CLOSE","Grid","rad","cols","ceil","width","sqrt","rows","height","grid","_makeGrid","console","log","x","y","i","push","j","floor","setup","createCanvas","background","blendMode","DIFFERENCE","translate","location","path","pathname"],"mappings":"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","file":"component---src-pages-sketch-2019-02-11-js-41f81655666f5fc8969e.js","sourcesContent":["import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n\r\nconst sketch = function(p) {\r\n  const colorFunctions = [\r\n    angle => p.abs(p.sin(angle)) * 240,\r\n    angle => p.abs(p.cos(angle)) * 240,\r\n    angle => p.abs(p.tan(angle)) * 240,\r\n    angle => p.abs(p.sin(angle + p.HALF_PI)) * 240,\r\n    angle => p.abs(p.cos(angle + p.HALF_PI)) * 240,\r\n    angle => p.abs(p.tan(angle + p.HALF_PI)) * 240,\r\n    angle => p.abs(p.sin(-angle)) * 240,\r\n    angle => p.abs(p.cos(-angle)) * 240,\r\n    angle => p.abs(p.tan(-angle)) * 240,\r\n    angle => p.abs(p.sin(-angle + p.HALF_PI)) * 240,\r\n    angle => p.abs(p.cos(-angle + p.HALF_PI)) * 240,\r\n    angle => p.abs(p.tan(-angle + p.HALF_PI)) * 240,\r\n  ];\r\n  let grid1;\r\n  let grid2;\r\n  let grid3;\r\n\r\n  class Hexagon {\r\n    constructor(centx, centy, radius) {\r\n      this.centx = centx;\r\n      this.centy = centy;\r\n      this.radius = radius;\r\n      this.cf = [\r\n        p.random(colorFunctions),\r\n        p.random(colorFunctions),\r\n        p.random(colorFunctions),\r\n      ];\r\n    }\r\n\r\n    getColor() {\r\n      return p.color(\r\n        this.cf[0](p.random(p.TAU)),\r\n        this.cf[1](p.random(p.TAU)),\r\n        this.cf[2](p.random(p.TAU))\r\n      );\r\n    }\r\n\r\n    draw() {\r\n      p.fill(this.getColor());\r\n      p.noStroke();\r\n      let angle = p.TWO_PI / 6;\r\n      p.beginShape();\r\n      for (let a = p.PI / 6; a < p.TWO_PI; a += angle) {\r\n        let vx = this.centx + p.cos(a) * this.radius;\r\n        let vy = this.centy + p.sin(a) * this.radius;\r\n        p.vertex(vx, vy);\r\n      }\r\n      p.endShape(p.CLOSE);\r\n    }\r\n  }\r\n\r\n  class Grid {\r\n    constructor(rad) {\r\n      this.cols = p.ceil(p.width / (p.sqrt(3) * rad));\r\n      this.rows = p.ceil(p.height / ((rad * 3) / 2)) + 1;\r\n      this.radius = rad;\r\n      this.grid = [];\r\n      this._makeGrid();\r\n      console.log(this.cols, this.rows);\r\n    }\r\n    _makeGrid() {\r\n      let x = p.sqrt(3) * this.radius;\r\n      let y = this.radius;\r\n      for (let i = 0; i < this.rows; i++) {\r\n        this.grid.push([]);\r\n        for (let j = 0; j < this.cols; j++) {\r\n          this.grid[i].push(new Hexagon(x, y, this.radius));\r\n          x += this.radius * p.sqrt(3);\r\n        }\r\n        y += (this.radius * 3) / 2;\r\n        if ((i + 1) % 2 == 0) {\r\n          x = p.floor(p.sqrt(3) * this.radius);\r\n        } else {\r\n          x = p.floor((this.radius * p.sqrt(3)) / 2);\r\n        }\r\n      }\r\n    }\r\n    draw() {\r\n      for (let i = 0; i < this.rows; i++) {\r\n        for (let j = 0; j < this.cols; j++) {\r\n          this.grid[i][j].draw();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  p.setup = function() {\r\n    // ;\r\n    p.createCanvas(660, 840);\r\n    p.background(127);\r\n    p.blendMode(p.DIFFERENCE);\r\n    p.translate(-20, -20);\r\n    grid1 = new Grid(10);\r\n    grid2 = new Grid(15);\r\n    grid3 = new Grid(20);\r\n    grid1.draw();\r\n    grid2.draw();\r\n    grid3.draw();\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} />\r\n);\r\n"],"sourceRoot":""}