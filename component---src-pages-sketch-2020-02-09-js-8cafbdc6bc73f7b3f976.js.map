{"version":3,"sources":["webpack:///./src/components/sketch.js","webpack:///./src/components/sketch-title.js","webpack:///./src/components/sketch-controls.js","webpack:///./src/components/sketch-layout.js","webpack:///./src/pages/sketch/2020/02/09.js"],"names":["SketchWrapper","Sketch","props","sketchRef","React","createRef","canvas","componentDidMount","this","p5","sketch","current","componentDidUpdate","remove","componentWillUnmount","render","ref","Component","path","dateTime","sketchTitle","SketchControls","children","other","id","query","description","images","sketches","image","edges","find","edge","node","relativePath","includes","replace","sketchIndex","findIndex","next","previous","title","ogImage","childImageSharp","og","src","twitterImage","twitter","css","to","label","icon","p","heliceHeight","htmlSlider","htmlP","RENDER","getURLParams","angle","speed","setup","createCanvas","height","frameRate","background","pixelDensity","createP","createSlider","parent","draw","strokeWeight","value","elt","innerText","translate","width","rect","maxWidth","circle","push","angleMode","DEGREES","rotate","x","cos","heliceWidth","y","sin","turbineWidth","pop","location","pathname"],"mappings":"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","file":"component---src-pages-sketch-2020-02-09-js-8cafbdc6bc73f7b3f976.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst SketchWrapper = styled.div`\r\n  min-height: 100px;\r\n  min-width: 100px;\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n\r\n`;\r\n\r\nclass Sketch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sketchRef = React.createRef();\r\n    this.canvas = null;\r\n  }\r\n  componentDidMount() {\r\n    this.canvas = new p5(this.props.sketch, this.sketchRef.current);\r\n  }\r\n  componentDidUpdate() {\r\n    this.canvas.remove();\r\n    this.canvas = new p5(this.props.sketch, this.sketchRef.current);\r\n  }\r\n  componentWillUnmount() {\r\n    this.canvas.remove();\r\n  }\r\n  render() {\r\n    return <SketchWrapper ref={this.sketchRef} />;\r\n  }\r\n}\r\n\r\nexport default Sketch;\r\n","import React from \"react\";\r\nimport sketchTitle from \"~util/sketch-title\";\r\n\r\nexport default ({ path }) => (\r\n  <time dateTime={sketchTitle(path)}>{sketchTitle(path)}</time>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst SketchControls = styled.div`\r\n  min-height: 100px;\r\n  min-width: 100px;\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n\r\n  & > input {\r\n    width:90%;\r\n  }\r\n`;\r\n\r\nexport default ({ children, ...other }) => (\r\n  <SketchControls id=\"sketch-controls\" {...other}>\r\n    {\" \"}\r\n    {children}{\" \"}\r\n  </SketchControls>\r\n);\r\n","import React from \"react\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\nimport { css } from \"@emotion/core\";\r\nimport Layout from \"~components/layout\";\r\nimport SEO from \"~components/seo\";\r\nimport Header from \"~components/header\";\r\nimport Icon from \"~components/icon\";\r\nimport Sketch from \"~components/sketch\";\r\nimport SketchTitle from \"~components/sketch-title\";\r\nimport SketchControls from \"~components/sketch-controls\";\r\nimport sketchTitle from \"~util/sketch-title\";\r\n\r\nexport default ({ sketch, path, description }) => (\r\n  <StaticQuery\r\n    query={query}\r\n    render={({ images, sketches }) => {\r\n      const image = images.edges.find(edge =>\r\n        edge.node.relativePath.includes(\r\n          path.replace(\"/sketch/\", \"\").replace(/\\/$/, \"\")\r\n        )\r\n      );\r\n      const sketchIndex = sketches.edges.findIndex(\r\n        edge => edge.node.path === path\r\n      );\r\n      const { next, previous } = sketches.edges[sketchIndex] || {};\r\n\r\n      return (\r\n        <Layout>\r\n          <SEO\r\n            title={sketchTitle(path)}\r\n            ogImage={image ? image.node.childImageSharp.og.src : null}\r\n            twitterImage={image ? image.node.childImageSharp.twitter.src : null}\r\n          />\r\n          <Header>\r\n            <h1\r\n              css={css`\r\n                grid-area: c;\r\n                text-align: center;\r\n                white-space: nowrap;\r\n              `}\r\n            >\r\n              <SketchTitle path={path} />{\" \"}\r\n            </h1>{\" \"}\r\n            <Icon\r\n              to={`/#sketch-${sketchTitle(path)}`}\r\n              label=\"Back to Index\"\r\n              icon=\"up\"\r\n            />\r\n            <Icon to={next && next.path} icon=\"left\" />\r\n            <Icon to={previous && previous.path} icon=\"right\" />\r\n          </Header>{\" \"}\r\n          <main>\r\n            <Sketch sketch={sketch} /> <SketchControls />\r\n            {description && (\r\n              <p\r\n                css={css`\r\n                  padding: var(--spacing);\r\n                `}\r\n              >\r\n                {description}{\" \"}\r\n              </p>\r\n            )}{\" \"}\r\n          </main>{\" \"}\r\n        </Layout>\r\n      );\r\n    }}\r\n  />\r\n);\r\n\r\nconst query = graphql`\r\n  query {\r\n    sketches: allSitePage(\r\n      filter: { path: { regex: \"/sketch/\" } }\r\n      sort: { fields: path, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          path\r\n        }\r\n        next {\r\n          path\r\n        }\r\n        previous {\r\n          path\r\n        }\r\n      }\r\n    }\r\n    images: allFile(\r\n      filter: { relativePath: { regex: \"/[0-9]{4}/\" }, ext: { nin: [\".js\"] } }\r\n      sort: { fields: relativePath, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          extension\r\n          childImageSharp {\r\n            twitter: resize(width: 1024) {\r\n              src\r\n            }\r\n            og: resize(width: 1200, height: 630, cropFocus: CENTER) {\r\n              src\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport SketchLayout from \"~components/sketch-layout\";\r\n// import \"p5.createloop\";\r\n\r\nconst sketch = function(p) {\r\n  const RENDER = p.getURLParams().render;\r\n  // const DURATION = 20;\r\n  const RATE = 60;\r\n  let maxWidth = 6,\r\n  turbineWidth = 15,\r\n  heliceHeight,\r\n  heliceWidth = 3,\r\n  angle = 0,\r\n  speed = 1.25,\r\n  htmlSlider, htmlP\r\n\r\n  p.setup = function() {\r\n    p.createCanvas(600, 600);\r\n    heliceHeight = p.height/6;\r\n     \r\n    p.frameRate(RATE)\r\n    p.background(100);\r\n    p.pixelDensity(RENDER ? 2 : 1);\r\n    p.frameRate(RATE);\r\n    p.createCanvas(600, 600);\r\n\r\n    htmlP = p.createP(speed + ' speed');\r\n    htmlSlider = p.createSlider(0, 70, speed, 0.01); \r\n    htmlP.parent(\"sketch-controls\");\r\n    htmlSlider.parent(\"sketch-controls\");\r\n\r\n    // p.createLoop(DURATION, {\r\n    //  gif: RENDER ? { render: false, open: true } : false,\r\n    //  noiseRadius: 0.1,\r\n    // });\r\n  };\r\n\r\n  p.draw = function() {\r\n    p.strokeWeight(0.5);\r\n    speed = htmlSlider.value();\r\n    htmlP.elt.innerText = speed + \" speed\";\r\n    //59.6\r\n    p.background(100);\r\n    p.translate(p.width / 2, p.height / 1.5);\r\n\r\n    //base\r\n    p.rect(maxWidth / -2, 0, maxWidth, p.height / 2);\r\n\r\n    //center turbine\r\n    p.circle(0, 0, turbineWidth);\r\n    p.push();\r\n    p.angleMode(p.DEGREES);\r\n    p.rotate(angle);\r\n    let spaceFromCenter = turbineWidth / 5;\r\n    let x = p.cos(-90) * turbineWidth - heliceWidth / 2;\r\n    let y = (p.sin(-90) * turbineWidth) / 2 + spaceFromCenter;\r\n\r\n    //one\r\n    p.rect(x, y, heliceWidth, -heliceHeight);\r\n\r\n    //two\r\n    p.rotate(360 / 3);\r\n    p.rect(x, y, heliceWidth, -heliceHeight);\r\n\r\n    //three\r\n    p.rotate(360 / 3);\r\n    p.rect(x, y, heliceWidth, -heliceHeight);\r\n    p.pop();\r\n\r\n    angle += speed;\r\n  };\r\n};\r\n\r\nexport default ({ location }) => (\r\n  <SketchLayout sketch={sketch} path={location.pathname} description=\"wind generator\" />\r\n);\r\n"],"sourceRoot":""}